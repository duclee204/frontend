import { Directive, Input, ElementRef, Renderer2, inject } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { getTargetNode } from './bfs';
import { L10nTranslationService } from '../services/l10n-translation.service';
import * as i0 from "@angular/core";
class L10nDirective {
    constructor() {
        this.el = inject(ElementRef);
        this.renderer = inject(Renderer2);
        this.translation = inject(L10nTranslationService);
        this.attributes = [];
        this.destroy = new Subject();
    }
    set innerHTML(content) {
        // Handle TrustedHTML
        this.content = content.toString();
    }
    ngAfterViewInit() {
        if (this.el && this.el.nativeElement) {
            this.element = this.el.nativeElement;
            this.renderNode = getTargetNode(this.el.nativeElement);
            this.text = this.getText();
            this.attributes = this.getAttributes();
            this.addTextListener();
            if (this.language) {
                this.replaceText();
                this.replaceAttributes();
            }
            else {
                this.addTranslationListener();
            }
        }
    }
    ngOnChanges() {
        if (this.text) {
            if (this.nodeValue == null || this.nodeValue === '') {
                if (this.value) {
                    this.text = this.value;
                }
                else if (this.content) {
                    this.text = this.content;
                }
            }
            this.replaceText();
        }
        if (this.attributes && this.attributes.length > 0) {
            this.replaceAttributes();
        }
    }
    ngOnDestroy() {
        this.destroy.next(true);
        this.removeTextListener();
    }
    getText() {
        let text = '';
        if (this.element && this.element.childNodes.length > 0) {
            text = this.getNodeValue();
        }
        else if (this.value) {
            text = this.value;
        }
        else if (this.content) {
            text = this.content;
        }
        return text;
    }
    getNodeValue() {
        this.nodeValue = this.renderNode != null && this.renderNode.nodeValue != null ? this.renderNode.nodeValue : '';
        return this.nodeValue ? this.nodeValue.trim() : '';
    }
    getAttributes() {
        const attributes = [];
        if (this.element && this.element.attributes) {
            for (const attr of Array.from(this.element.attributes)) {
                if (attr && attr.name) {
                    const [, name = ''] = attr.name.match(/^l10n-(.+)$/) || [];
                    if (name) {
                        const targetAttr = Array.from(this.element.attributes).find(a => a.name === name);
                        if (targetAttr)
                            attributes.push({ name: targetAttr.name, value: targetAttr.value });
                    }
                }
            }
        }
        return attributes;
    }
    addTextListener() {
        if (typeof MutationObserver !== 'undefined') {
            this.textObserver = new MutationObserver(() => {
                if (this.element) {
                    this.renderNode = getTargetNode(this.element);
                    this.text = this.getText();
                    this.replaceText();
                }
            });
            if (this.renderNode) {
                this.textObserver.observe(this.renderNode, { subtree: true, characterData: true });
            }
        }
    }
    removeTextListener() {
        if (this.textObserver) {
            this.textObserver.disconnect();
        }
    }
    addTranslationListener() {
        this.translation.onChange().pipe(takeUntil(this.destroy)).subscribe({
            next: () => {
                this.replaceText();
                this.replaceAttributes();
            }
        });
    }
    replaceText() {
        if (this.text) {
            this.setText(this.getValue(this.text));
        }
    }
    replaceAttributes() {
        if (this.attributes.length > 0) {
            this.setAttributes(this.getAttributesValues());
        }
    }
    setText(value) {
        if (value) {
            if (this.nodeValue && this.text) {
                this.removeTextListener();
                this.renderer.setValue(this.renderNode, this.nodeValue.replace(this.text, value));
                this.addTextListener();
            }
            else if (this.value) {
                this.renderer.setAttribute(this.element, 'value', value);
            }
            else if (this.content) {
                this.renderer.setProperty(this.element, 'innerHTML', value);
            }
        }
    }
    setAttributes(data) {
        for (const attr of this.attributes) {
            this.renderer.setAttribute(this.element, attr.name, data[attr.value]);
        }
    }
    getAttributesValues() {
        const values = this.attributes.map(attr => attr.value);
        const data = {};
        for (const value of values) {
            data[value] = this.getValue(value);
        }
        return data;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.0", type: L10nDirective, inputs: { value: "value", innerHTML: "innerHTML", language: "language" }, usesOnChanges: true, ngImport: i0 }); }
}
export { L10nDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nDirective, decorators: [{
            type: Directive
        }], propDecorators: { value: [{
                type: Input
            }], innerHTML: [{
                type: Input
            }], language: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,