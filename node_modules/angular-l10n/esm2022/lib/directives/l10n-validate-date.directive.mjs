import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "../services/l10n-validation";
/**
 * Function that takes a control and returns either null when it’s valid, or an error object if it’s not.
 * @param validation The instance of L10nValidation service
 * @param options A L10n or Intl DateTimeFormatOptions object
 * @param minDate The minimum date
 * @param maxDate The maximum date
 * @param language The current language
 * @return An error object: 'format', 'minDate' or 'maxDate'; null in case the date is valid
 */
export function l10nValidateDate(validation, options, minDate, maxDate, language) {
    const validator = (c) => {
        if (c.value === '' || c.value == null)
            return null;
        const date = validation.parseDate(c.value, options, language);
        if (date != null) {
            if (minDate && date < minDate) {
                return { mindate: true };
            }
            else if (maxDate && date > maxDate) {
                return { maxDate: true };
            }
            return null; // The date is valid.
        }
        else {
            return { format: true };
        }
    };
    return validator;
}
class L10nValidateDateDirective {
    set l10nValidateDate(options) {
        if (options)
            this.options = options;
    }
    constructor(validation) {
        this.validation = validation;
    }
    ngOnInit() {
        this.validator = l10nValidateDate(this.validation, this.options, this.minDate, this.maxDate, this.language);
    }
    ngOnChanges() {
        this.validator = l10nValidateDate(this.validation, this.options, this.minDate, this.maxDate, this.language);
    }
    validate(c) {
        return this.validator ? this.validator(c) : null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nValidateDateDirective, deps: [{ token: i1.L10nValidation }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.0", type: L10nValidateDateDirective, isStandalone: true, selector: "[l10nValidateDate][ngModel],[l10nValidateDate][formControl],[l10nValidateDate][formControlName]", inputs: { l10nValidateDate: "l10nValidateDate", options: "options", minDate: "minDate", maxDate: "maxDate", language: "language" }, providers: [
            { provide: NG_VALIDATORS, useExisting: forwardRef(() => L10nValidateDateDirective), multi: true }
        ], usesOnChanges: true, ngImport: i0 }); }
}
export { L10nValidateDateDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nValidateDateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[l10nValidateDate][ngModel],[l10nValidateDate][formControl],[l10nValidateDate][formControlName]',
                    providers: [
                        { provide: NG_VALIDATORS, useExisting: forwardRef(() => L10nValidateDateDirective), multi: true }
                    ],
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.L10nValidation }]; }, propDecorators: { l10nValidateDate: [{
                type: Input
            }], options: [{
                type: Input
            }], minDate: [{
                type: Input
            }], maxDate: [{
                type: Input
            }], language: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDEwbi12YWxpZGF0ZS1kYXRlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbDEwbi9zcmMvbGliL2RpcmVjdGl2ZXMvbDEwbi12YWxpZGF0ZS1kYXRlLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBVSxLQUFLLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDaEYsT0FBTyxFQUFFLGFBQWEsRUFBNkQsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBSzFHOzs7Ozs7OztHQVFHO0FBQ0gsTUFBTSxVQUFVLGdCQUFnQixDQUM1QixVQUEwQixFQUMxQixPQUFtQyxFQUNuQyxPQUFjLEVBQ2QsT0FBYyxFQUNkLFFBQWlCO0lBRWpCLE1BQU0sU0FBUyxHQUFHLENBQUMsQ0FBa0IsRUFBMkIsRUFBRTtRQUM5RCxJQUFJLENBQUMsQ0FBQyxLQUFLLEtBQUssRUFBRSxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksSUFBSTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBRW5ELE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDOUQsSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFO1lBQ2QsSUFBSSxPQUFPLElBQUksSUFBSSxHQUFHLE9BQU8sRUFBRTtnQkFDM0IsT0FBTyxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUM1QjtpQkFBTSxJQUFJLE9BQU8sSUFBSSxJQUFJLEdBQUcsT0FBTyxFQUFFO2dCQUNsQyxPQUFPLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDO2FBQzVCO1lBQ0QsT0FBTyxJQUFJLENBQUMsQ0FBQyxxQkFBcUI7U0FDckM7YUFBTTtZQUNILE9BQU8sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUM7U0FDM0I7SUFDTCxDQUFDLENBQUM7SUFDRixPQUFPLFNBQVMsQ0FBQztBQUNyQixDQUFDO0FBRUQsTUFPYSx5QkFBeUI7SUFFbEMsSUFBYSxnQkFBZ0IsQ0FBQyxPQUF1QztRQUNqRSxJQUFJLE9BQU87WUFBRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztJQUN4QyxDQUFDO0lBV0QsWUFBc0IsVUFBMEI7UUFBMUIsZUFBVSxHQUFWLFVBQVUsQ0FBZ0I7SUFBSSxDQUFDO0lBRTlDLFFBQVE7UUFDWCxJQUFJLENBQUMsU0FBUyxHQUFHLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ2hILENBQUM7SUFFTSxXQUFXO1FBQ2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoSCxDQUFDO0lBRU0sUUFBUSxDQUFDLENBQWtCO1FBQzlCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3JELENBQUM7OEdBM0JRLHlCQUF5QjtrR0FBekIseUJBQXlCLGtSQUx2QjtZQUNQLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHlCQUF5QixDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtTQUNwRzs7U0FHUSx5QkFBeUI7MkZBQXpCLHlCQUF5QjtrQkFQckMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsaUdBQWlHO29CQUMzRyxTQUFTLEVBQUU7d0JBQ1AsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLDBCQUEwQixDQUFDLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtxQkFDcEc7b0JBQ0QsVUFBVSxFQUFFLElBQUk7aUJBQ25CO3FHQUdnQixnQkFBZ0I7c0JBQTVCLEtBQUs7Z0JBSVUsT0FBTztzQkFBdEIsS0FBSztnQkFFVSxPQUFPO3NCQUF0QixLQUFLO2dCQUNVLE9BQU87c0JBQXRCLEtBQUs7Z0JBRVUsUUFBUTtzQkFBdkIsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgZm9yd2FyZFJlZiwgT25Jbml0LCBJbnB1dCwgT25DaGFuZ2VzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IE5HX1ZBTElEQVRPUlMsIFZhbGlkYXRvciwgVmFsaWRhdG9yRm4sIFZhbGlkYXRpb25FcnJvcnMsIEFic3RyYWN0Q29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuXHJcbmltcG9ydCB7IEwxMG5EYXRlVGltZUZvcm1hdE9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvdHlwZXMnO1xyXG5pbXBvcnQgeyBMMTBuVmFsaWRhdGlvbiB9IGZyb20gJy4uL3NlcnZpY2VzL2wxMG4tdmFsaWRhdGlvbic7XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gdGhhdCB0YWtlcyBhIGNvbnRyb2wgYW5kIHJldHVybnMgZWl0aGVyIG51bGwgd2hlbiBpdOKAmXMgdmFsaWQsIG9yIGFuIGVycm9yIG9iamVjdCBpZiBpdOKAmXMgbm90LlxyXG4gKiBAcGFyYW0gdmFsaWRhdGlvbiBUaGUgaW5zdGFuY2Ugb2YgTDEwblZhbGlkYXRpb24gc2VydmljZVxyXG4gKiBAcGFyYW0gb3B0aW9ucyBBIEwxMG4gb3IgSW50bCBEYXRlVGltZUZvcm1hdE9wdGlvbnMgb2JqZWN0XHJcbiAqIEBwYXJhbSBtaW5EYXRlIFRoZSBtaW5pbXVtIGRhdGVcclxuICogQHBhcmFtIG1heERhdGUgVGhlIG1heGltdW0gZGF0ZVxyXG4gKiBAcGFyYW0gbGFuZ3VhZ2UgVGhlIGN1cnJlbnQgbGFuZ3VhZ2VcclxuICogQHJldHVybiBBbiBlcnJvciBvYmplY3Q6ICdmb3JtYXQnLCAnbWluRGF0ZScgb3IgJ21heERhdGUnOyBudWxsIGluIGNhc2UgdGhlIGRhdGUgaXMgdmFsaWRcclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBsMTBuVmFsaWRhdGVEYXRlKFxyXG4gICAgdmFsaWRhdGlvbjogTDEwblZhbGlkYXRpb24sXHJcbiAgICBvcHRpb25zPzogTDEwbkRhdGVUaW1lRm9ybWF0T3B0aW9ucyxcclxuICAgIG1pbkRhdGU/OiBEYXRlLFxyXG4gICAgbWF4RGF0ZT86IERhdGUsXHJcbiAgICBsYW5ndWFnZT86IHN0cmluZ1xyXG4pOiBWYWxpZGF0b3JGbiB7XHJcbiAgICBjb25zdCB2YWxpZGF0b3IgPSAoYzogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xyXG4gICAgICAgIGlmIChjLnZhbHVlID09PSAnJyB8fCBjLnZhbHVlID09IG51bGwpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICBjb25zdCBkYXRlID0gdmFsaWRhdGlvbi5wYXJzZURhdGUoYy52YWx1ZSwgb3B0aW9ucywgbGFuZ3VhZ2UpO1xyXG4gICAgICAgIGlmIChkYXRlICE9IG51bGwpIHtcclxuICAgICAgICAgICAgaWYgKG1pbkRhdGUgJiYgZGF0ZSA8IG1pbkRhdGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7IG1pbmRhdGU6IHRydWUgfTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChtYXhEYXRlICYmIGRhdGUgPiBtYXhEYXRlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBtYXhEYXRlOiB0cnVlIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7IC8vIFRoZSBkYXRlIGlzIHZhbGlkLlxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IGZvcm1hdDogdHJ1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gdmFsaWRhdG9yO1xyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2wxMG5WYWxpZGF0ZURhdGVdW25nTW9kZWxdLFtsMTBuVmFsaWRhdGVEYXRlXVtmb3JtQ29udHJvbF0sW2wxMG5WYWxpZGF0ZURhdGVdW2Zvcm1Db250cm9sTmFtZV0nLFxyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgeyBwcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMMTBuVmFsaWRhdGVEYXRlRGlyZWN0aXZlKSwgbXVsdGk6IHRydWUgfVxyXG4gICAgXSxcclxuICAgIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIEwxMG5WYWxpZGF0ZURhdGVEaXJlY3RpdmUgaW1wbGVtZW50cyBWYWxpZGF0b3IsIE9uSW5pdCwgT25DaGFuZ2VzIHtcclxuXHJcbiAgICBASW5wdXQoKSBzZXQgbDEwblZhbGlkYXRlRGF0ZShvcHRpb25zOiBMMTBuRGF0ZVRpbWVGb3JtYXRPcHRpb25zIHwgJycpIHtcclxuICAgICAgICBpZiAob3B0aW9ucykgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcclxuICAgIH1cclxuXHJcbiAgICBASW5wdXQoKSBwdWJsaWMgb3B0aW9ucz86IEwxMG5EYXRlVGltZUZvcm1hdE9wdGlvbnM7XHJcblxyXG4gICAgQElucHV0KCkgcHVibGljIG1pbkRhdGU/OiBEYXRlO1xyXG4gICAgQElucHV0KCkgcHVibGljIG1heERhdGU/OiBEYXRlO1xyXG5cclxuICAgIEBJbnB1dCgpIHB1YmxpYyBsYW5ndWFnZT86IHN0cmluZztcclxuXHJcbiAgICBwcm90ZWN0ZWQgdmFsaWRhdG9yPzogVmFsaWRhdG9yRm47XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIHZhbGlkYXRpb246IEwxMG5WYWxpZGF0aW9uKSB7IH1cclxuXHJcbiAgICBwdWJsaWMgbmdPbkluaXQoKSB7XHJcbiAgICAgICAgdGhpcy52YWxpZGF0b3IgPSBsMTBuVmFsaWRhdGVEYXRlKHRoaXMudmFsaWRhdGlvbiwgdGhpcy5vcHRpb25zLCB0aGlzLm1pbkRhdGUsIHRoaXMubWF4RGF0ZSwgdGhpcy5sYW5ndWFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKCkge1xyXG4gICAgICAgIHRoaXMudmFsaWRhdG9yID0gbDEwblZhbGlkYXRlRGF0ZSh0aGlzLnZhbGlkYXRpb24sIHRoaXMub3B0aW9ucywgdGhpcy5taW5EYXRlLCB0aGlzLm1heERhdGUsIHRoaXMubGFuZ3VhZ2UpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB2YWxpZGF0ZShjOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdG9yID8gdGhpcy52YWxpZGF0b3IoYykgOiBudWxsO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=