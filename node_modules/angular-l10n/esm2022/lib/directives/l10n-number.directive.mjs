import { Directive, Input } from '@angular/core';
import { L10nDirective } from '../models/l10n-directive';
import * as i0 from "@angular/core";
import * as i1 from "../services/l10n-intl.service";
class L10nNumberDirective extends L10nDirective {
    set l10nNumber(options) {
        if (options)
            this.options = options;
    }
    constructor(intl) {
        super();
        this.intl = intl;
    }
    getValue(text) {
        return this.intl.formatNumber(text, this.options, this.language, this.currency, this.convert, this.convertParams);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nNumberDirective, deps: [{ token: i1.L10nIntlService }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.0", type: L10nNumberDirective, isStandalone: true, selector: "[l10nNumber]", inputs: { l10nNumber: "l10nNumber", options: "options", currency: "currency", convert: "convert", convertParams: "convertParams" }, usesInheritance: true, ngImport: i0 }); }
}
export { L10nNumberDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nNumberDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[l10nNumber]',
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.L10nIntlService }]; }, propDecorators: { l10nNumber: [{
                type: Input
            }], options: [{
                type: Input
            }], currency: [{
                type: Input
            }], convert: [{
                type: Input
            }], convertParams: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDEwbi1udW1iZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1sMTBuL3NyYy9saWIvZGlyZWN0aXZlcy9sMTBuLW51bWJlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHakQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDBCQUEwQixDQUFDOzs7QUFHekQsTUFJYSxtQkFBb0IsU0FBUSxhQUFhO0lBRWxELElBQWEsVUFBVSxDQUFDLE9BQXFDO1FBQ3pELElBQUksT0FBTztZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3hDLENBQUM7SUFTRCxZQUFzQixJQUFxQjtRQUN2QyxLQUFLLEVBQUUsQ0FBQztRQURVLFNBQUksR0FBSixJQUFJLENBQWlCO0lBRTNDLENBQUM7SUFFUyxRQUFRLENBQUMsSUFBWTtRQUMzQixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztJQUN0SCxDQUFDOzhHQW5CUSxtQkFBbUI7a0dBQW5CLG1CQUFtQjs7U0FBbkIsbUJBQW1COzJGQUFuQixtQkFBbUI7a0JBSi9CLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFVBQVUsRUFBRSxJQUFJO2lCQUNuQjtzR0FHZ0IsVUFBVTtzQkFBdEIsS0FBSztnQkFJVSxPQUFPO3NCQUF0QixLQUFLO2dCQUVVLFFBQVE7c0JBQXZCLEtBQUs7Z0JBRVUsT0FBTztzQkFBdEIsS0FBSztnQkFDVSxhQUFhO3NCQUE1QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgTDEwbkxvY2FsZSwgTDEwbk51bWJlckZvcm1hdE9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvdHlwZXMnO1xyXG5pbXBvcnQgeyBMMTBuRGlyZWN0aXZlIH0gZnJvbSAnLi4vbW9kZWxzL2wxMG4tZGlyZWN0aXZlJztcclxuaW1wb3J0IHsgTDEwbkludGxTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbDEwbi1pbnRsLnNlcnZpY2UnO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1tsMTBuTnVtYmVyXScsXHJcbiAgICBzdGFuZGFsb25lOiB0cnVlXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMMTBuTnVtYmVyRGlyZWN0aXZlIGV4dGVuZHMgTDEwbkRpcmVjdGl2ZSB7XHJcblxyXG4gICAgQElucHV0KCkgc2V0IGwxMG5OdW1iZXIob3B0aW9uczogTDEwbk51bWJlckZvcm1hdE9wdGlvbnMgfCAnJykge1xyXG4gICAgICAgIGlmIChvcHRpb25zKSB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgfVxyXG5cclxuICAgIEBJbnB1dCgpIHB1YmxpYyBvcHRpb25zPzogTDEwbk51bWJlckZvcm1hdE9wdGlvbnM7XHJcblxyXG4gICAgQElucHV0KCkgcHVibGljIGN1cnJlbmN5Pzogc3RyaW5nO1xyXG5cclxuICAgIEBJbnB1dCgpIHB1YmxpYyBjb252ZXJ0PzogKHZhbHVlOiBudW1iZXIsIGxvY2FsZTogTDEwbkxvY2FsZSwgcGFyYW1zOiBhbnkpID0+IG51bWJlcjtcclxuICAgIEBJbnB1dCgpIHB1YmxpYyBjb252ZXJ0UGFyYW1zPzogYW55O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbnRsOiBMMTBuSW50bFNlcnZpY2UpIHtcclxuICAgICAgICBzdXBlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3RlY3RlZCBnZXRWYWx1ZSh0ZXh0OiBzdHJpbmcpOiBzdHJpbmcge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmludGwuZm9ybWF0TnVtYmVyKHRleHQsIHRoaXMub3B0aW9ucywgdGhpcy5sYW5ndWFnZSwgdGhpcy5jdXJyZW5jeSwgdGhpcy5jb252ZXJ0LCB0aGlzLmNvbnZlcnRQYXJhbXMpO1xyXG4gICAgfVxyXG5cclxufVxyXG4iXX0=