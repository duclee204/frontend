import { Directive, forwardRef, Input } from '@angular/core';
import { NG_VALIDATORS } from '@angular/forms';
import * as i0 from "@angular/core";
import * as i1 from "../services/l10n-validation";
/**
 * Function that takes a control and returns either null when it’s valid, or an error object if it’s not.
 * @param validation The instance of L10nValidation service
 * @param options A L10n or Intl NumberFormatOptions object
 * @param minValue The minimum value
 * @param maxValue The maximum value
 * @param language The current language
 * @return An error object: 'format', 'minValue' or 'maxValue'; null in case the value is valid
 */
export function l10nValidateNumber(validation, options, minValue = Number.MIN_VALUE, maxValue = Number.MAX_VALUE, language) {
    const validator = (c) => {
        if (c.value === '' || c.value == null)
            return null;
        const value = validation.parseNumber(c.value, options, language);
        if (value != null) {
            if (value < minValue) {
                return { minValue: true };
            }
            else if (value > maxValue) {
                return { maxValue: true };
            }
            return null; // The number is valid.
        }
        else {
            return { format: true };
        }
    };
    return validator;
}
class L10nValidateNumberDirective {
    set l10nValidateNumber(options) {
        if (options)
            this.options = options;
    }
    constructor(validation) {
        this.validation = validation;
    }
    ngOnInit() {
        this.validator = l10nValidateNumber(this.validation, this.options, this.minValue, this.maxValue, this.language);
    }
    ngOnChanges() {
        this.validator = l10nValidateNumber(this.validation, this.options, this.minValue, this.maxValue, this.language);
    }
    validate(c) {
        return this.validator ? this.validator(c) : null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nValidateNumberDirective, deps: [{ token: i1.L10nValidation }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.0.0", type: L10nValidateNumberDirective, isStandalone: true, selector: "[l10nValidateNumber][ngModel],[l10nValidateNumber][formControl],[l10nValidateNumber][formControlName]", inputs: { l10nValidateNumber: "l10nValidateNumber", options: "options", minValue: "minValue", maxValue: "maxValue", language: "language" }, providers: [
            { provide: NG_VALIDATORS, useExisting: forwardRef(() => L10nValidateNumberDirective), multi: true }
        ], usesOnChanges: true, ngImport: i0 }); }
}
export { L10nValidateNumberDirective };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nValidateNumberDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[l10nValidateNumber][ngModel],[l10nValidateNumber][formControl],[l10nValidateNumber][formControlName]',
                    providers: [
                        { provide: NG_VALIDATORS, useExisting: forwardRef(() => L10nValidateNumberDirective), multi: true }
                    ],
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.L10nValidation }]; }, propDecorators: { l10nValidateNumber: [{
                type: Input
            }], options: [{
                type: Input
            }], minValue: [{
                type: Input
            }], maxValue: [{
                type: Input
            }], language: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDEwbi12YWxpZGF0ZS1udW1iZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1sMTBuL3NyYy9saWIvZGlyZWN0aXZlcy9sMTBuLXZhbGlkYXRlLW51bWJlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQVUsS0FBSyxFQUFhLE1BQU0sZUFBZSxDQUFDO0FBQ2hGLE9BQU8sRUFBRSxhQUFhLEVBQTZELE1BQU0sZ0JBQWdCLENBQUM7OztBQUsxRzs7Ozs7Ozs7R0FRRztBQUNILE1BQU0sVUFBVSxrQkFBa0IsQ0FDOUIsVUFBMEIsRUFDMUIsT0FBaUMsRUFDakMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxTQUFTLEVBQzNCLFFBQVEsR0FBRyxNQUFNLENBQUMsU0FBUyxFQUMzQixRQUFpQjtJQUVqQixNQUFNLFNBQVMsR0FBRyxDQUFDLENBQWtCLEVBQTJCLEVBQUU7UUFDOUQsSUFBSSxDQUFDLENBQUMsS0FBSyxLQUFLLEVBQUUsSUFBSSxDQUFDLENBQUMsS0FBSyxJQUFJLElBQUk7WUFBRSxPQUFPLElBQUksQ0FBQztRQUVuRCxNQUFNLEtBQUssR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBQ2pFLElBQUksS0FBSyxJQUFJLElBQUksRUFBRTtZQUNmLElBQUksS0FBSyxHQUFHLFFBQVEsRUFBRTtnQkFDbEIsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUUsQ0FBQzthQUM3QjtpQkFBTSxJQUFJLEtBQUssR0FBRyxRQUFRLEVBQUU7Z0JBQ3pCLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLENBQUM7YUFDN0I7WUFDRCxPQUFPLElBQUksQ0FBQyxDQUFDLHVCQUF1QjtTQUN2QzthQUFNO1lBQ0gsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQztTQUMzQjtJQUNMLENBQUMsQ0FBQztJQUNGLE9BQU8sU0FBUyxDQUFDO0FBQ3JCLENBQUM7QUFFRCxNQU9hLDJCQUEyQjtJQUVwQyxJQUFhLGtCQUFrQixDQUFDLE9BQXFDO1FBQ2pFLElBQUksT0FBTztZQUFFLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0lBQ3hDLENBQUM7SUFXRCxZQUFzQixVQUEwQjtRQUExQixlQUFVLEdBQVYsVUFBVSxDQUFnQjtJQUFJLENBQUM7SUFFOUMsUUFBUTtRQUNYLElBQUksQ0FBQyxTQUFTLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDcEgsQ0FBQztJQUVNLFdBQVc7UUFDZCxJQUFJLENBQUMsU0FBUyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQ3BILENBQUM7SUFFTSxRQUFRLENBQUMsQ0FBa0I7UUFDOUIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDckQsQ0FBQzs4R0EzQlEsMkJBQTJCO2tHQUEzQiwyQkFBMkIsZ1NBTHpCO1lBQ1AsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsMkJBQTJCLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO1NBQ3RHOztTQUdRLDJCQUEyQjsyRkFBM0IsMkJBQTJCO2tCQVB2QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSx1R0FBdUc7b0JBQ2pILFNBQVMsRUFBRTt3QkFDUCxFQUFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsV0FBVyxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsNEJBQTRCLENBQUMsRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFO3FCQUN0RztvQkFDRCxVQUFVLEVBQUUsSUFBSTtpQkFDbkI7cUdBR2dCLGtCQUFrQjtzQkFBOUIsS0FBSztnQkFJVSxPQUFPO3NCQUF0QixLQUFLO2dCQUVVLFFBQVE7c0JBQXZCLEtBQUs7Z0JBQ1UsUUFBUTtzQkFBdkIsS0FBSztnQkFFVSxRQUFRO3NCQUF2QixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBmb3J3YXJkUmVmLCBPbkluaXQsIElucHV0LCBPbkNoYW5nZXMgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgTkdfVkFMSURBVE9SUywgVmFsaWRhdG9yLCBWYWxpZGF0b3JGbiwgVmFsaWRhdGlvbkVycm9ycywgQWJzdHJhY3RDb250cm9sIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5cclxuaW1wb3J0IHsgTDEwbk51bWJlckZvcm1hdE9wdGlvbnMgfSBmcm9tICcuLi9tb2RlbHMvdHlwZXMnO1xyXG5pbXBvcnQgeyBMMTBuVmFsaWRhdGlvbiB9IGZyb20gJy4uL3NlcnZpY2VzL2wxMG4tdmFsaWRhdGlvbic7XHJcblxyXG4vKipcclxuICogRnVuY3Rpb24gdGhhdCB0YWtlcyBhIGNvbnRyb2wgYW5kIHJldHVybnMgZWl0aGVyIG51bGwgd2hlbiBpdOKAmXMgdmFsaWQsIG9yIGFuIGVycm9yIG9iamVjdCBpZiBpdOKAmXMgbm90LlxyXG4gKiBAcGFyYW0gdmFsaWRhdGlvbiBUaGUgaW5zdGFuY2Ugb2YgTDEwblZhbGlkYXRpb24gc2VydmljZVxyXG4gKiBAcGFyYW0gb3B0aW9ucyBBIEwxMG4gb3IgSW50bCBOdW1iZXJGb3JtYXRPcHRpb25zIG9iamVjdFxyXG4gKiBAcGFyYW0gbWluVmFsdWUgVGhlIG1pbmltdW0gdmFsdWVcclxuICogQHBhcmFtIG1heFZhbHVlIFRoZSBtYXhpbXVtIHZhbHVlXHJcbiAqIEBwYXJhbSBsYW5ndWFnZSBUaGUgY3VycmVudCBsYW5ndWFnZVxyXG4gKiBAcmV0dXJuIEFuIGVycm9yIG9iamVjdDogJ2Zvcm1hdCcsICdtaW5WYWx1ZScgb3IgJ21heFZhbHVlJzsgbnVsbCBpbiBjYXNlIHRoZSB2YWx1ZSBpcyB2YWxpZFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGwxMG5WYWxpZGF0ZU51bWJlcihcclxuICAgIHZhbGlkYXRpb246IEwxMG5WYWxpZGF0aW9uLFxyXG4gICAgb3B0aW9ucz86IEwxMG5OdW1iZXJGb3JtYXRPcHRpb25zLFxyXG4gICAgbWluVmFsdWUgPSBOdW1iZXIuTUlOX1ZBTFVFLFxyXG4gICAgbWF4VmFsdWUgPSBOdW1iZXIuTUFYX1ZBTFVFLFxyXG4gICAgbGFuZ3VhZ2U/OiBzdHJpbmdcclxuKTogVmFsaWRhdG9yRm4ge1xyXG4gICAgY29uc3QgdmFsaWRhdG9yID0gKGM6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcclxuICAgICAgICBpZiAoYy52YWx1ZSA9PT0gJycgfHwgYy52YWx1ZSA9PSBudWxsKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB2YWxpZGF0aW9uLnBhcnNlTnVtYmVyKGMudmFsdWUsIG9wdGlvbnMsIGxhbmd1YWdlKTtcclxuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPCBtaW5WYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgbWluVmFsdWU6IHRydWUgfTtcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA+IG1heFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4geyBtYXhWYWx1ZTogdHJ1ZSB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsOyAvLyBUaGUgbnVtYmVyIGlzIHZhbGlkLlxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IGZvcm1hdDogdHJ1ZSB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICByZXR1cm4gdmFsaWRhdG9yO1xyXG59XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW2wxMG5WYWxpZGF0ZU51bWJlcl1bbmdNb2RlbF0sW2wxMG5WYWxpZGF0ZU51bWJlcl1bZm9ybUNvbnRyb2xdLFtsMTBuVmFsaWRhdGVOdW1iZXJdW2Zvcm1Db250cm9sTmFtZV0nLFxyXG4gICAgcHJvdmlkZXJzOiBbXHJcbiAgICAgICAgeyBwcm92aWRlOiBOR19WQUxJREFUT1JTLCB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBMMTBuVmFsaWRhdGVOdW1iZXJEaXJlY3RpdmUpLCBtdWx0aTogdHJ1ZSB9XHJcbiAgICBdLFxyXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxyXG59KVxyXG5leHBvcnQgY2xhc3MgTDEwblZhbGlkYXRlTnVtYmVyRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yLCBPbkluaXQsIE9uQ2hhbmdlcyB7XHJcblxyXG4gICAgQElucHV0KCkgc2V0IGwxMG5WYWxpZGF0ZU51bWJlcihvcHRpb25zOiBMMTBuTnVtYmVyRm9ybWF0T3B0aW9ucyB8ICcnKSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMpIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICB9XHJcblxyXG4gICAgQElucHV0KCkgcHVibGljIG9wdGlvbnM/OiBMMTBuTnVtYmVyRm9ybWF0T3B0aW9ucztcclxuXHJcbiAgICBASW5wdXQoKSBwdWJsaWMgbWluVmFsdWU/OiBudW1iZXI7XHJcbiAgICBASW5wdXQoKSBwdWJsaWMgbWF4VmFsdWU/OiBudW1iZXI7XHJcblxyXG4gICAgQElucHV0KCkgcHVibGljIGxhbmd1YWdlPzogc3RyaW5nO1xyXG5cclxuICAgIHByb3RlY3RlZCB2YWxpZGF0b3I/OiBWYWxpZGF0b3JGbjtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgdmFsaWRhdGlvbjogTDEwblZhbGlkYXRpb24pIHsgfVxyXG5cclxuICAgIHB1YmxpYyBuZ09uSW5pdCgpIHtcclxuICAgICAgICB0aGlzLnZhbGlkYXRvciA9IGwxMG5WYWxpZGF0ZU51bWJlcih0aGlzLnZhbGlkYXRpb24sIHRoaXMub3B0aW9ucywgdGhpcy5taW5WYWx1ZSwgdGhpcy5tYXhWYWx1ZSwgdGhpcy5sYW5ndWFnZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG5nT25DaGFuZ2VzKCkge1xyXG4gICAgICAgIHRoaXMudmFsaWRhdG9yID0gbDEwblZhbGlkYXRlTnVtYmVyKHRoaXMudmFsaWRhdGlvbiwgdGhpcy5vcHRpb25zLCB0aGlzLm1pblZhbHVlLCB0aGlzLm1heFZhbHVlLCB0aGlzLmxhbmd1YWdlKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdmFsaWRhdGUoYzogQWJzdHJhY3RDb250cm9sKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnZhbGlkYXRvciA/IHRoaXMudmFsaWRhdG9yKGMpIDogbnVsbDtcclxuICAgIH1cclxuXHJcbn1cclxuIl19