import { Injectable, Inject } from '@angular/core';
import { BehaviorSubject, merge, concat } from 'rxjs';
import { L10N_CONFIG, L10N_LOCALE } from '../models/l10n-config';
import { formatLanguage, getSchema, getValue, mergeDeep } from '../models/utils';
import * as i0 from "@angular/core";
import * as i1 from "./l10n-cache";
import * as i2 from "./l10n-storage";
import * as i3 from "./l10n-locale-resolver";
import * as i4 from "./l10n-translation-fallback";
import * as i5 from "./l10n-translation-loader";
import * as i6 from "./l10n-translation-handler";
import * as i7 from "./l10n-missing-translation-handler";
class L10nTranslationService {
    constructor(config, locale, cache, storage, resolveLocale, translationFallback, translationLoader, translationHandler, missingTranslationHandler) {
        this.config = config;
        this.locale = locale;
        this.cache = cache;
        this.storage = storage;
        this.resolveLocale = resolveLocale;
        this.translationFallback = translationFallback;
        this.translationLoader = translationLoader;
        this.translationHandler = translationHandler;
        this.missingTranslationHandler = missingTranslationHandler;
        /**
         * The translation data: {language: {key: value}}
         */
        this.data = {};
        this.translation = new BehaviorSubject(this.locale);
        this.error = new BehaviorSubject(null);
    }
    /**
     * Gets the current locale.
     */
    getLocale() {
        return this.locale;
    }
    /**
     * Changes the current locale and load the translation data.
     * @param locale The new locale
     */
    async setLocale(locale) {
        await this.loadTranslations(this.config.providers, locale);
    }
    /**
     * Fired every time the translation data has been loaded. Returns the locale.
     */
    onChange() {
        return this.translation.asObservable();
    }
    /**
     * Fired when the translation data could not been loaded. Returns the error.
     */
    onError() {
        return this.error.asObservable();
    }
    /**
     * Translates a key or an array of keys.
     * @param keys The key or an array of keys to be translated
     * @param params Optional parameters contained in the key
     * @param language The current language
     * @return The translated value or an object: {key: value}
     */
    translate(keys, params, language = this.locale.language) {
        language = formatLanguage(language, this.config.format);
        if (Array.isArray(keys)) {
            const data = {};
            for (const key of keys) {
                data[key] = this.translate(key, params, language);
            }
            return data;
        }
        const value = getValue(keys, this.data[language], this.config.keySeparator);
        return value ? this.translationHandler.parseValue(keys, params, value) : this.missingTranslationHandler.handle(keys, value, params);
    }
    /**
     * Checks if a translation exists.
     * @param key The key to be tested
     * @param language The current language
     */
    has(key, language = this.locale.language) {
        language = formatLanguage(language, this.config.format);
        return getValue(key, this.data[language], this.config.keySeparator) !== null;
    }
    /**
     * Gets the language direction.
     */
    getLanguageDirection(language = this.locale.language) {
        const schema = getSchema(this.config.schema, language, this.config.format);
        return schema ? schema.dir : undefined;
    }
    /**
     * Gets available languages.
     */
    getAvailableLanguages() {
        const languages = this.config.schema.map(item => formatLanguage(item.locale.language, this.config.format));
        return languages;
    }
    /**
     * Initializes the service
     * @param providers An array of L10nProvider
     */
    async init(providers = this.config.providers) {
        let locale = null;
        // Tries to get locale from storage.
        if (locale == null) {
            locale = await this.storage.read();
        }
        // Tries resolved locale.
        if (locale == null) {
            locale = await this.resolveLocale.get();
        }
        // Uses default locale.
        if (locale == null) {
            locale = this.config.defaultLocale;
        }
        // Loads translation data.
        await this.loadTranslations(providers, locale);
    }
    /**
     * Can be called at every translation change.
     * @param providers An array of L10nProvider
     * @param locale The current locale
     */
    async loadTranslations(providers = this.config.providers, locale = this.locale) {
        const language = formatLanguage(locale.language, this.config.format);
        return new Promise((resolve) => {
            concat(...this.getTranslation(providers, language)).subscribe({
                next: (data) => this.addData(data, language),
                error: (error) => {
                    this.handleError(error);
                    resolve();
                },
                complete: () => {
                    this.releaseTranslation(locale);
                    resolve();
                }
            });
        });
    }
    /**
     * Can be called to add translation data.
     * @param data The translation data {key: value}
     * @param language The language to add data
     */
    addData(data, language) {
        this.data[language] = this.data[language] !== undefined
            ? mergeDeep(this.data[language], data)
            : data;
    }
    /**
     * Adds providers to configuration
     * @param providers The providers of the translations data
     */
    addProviders(providers) {
        providers.forEach(provider => {
            if (!this.config.providers.find(p => p.name === provider.name)) {
                this.config.providers.push(provider);
            }
        });
    }
    getTranslation(providers, language) {
        const lazyLoaders = [];
        let loaders = [];
        for (const provider of providers) {
            if (this.config.fallback) {
                loaders = loaders.concat(this.translationFallback.get(language, provider));
            }
            else {
                if (this.config.cache) {
                    lazyLoaders.push(this.cache.read(`${provider.name}-${language}`, this.translationLoader.get(language, provider)));
                }
                else {
                    lazyLoaders.push(this.translationLoader.get(language, provider));
                }
            }
        }
        loaders.push(merge(...lazyLoaders));
        return loaders;
    }
    handleError(error) {
        this.error.next(error);
    }
    releaseTranslation(locale) {
        Object.assign(this.locale, locale);
        this.translation.next(this.locale);
        this.storage.write(this.locale);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslationService, deps: [{ token: L10N_CONFIG }, { token: L10N_LOCALE }, { token: i1.L10nCache }, { token: i2.L10nStorage }, { token: i3.L10nLocaleResolver }, { token: i4.L10nTranslationFallback }, { token: i5.L10nTranslationLoader }, { token: i6.L10nTranslationHandler }, { token: i7.L10nMissingTranslationHandler }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslationService }); }
}
export { L10nTranslationService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslationService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [L10N_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [L10N_LOCALE]
                }] }, { type: i1.L10nCache }, { type: i2.L10nStorage }, { type: i3.L10nLocaleResolver }, { type: i4.L10nTranslationFallback }, { type: i5.L10nTranslationLoader }, { type: i6.L10nTranslationHandler }, { type: i7.L10nMissingTranslationHandler }]; } });
//# sourceMappingURL=data:application/json;base64,