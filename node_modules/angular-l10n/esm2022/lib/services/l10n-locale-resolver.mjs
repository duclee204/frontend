import { Inject, Injectable } from '@angular/core';
import { L10N_CONFIG } from '../models/l10n-config';
import { getBrowserLanguage, getSchema } from '../models/utils';
import * as i0 from "@angular/core";
/**
 * Implement this class-interface to resolve the locale.
 */
class L10nLocaleResolver {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nLocaleResolver, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nLocaleResolver }); }
}
export { L10nLocaleResolver };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nLocaleResolver, decorators: [{
            type: Injectable
        }] });
class L10nDefaultLocaleResolver {
    constructor(config) {
        this.config = config;
    }
    async get() {
        const browserLanguage = getBrowserLanguage(this.config.format);
        if (browserLanguage) {
            const schema = getSchema(this.config.schema, browserLanguage, this.config.format);
            if (schema) {
                return Promise.resolve(schema.locale);
            }
        }
        return Promise.resolve(null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nDefaultLocaleResolver, deps: [{ token: L10N_CONFIG }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nDefaultLocaleResolver }); }
}
export { L10nDefaultLocaleResolver };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nDefaultLocaleResolver, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [L10N_CONFIG]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDEwbi1sb2NhbGUtcmVzb2x2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWwxMG4vc3JjL2xpYi9zZXJ2aWNlcy9sMTBuLWxvY2FsZS1yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVuRCxPQUFPLEVBQUUsV0FBVyxFQUFjLE1BQU0sdUJBQXVCLENBQUM7QUFDaEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxNQUFNLGlCQUFpQixDQUFDOztBQUdoRTs7R0FFRztBQUNILE1BQW9DLGtCQUFrQjs4R0FBbEIsa0JBQWtCO2tIQUFsQixrQkFBa0I7O1NBQWxCLGtCQUFrQjsyRkFBbEIsa0JBQWtCO2tCQUFyRCxVQUFVOztBQVVYLE1BQTJCLHlCQUF5QjtJQUVoRCxZQUF5QyxNQUFrQjtRQUFsQixXQUFNLEdBQU4sTUFBTSxDQUFZO0lBQUksQ0FBQztJQUV6RCxLQUFLLENBQUMsR0FBRztRQUNaLE1BQU0sZUFBZSxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDL0QsSUFBSSxlQUFlLEVBQUU7WUFDakIsTUFBTSxNQUFNLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLGVBQWUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQ2xGLElBQUksTUFBTSxFQUFFO2dCQUNSLE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7YUFDekM7U0FDSjtRQUNELE9BQU8sT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQyxDQUFDOzhHQWJzQix5QkFBeUIsa0JBRTVCLFdBQVc7a0hBRlIseUJBQXlCOztTQUF6Qix5QkFBeUI7MkZBQXpCLHlCQUF5QjtrQkFBbkQsVUFBVTs7MEJBRU0sTUFBTTsyQkFBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBMMTBOX0NPTkZJRywgTDEwbkNvbmZpZyB9IGZyb20gJy4uL21vZGVscy9sMTBuLWNvbmZpZyc7XHJcbmltcG9ydCB7IGdldEJyb3dzZXJMYW5ndWFnZSwgZ2V0U2NoZW1hIH0gZnJvbSAnLi4vbW9kZWxzL3V0aWxzJztcclxuaW1wb3J0IHsgTDEwbkxvY2FsZSB9IGZyb20gJy4uL21vZGVscy90eXBlcyc7XHJcblxyXG4vKipcclxuICogSW1wbGVtZW50IHRoaXMgY2xhc3MtaW50ZXJmYWNlIHRvIHJlc29sdmUgdGhlIGxvY2FsZS5cclxuICovXHJcbkBJbmplY3RhYmxlKCkgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEwxMG5Mb2NhbGVSZXNvbHZlciB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBtdXN0IGNvbnRhaW4gdGhlIGxvZ2ljIHRvIGdldCB0aGUgbG9jYWxlLlxyXG4gICAgICogQHJldHVybiBUaGUgbG9jYWxlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXQoKTogUHJvbWlzZTxMMTBuTG9jYWxlIHwgbnVsbD47XHJcblxyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpIGV4cG9ydCBjbGFzcyBMMTBuRGVmYXVsdExvY2FsZVJlc29sdmVyIGltcGxlbWVudHMgTDEwbkxvY2FsZVJlc29sdmVyIHtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEwxME5fQ09ORklHKSBwcml2YXRlIGNvbmZpZzogTDEwbkNvbmZpZykgeyB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGdldCgpOiBQcm9taXNlPEwxMG5Mb2NhbGUgfCBudWxsPiB7XHJcbiAgICAgICAgY29uc3QgYnJvd3Nlckxhbmd1YWdlID0gZ2V0QnJvd3Nlckxhbmd1YWdlKHRoaXMuY29uZmlnLmZvcm1hdCk7XHJcbiAgICAgICAgaWYgKGJyb3dzZXJMYW5ndWFnZSkge1xyXG4gICAgICAgICAgICBjb25zdCBzY2hlbWEgPSBnZXRTY2hlbWEodGhpcy5jb25maWcuc2NoZW1hLCBicm93c2VyTGFuZ3VhZ2UsIHRoaXMuY29uZmlnLmZvcm1hdCk7XHJcbiAgICAgICAgICAgIGlmIChzY2hlbWEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoc2NoZW1hLmxvY2FsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19