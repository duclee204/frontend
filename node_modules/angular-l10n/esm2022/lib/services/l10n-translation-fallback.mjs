import { Injectable, Inject } from '@angular/core';
import { L10N_CONFIG } from '../models/l10n-config';
import * as i0 from "@angular/core";
import * as i1 from "./l10n-cache";
import * as i2 from "./l10n-translation-loader";
/**
 * Implement this class-interface to create a translation fallback.
 */
class L10nTranslationFallback {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslationFallback, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslationFallback }); }
}
export { L10nTranslationFallback };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslationFallback, decorators: [{
            type: Injectable
        }] });
class L10nDefaultTranslationFallback {
    constructor(config, cache, translationLoader) {
        this.config = config;
        this.cache = cache;
        this.translationLoader = translationLoader;
    }
    /**
     * Translation data will be merged in the following order:
     * 'language'
     * 'language[-script]'
     * 'language[-script][-region]'
     */
    get(language, provider) {
        const loaders = [];
        const keywords = language.match(/-?[a-zA-z]+/g) || [];
        let fallbackLanguage = '';
        for (const keyword of keywords) {
            fallbackLanguage += keyword;
            if (this.config.cache) {
                loaders.push(this.cache.read(`${provider.name}-${fallbackLanguage}`, this.translationLoader.get(fallbackLanguage, provider)));
            }
            else {
                loaders.push(this.translationLoader.get(fallbackLanguage, provider));
            }
        }
        return loaders;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nDefaultTranslationFallback, deps: [{ token: L10N_CONFIG }, { token: i1.L10nCache }, { token: i2.L10nTranslationLoader }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nDefaultTranslationFallback }); }
}
export { L10nDefaultTranslationFallback };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nDefaultTranslationFallback, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [L10N_CONFIG]
                }] }, { type: i1.L10nCache }, { type: i2.L10nTranslationLoader }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDEwbi10cmFuc2xhdGlvbi1mYWxsYmFjay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbDEwbi9zcmMvbGliL3NlcnZpY2VzL2wxMG4tdHJhbnNsYXRpb24tZmFsbGJhY2sudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFJbkQsT0FBTyxFQUFFLFdBQVcsRUFBYyxNQUFNLHVCQUF1QixDQUFDOzs7O0FBSWhFOztHQUVHO0FBQ0gsTUFBb0MsdUJBQXVCOzhHQUF2Qix1QkFBdUI7a0hBQXZCLHVCQUF1Qjs7U0FBdkIsdUJBQXVCOzJGQUF2Qix1QkFBdUI7a0JBQTFELFVBQVU7O0FBWVgsTUFBMkIsOEJBQThCO0lBRXJELFlBQ2lDLE1BQWtCLEVBQ3ZDLEtBQWdCLEVBQ2hCLGlCQUF3QztRQUZuQixXQUFNLEdBQU4sTUFBTSxDQUFZO1FBQ3ZDLFVBQUssR0FBTCxLQUFLLENBQVc7UUFDaEIsc0JBQWlCLEdBQWpCLGlCQUFpQixDQUF1QjtJQUNoRCxDQUFDO0lBRUw7Ozs7O09BS0c7SUFDSSxHQUFHLENBQUMsUUFBZ0IsRUFBRSxRQUFzQjtRQUMvQyxNQUFNLE9BQU8sR0FBc0IsRUFBRSxDQUFDO1FBQ3RDLE1BQU0sUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ3RELElBQUksZ0JBQWdCLEdBQUcsRUFBRSxDQUFDO1FBQzFCLEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFO1lBQzVCLGdCQUFnQixJQUFJLE9BQU8sQ0FBQztZQUM1QixJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFO2dCQUNuQixPQUFPLENBQUMsSUFBSSxDQUNSLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLElBQUksSUFBSSxnQkFBZ0IsRUFBRSxFQUNsRCxJQUFJLENBQUMsaUJBQWlCLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQzlELENBQUM7YUFDTDtpQkFBTTtnQkFDSCxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsZ0JBQWdCLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQzthQUN4RTtTQUNKO1FBQ0QsT0FBTyxPQUFPLENBQUM7SUFDbkIsQ0FBQzs4R0E5QnNCLDhCQUE4QixrQkFHekMsV0FBVztrSEFIQSw4QkFBOEI7O1NBQTlCLDhCQUE4QjsyRkFBOUIsOEJBQThCO2tCQUF4RCxVQUFVOzswQkFHRixNQUFNOzJCQUFDLFdBQVciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xyXG5cclxuaW1wb3J0IHsgTDEwblByb3ZpZGVyIH0gZnJvbSAnLi4vbW9kZWxzL3R5cGVzJztcclxuaW1wb3J0IHsgTDEwTl9DT05GSUcsIEwxMG5Db25maWcgfSBmcm9tICcuLi9tb2RlbHMvbDEwbi1jb25maWcnO1xyXG5pbXBvcnQgeyBMMTBuQ2FjaGUgfSBmcm9tICcuL2wxMG4tY2FjaGUnO1xyXG5pbXBvcnQgeyBMMTBuVHJhbnNsYXRpb25Mb2FkZXIgfSBmcm9tICcuL2wxMG4tdHJhbnNsYXRpb24tbG9hZGVyJztcclxuXHJcbi8qKlxyXG4gKiBJbXBsZW1lbnQgdGhpcyBjbGFzcy1pbnRlcmZhY2UgdG8gY3JlYXRlIGEgdHJhbnNsYXRpb24gZmFsbGJhY2suXHJcbiAqL1xyXG5ASW5qZWN0YWJsZSgpIGV4cG9ydCBhYnN0cmFjdCBjbGFzcyBMMTBuVHJhbnNsYXRpb25GYWxsYmFjayB7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBtdXN0IGNvbnRhaW4gdGhlIGxvZ2ljIHRvIGdldCB0aGUgb3JkZXJlZCBsb2FkZXJzLlxyXG4gICAgICogQHBhcmFtIGxhbmd1YWdlIFRoZSBjdXJyZW50IGxhbmd1YWdlXHJcbiAgICAgKiBAcGFyYW0gcHJvdmlkZXIgVGhlIHByb3ZpZGVyIG9mIHRoZSB0cmFuc2xhdGlvbnMgZGF0YVxyXG4gICAgICogQHJldHVybiBBbiBhcnJheSBvZiBsb2FkZXJzXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBnZXQobGFuZ3VhZ2U6IHN0cmluZywgcHJvdmlkZXI6IEwxMG5Qcm92aWRlcik6IE9ic2VydmFibGU8YW55PltdO1xyXG5cclxufVxyXG5cclxuQEluamVjdGFibGUoKSBleHBvcnQgY2xhc3MgTDEwbkRlZmF1bHRUcmFuc2xhdGlvbkZhbGxiYWNrIGltcGxlbWVudHMgTDEwblRyYW5zbGF0aW9uRmFsbGJhY2sge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKFxyXG4gICAgICAgIEBJbmplY3QoTDEwTl9DT05GSUcpIHByaXZhdGUgY29uZmlnOiBMMTBuQ29uZmlnLFxyXG4gICAgICAgIHByaXZhdGUgY2FjaGU6IEwxMG5DYWNoZSxcclxuICAgICAgICBwcml2YXRlIHRyYW5zbGF0aW9uTG9hZGVyOiBMMTBuVHJhbnNsYXRpb25Mb2FkZXJcclxuICAgICkgeyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUcmFuc2xhdGlvbiBkYXRhIHdpbGwgYmUgbWVyZ2VkIGluIHRoZSBmb2xsb3dpbmcgb3JkZXI6XHJcbiAgICAgKiAnbGFuZ3VhZ2UnXHJcbiAgICAgKiAnbGFuZ3VhZ2VbLXNjcmlwdF0nXHJcbiAgICAgKiAnbGFuZ3VhZ2VbLXNjcmlwdF1bLXJlZ2lvbl0nXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBnZXQobGFuZ3VhZ2U6IHN0cmluZywgcHJvdmlkZXI6IEwxMG5Qcm92aWRlcik6IE9ic2VydmFibGU8YW55PltdIHtcclxuICAgICAgICBjb25zdCBsb2FkZXJzOiBPYnNlcnZhYmxlPGFueT5bXSA9IFtdO1xyXG4gICAgICAgIGNvbnN0IGtleXdvcmRzID0gbGFuZ3VhZ2UubWF0Y2goLy0/W2EtekEtel0rL2cpIHx8IFtdO1xyXG4gICAgICAgIGxldCBmYWxsYmFja0xhbmd1YWdlID0gJyc7XHJcbiAgICAgICAgZm9yIChjb25zdCBrZXl3b3JkIG9mIGtleXdvcmRzKSB7XHJcbiAgICAgICAgICAgIGZhbGxiYWNrTGFuZ3VhZ2UgKz0ga2V5d29yZDtcclxuICAgICAgICAgICAgaWYgKHRoaXMuY29uZmlnLmNhY2hlKSB7XHJcbiAgICAgICAgICAgICAgICBsb2FkZXJzLnB1c2goXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jYWNoZS5yZWFkKGAke3Byb3ZpZGVyLm5hbWV9LSR7ZmFsbGJhY2tMYW5ndWFnZX1gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyYW5zbGF0aW9uTG9hZGVyLmdldChmYWxsYmFja0xhbmd1YWdlLCBwcm92aWRlcikpXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbG9hZGVycy5wdXNoKHRoaXMudHJhbnNsYXRpb25Mb2FkZXIuZ2V0KGZhbGxiYWNrTGFuZ3VhZ2UsIHByb3ZpZGVyKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGxvYWRlcnM7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==