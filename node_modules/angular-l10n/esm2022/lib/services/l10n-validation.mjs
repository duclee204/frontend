import { Injectable, Inject } from '@angular/core';
import { L10N_LOCALE } from '../models/l10n-config';
import * as i0 from "@angular/core";
/**
 * Implement this class-interface to create a validation service.
 */
class L10nValidation {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nValidation, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nValidation }); }
}
export { L10nValidation };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nValidation, decorators: [{
            type: Injectable
        }] });
class L10nDefaultValidation {
    constructor(locale) {
        this.locale = locale;
    }
    parseNumber(value, options, language = this.locale.numberLanguage || this.locale.language) {
        return null;
    }
    parseDate(value, options, language = this.locale.dateLanguage || this.locale.language) {
        return null;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nDefaultValidation, deps: [{ token: L10N_LOCALE }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nDefaultValidation }); }
}
export { L10nDefaultValidation };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nDefaultValidation, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [L10N_LOCALE]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDEwbi12YWxpZGF0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhci1sMTBuL3NyYy9saWIvc2VydmljZXMvbDEwbi12YWxpZGF0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBR25ELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQzs7QUFFcEQ7O0dBRUc7QUFDSCxNQUFvQyxjQUFjOzhHQUFkLGNBQWM7a0hBQWQsY0FBYzs7U0FBZCxjQUFjOzJGQUFkLGNBQWM7a0JBQWpELFVBQVU7O0FBOEJYLE1BQTJCLHFCQUFxQjtJQUU1QyxZQUF5QyxNQUFrQjtRQUFsQixXQUFNLEdBQU4sTUFBTSxDQUFZO0lBQUksQ0FBQztJQUV6RCxXQUFXLENBQ2QsS0FBYSxFQUNiLE9BQWlDLEVBQ2pDLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVE7UUFFN0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLFNBQVMsQ0FDWixLQUFhLEVBQ2IsT0FBbUMsRUFDbkMsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsWUFBWSxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUTtRQUUzRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzhHQWxCc0IscUJBQXFCLGtCQUV4QixXQUFXO2tIQUZSLHFCQUFxQjs7U0FBckIscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBQS9DLFVBQVU7OzBCQUVNLE1BQU07MkJBQUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHsgTDEwbk51bWJlckZvcm1hdE9wdGlvbnMsIEwxMG5EYXRlVGltZUZvcm1hdE9wdGlvbnMsIEwxMG5Mb2NhbGUgfSBmcm9tICcuLi9tb2RlbHMvdHlwZXMnO1xyXG5pbXBvcnQgeyBMMTBOX0xPQ0FMRSB9IGZyb20gJy4uL21vZGVscy9sMTBuLWNvbmZpZyc7XHJcblxyXG4vKipcclxuICogSW1wbGVtZW50IHRoaXMgY2xhc3MtaW50ZXJmYWNlIHRvIGNyZWF0ZSBhIHZhbGlkYXRpb24gc2VydmljZS5cclxuICovXHJcbkBJbmplY3RhYmxlKCkgZXhwb3J0IGFic3RyYWN0IGNsYXNzIEwxMG5WYWxpZGF0aW9uIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqIFRoaXMgbWV0aG9kIG11c3QgY29udGFpbiB0aGUgbG9naWMgdG8gY29udmVydCBhIHN0cmluZyB0byBhIG51bWJlci5cclxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgc3RyaW5nIHRvIGJlIHBhcnNlZFxyXG4gICAgICogQHBhcmFtIG9wdGlvbnMgQSBMMTBuIG9yIEludGwgTnVtYmVyRm9ybWF0T3B0aW9ucyBvYmplY3RcclxuICAgICAqIEBwYXJhbSBsYW5ndWFnZSBUaGUgY3VycmVudCBsYW5ndWFnZVxyXG4gICAgICogQHJldHVybiBUaGUgcGFyc2VkIG51bWJlclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgcGFyc2VOdW1iZXIoXHJcbiAgICAgICAgdmFsdWU6IHN0cmluZyxcclxuICAgICAgICBvcHRpb25zPzogTDEwbk51bWJlckZvcm1hdE9wdGlvbnMsXHJcbiAgICAgICAgbGFuZ3VhZ2U/OiBzdHJpbmdcclxuICAgICk6IG51bWJlciB8IG51bGw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBUaGlzIG1ldGhvZCBtdXN0IGNvbnRhaW4gdGhlIGxvZ2ljIHRvIGNvbnZlcnQgYSBzdHJpbmcgdG8gYSBkYXRlLlxyXG4gICAgICogQHBhcmFtIHZhbHVlIFRoZSBzdHJpbmcgdG8gYmUgcGFyc2VkXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyBBIEwxMG4gb3IgSW50bCBEYXRlVGltZUZvcm1hdE9wdGlvbnMgb2JqZWN0XHJcbiAgICAgKiBAcGFyYW0gbGFuZ3VhZ2UgVGhlIGN1cnJlbnQgbGFuZ3VhZ2VcclxuICAgICAqIEByZXR1cm4gVGhlIHBhcnNlZCBkYXRlXHJcbiAgICAgKi9cclxuICAgIHB1YmxpYyBhYnN0cmFjdCBwYXJzZURhdGUoXHJcbiAgICAgICAgdmFsdWU6IHN0cmluZyxcclxuICAgICAgICBvcHRpb25zPzogTDEwbkRhdGVUaW1lRm9ybWF0T3B0aW9ucyxcclxuICAgICAgICBsYW5ndWFnZT86IHN0cmluZ1xyXG4gICAgKTogRGF0ZSB8IG51bGw7XHJcblxyXG59XHJcblxyXG5ASW5qZWN0YWJsZSgpIGV4cG9ydCBjbGFzcyBMMTBuRGVmYXVsdFZhbGlkYXRpb24ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoTDEwTl9MT0NBTEUpIHByaXZhdGUgbG9jYWxlOiBMMTBuTG9jYWxlKSB7IH1cclxuXHJcbiAgICBwdWJsaWMgcGFyc2VOdW1iZXIoXHJcbiAgICAgICAgdmFsdWU6IHN0cmluZyxcclxuICAgICAgICBvcHRpb25zPzogTDEwbk51bWJlckZvcm1hdE9wdGlvbnMsXHJcbiAgICAgICAgbGFuZ3VhZ2UgPSB0aGlzLmxvY2FsZS5udW1iZXJMYW5ndWFnZSB8fCB0aGlzLmxvY2FsZS5sYW5ndWFnZVxyXG4gICAgKTogbnVtYmVyIHwgbnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHBhcnNlRGF0ZShcclxuICAgICAgICB2YWx1ZTogc3RyaW5nLFxyXG4gICAgICAgIG9wdGlvbnM/OiBMMTBuRGF0ZVRpbWVGb3JtYXRPcHRpb25zLFxyXG4gICAgICAgIGxhbmd1YWdlID0gdGhpcy5sb2NhbGUuZGF0ZUxhbmd1YWdlIHx8IHRoaXMubG9jYWxlLmxhbmd1YWdlXHJcbiAgICApOiBEYXRlIHwgbnVsbCB7XHJcbiAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==