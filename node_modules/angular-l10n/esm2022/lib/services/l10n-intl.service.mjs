import { Injectable, Inject } from '@angular/core';
import { L10N_CONFIG, L10N_LOCALE } from '../models/l10n-config';
import { toDate, toNumber, PARSE_DATE_STYLE, PARSE_TIME_STYLE, parseDigits } from '../models/utils';
import * as i0 from "@angular/core";
import * as i1 from "./l10n-translation.service";
class L10nIntlService {
    constructor(config, locale, translation) {
        this.config = config;
        this.locale = locale;
        this.translation = translation;
    }
    /**
     * Formats a date.
     * @param value A date, a number (milliseconds since UTC epoch) or an ISO 8601 string
     * @param options A L10n or Intl DateTimeFormatOptions object
     * @param language The current language
     * @param timeZone The current time zone
     */
    formatDate(value, options, language = this.locale.dateLanguage || this.locale.language, timeZone = this.locale.timeZone) {
        value = toDate(value);
        let dateTimeFormatOptions = {};
        if (options) {
            if (options) {
                const { dateStyle, timeStyle, ...rest } = options;
                if (dateStyle) {
                    dateTimeFormatOptions = { ...dateTimeFormatOptions, ...PARSE_DATE_STYLE[dateStyle] };
                }
                if (timeStyle) {
                    dateTimeFormatOptions = { ...dateTimeFormatOptions, ...PARSE_TIME_STYLE[timeStyle] };
                }
                dateTimeFormatOptions = { ...dateTimeFormatOptions, ...rest };
            }
        }
        if (timeZone) {
            dateTimeFormatOptions.timeZone = timeZone;
        }
        return new Intl.DateTimeFormat(language, dateTimeFormatOptions).format(value);
    }
    /**
     * Formats a number.
     * @param value A number or a string
     * @param options A L10n or Intl NumberFormatOptions object
     * @param language The current language
     * @param currency The current currency
     * @param convert An optional function to convert the value, with value and locale in the signature.
     * For example:
     * ```
     * const convert = (value: number, locale: L10nLocale) => { return ... };
     * ```
     * @param convertParams Optional parameters for the convert function
     */
    formatNumber(value, options, language = this.locale.numberLanguage || this.locale.language, currency = this.locale.currency, convert, convertParams) {
        if (options && options['style'] === 'unit' && !options['unit'])
            return value;
        value = toNumber(value);
        // Optional conversion.
        if (typeof convert === 'function') {
            value = convert(value, this.locale, Object.values(convertParams || {})); // Destructures params
        }
        let numberFormatOptions = {};
        if (options) {
            const { digits, ...rest } = options;
            if (digits) {
                numberFormatOptions = { ...numberFormatOptions, ...parseDigits(digits) };
            }
            numberFormatOptions = { ...numberFormatOptions, ...rest };
        }
        if (currency)
            numberFormatOptions.currency = currency;
        return new Intl.NumberFormat(language, numberFormatOptions).format(value);
    }
    /**
     * Formats a relative time.
     * @param value A negative (or positive) number
     * @param unit An Intl RelativeTimeFormatUnit value
     * @param options An Intl RelativeTimeFormatOptions object
     * @param language The current language
     */
    formatRelativeTime(value, unit, options, language = this.locale.dateLanguage || this.locale.language) {
        value = toNumber(value);
        return new Intl.RelativeTimeFormat(language, options).format(value, unit);
    }
    /**
     * Gets the plural by a number.
     * The 'value' is passed as a parameter to the translation function.
     * @param value The number to get the plural
     * @param prefix Optional prefix for the key
     * @param options An Intl PluralRulesOptions object
     * @param language The current language
     */
    plural(value, prefix = '', options, language = this.locale.language) {
        value = toNumber(value);
        const rule = new Intl.PluralRules(language, options).select(value);
        const key = prefix ? `${prefix}${this.config.keySeparator}${rule}` : rule;
        return this.translation.translate(key, { value });
    }
    /**
     * Returns translation of language, region, script or currency display names
     * @param code ISO code of language, region, script or currency
     * @param options An Intl DisplayNamesOptions object
     * @param language The current language
     */
    displayNames(code, options, language = this.locale.language) {
        return new Intl.DisplayNames(language, options).of(code) || code;
    }
    getCurrencySymbol(locale = this.locale) {
        const decimal = this.formatNumber(0, { digits: '1.0-0' }, locale.numberLanguage || locale.language);
        const currency = this.formatNumber(0, { digits: '1.0-0', style: 'currency', currencyDisplay: 'symbol' }, locale.numberLanguage || locale.language, locale.currency);
        let symbol = currency.replace(decimal, '');
        symbol = symbol.trim();
        return symbol;
    }
    /**
     * Compares two keys by the value of translation.
     * @param key1 First key to compare
     * @param key1 Second key to compare
     * @param options An Intl CollatorOptions object
     * @param language The current language
     * @return A negative value if the value of translation of key1 comes before the value of translation of key2;
     *         a positive value if key1 comes after key2;
     *         0 if they are considered equal or Intl.Collator is not supported
     */
    compare(key1, key2, options, language = this.locale.language) {
        const value1 = this.translation.translate(key1);
        const value2 = this.translation.translate(key2);
        return new Intl.Collator(language, options).compare(value1, value2);
    }
    /**
     * Returns the representation of a list.
     * @param list An array of keys
     * @param options An Intl ListFormatOptions object
     * @param language The current language
     */
    list(list, options, language = this.locale.language) {
        const values = list.map(key => this.translation.translate(key));
        if (language == null || language === '')
            return values.join(', ');
        return new Intl.ListFormat(language, options).format(values);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nIntlService, deps: [{ token: L10N_CONFIG }, { token: L10N_LOCALE }, { token: i1.L10nTranslationService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nIntlService }); }
}
export { L10nIntlService };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nIntlService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [L10N_CONFIG]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [L10N_LOCALE]
                }] }, { type: i1.L10nTranslationService }]; } });
//# sourceMappingURL=data:application/json;base64,