import { Pipe } from '@angular/core';
import { L10nAsyncPipe } from '../models/l10n-async-pipe';
import * as i0 from "@angular/core";
import * as i1 from "../services/l10n-intl.service";
class L10nNumberPipe {
    constructor(intl) {
        this.intl = intl;
    }
    transform(value, language, options, currency, convert, convertParams) {
        if (value == null || value === '')
            return null;
        return this.intl.formatNumber(value, options, language, currency, convert, convertParams);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nNumberPipe, deps: [{ token: i1.L10nIntlService }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.0.0", ngImport: i0, type: L10nNumberPipe, isStandalone: true, name: "l10nNumber" }); }
}
export { L10nNumberPipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nNumberPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'l10nNumber',
                    pure: true,
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.L10nIntlService }]; } });
class L10nNumberAsyncPipe extends L10nAsyncPipe {
    constructor(intl) {
        super();
        this.intl = intl;
    }
    transform(value, options, convert, convertParams, language, currency) {
        if (value == null || value === '')
            return null;
        return this.intl.formatNumber(value, options, language, currency, convert, convertParams);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nNumberAsyncPipe, deps: [{ token: i1.L10nIntlService }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.0.0", ngImport: i0, type: L10nNumberAsyncPipe, isStandalone: true, name: "l10nNumberAsync", pure: false }); }
}
export { L10nNumberAsyncPipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nNumberAsyncPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'l10nNumberAsync',
                    pure: false,
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.L10nIntlService }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDEwbi1udW1iZXIucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbDEwbi9zcmMvbGliL3BpcGVzL2wxMG4tbnVtYmVyLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFHcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7QUFHMUQsTUFLYSxjQUFjO0lBRXZCLFlBQXNCLElBQXFCO1FBQXJCLFNBQUksR0FBSixJQUFJLENBQWlCO0lBQUksQ0FBQztJQUV6QyxTQUFTLENBQ1osS0FBVSxFQUNWLFFBQWdCLEVBQ2hCLE9BQWlDLEVBQ2pDLFFBQWlCLEVBQ2pCLE9BQW9FLEVBQ3BFLGFBQW1CO1FBRW5CLElBQUksS0FBSyxJQUFJLElBQUksSUFBSSxLQUFLLEtBQUssRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDO1FBRS9DLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxhQUFhLENBQUMsQ0FBQztJQUM5RixDQUFDOzhHQWZRLGNBQWM7NEdBQWQsY0FBYzs7U0FBZCxjQUFjOzJGQUFkLGNBQWM7a0JBTDFCLElBQUk7bUJBQUM7b0JBQ0YsSUFBSSxFQUFFLFlBQVk7b0JBQ2xCLElBQUksRUFBRSxJQUFJO29CQUNWLFVBQVUsRUFBRSxJQUFJO2lCQUNuQjs7QUFvQkQsTUFLYSxtQkFBb0IsU0FBUSxhQUFhO0lBRWxELFlBQXNCLElBQXFCO1FBQ3ZDLEtBQUssRUFBRSxDQUFDO1FBRFUsU0FBSSxHQUFKLElBQUksQ0FBaUI7SUFFM0MsQ0FBQztJQUVNLFNBQVMsQ0FDWixLQUFVLEVBQ1YsT0FBaUMsRUFDakMsT0FBb0UsRUFDcEUsYUFBbUIsRUFDbkIsUUFBaUIsRUFDakIsUUFBaUI7UUFFakIsSUFBSSxLQUFLLElBQUksSUFBSSxJQUFJLEtBQUssS0FBSyxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFL0MsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQzlGLENBQUM7OEdBakJRLG1CQUFtQjs0R0FBbkIsbUJBQW1COztTQUFuQixtQkFBbUI7MkZBQW5CLG1CQUFtQjtrQkFML0IsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsaUJBQWlCO29CQUN2QixJQUFJLEVBQUUsS0FBSztvQkFDWCxVQUFVLEVBQUUsSUFBSTtpQkFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5pbXBvcnQgeyBMMTBuTG9jYWxlLCBMMTBuTnVtYmVyRm9ybWF0T3B0aW9ucyB9IGZyb20gJy4uL21vZGVscy90eXBlcyc7XHJcbmltcG9ydCB7IEwxMG5Bc3luY1BpcGUgfSBmcm9tICcuLi9tb2RlbHMvbDEwbi1hc3luYy1waXBlJztcclxuaW1wb3J0IHsgTDEwbkludGxTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbDEwbi1pbnRsLnNlcnZpY2UnO1xyXG5cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ2wxMG5OdW1iZXInLFxyXG4gICAgcHVyZTogdHJ1ZSxcclxuICAgIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIEwxMG5OdW1iZXJQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGludGw6IEwxMG5JbnRsU2VydmljZSkgeyB9XHJcblxyXG4gICAgcHVibGljIHRyYW5zZm9ybShcclxuICAgICAgICB2YWx1ZTogYW55LFxyXG4gICAgICAgIGxhbmd1YWdlOiBzdHJpbmcsXHJcbiAgICAgICAgb3B0aW9ucz86IEwxMG5OdW1iZXJGb3JtYXRPcHRpb25zLFxyXG4gICAgICAgIGN1cnJlbmN5Pzogc3RyaW5nLFxyXG4gICAgICAgIGNvbnZlcnQ/OiAodmFsdWU6IG51bWJlciwgbG9jYWxlOiBMMTBuTG9jYWxlLCBwYXJhbXM6IGFueSkgPT4gbnVtYmVyLFxyXG4gICAgICAgIGNvbnZlcnRQYXJhbXM/OiBhbnlcclxuICAgICk6IHN0cmluZyB8IG51bGwge1xyXG4gICAgICAgIGlmICh2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSAnJykgcmV0dXJuIG51bGw7XHJcblxyXG4gICAgICAgIHJldHVybiB0aGlzLmludGwuZm9ybWF0TnVtYmVyKHZhbHVlLCBvcHRpb25zLCBsYW5ndWFnZSwgY3VycmVuY3ksIGNvbnZlcnQsIGNvbnZlcnRQYXJhbXMpO1xyXG4gICAgfVxyXG5cclxufVxyXG5cclxuQFBpcGUoe1xyXG4gICAgbmFtZTogJ2wxMG5OdW1iZXJBc3luYycsXHJcbiAgICBwdXJlOiBmYWxzZSxcclxuICAgIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIEwxMG5OdW1iZXJBc3luY1BpcGUgZXh0ZW5kcyBMMTBuQXN5bmNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGludGw6IEwxMG5JbnRsU2VydmljZSkge1xyXG4gICAgICAgIHN1cGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRyYW5zZm9ybShcclxuICAgICAgICB2YWx1ZTogYW55LFxyXG4gICAgICAgIG9wdGlvbnM/OiBMMTBuTnVtYmVyRm9ybWF0T3B0aW9ucyxcclxuICAgICAgICBjb252ZXJ0PzogKHZhbHVlOiBudW1iZXIsIGxvY2FsZTogTDEwbkxvY2FsZSwgcGFyYW1zOiBhbnkpID0+IG51bWJlcixcclxuICAgICAgICBjb252ZXJ0UGFyYW1zPzogYW55LFxyXG4gICAgICAgIGxhbmd1YWdlPzogc3RyaW5nLFxyXG4gICAgICAgIGN1cnJlbmN5Pzogc3RyaW5nXHJcbiAgICApOiBzdHJpbmcgfCBudWxsIHtcclxuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCB8fCB2YWx1ZSA9PT0gJycpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy5pbnRsLmZvcm1hdE51bWJlcih2YWx1ZSwgb3B0aW9ucywgbGFuZ3VhZ2UsIGN1cnJlbmN5LCBjb252ZXJ0LCBjb252ZXJ0UGFyYW1zKTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19