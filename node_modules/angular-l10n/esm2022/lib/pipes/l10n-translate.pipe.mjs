import { Pipe } from '@angular/core';
import { L10nAsyncPipe } from '../models/l10n-async-pipe';
import * as i0 from "@angular/core";
import * as i1 from "../services/l10n-translation.service";
class L10nTranslatePipe {
    constructor(translation) {
        this.translation = translation;
    }
    transform(key, language, params) {
        if (key == null || key === '')
            return null;
        return this.translation.translate(key, params, language);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslatePipe, deps: [{ token: i1.L10nTranslationService }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslatePipe, isStandalone: true, name: "translate" }); }
}
export { L10nTranslatePipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslatePipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'translate',
                    pure: true,
                    standalone: true
                }]
        }], ctorParameters: function () { return [{ type: i1.L10nTranslationService }]; } });
class L10nTranslateAsyncPipe extends L10nAsyncPipe {
    transform(key, params, language) {
        if (key == null || key === '')
            return null;
        return this.translation.translate(key, params, language);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslateAsyncPipe, deps: null, target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslateAsyncPipe, isStandalone: true, name: "translateAsync", pure: false }); }
}
export { L10nTranslateAsyncPipe };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslateAsyncPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'translateAsync',
                    pure: false,
                    standalone: true
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDEwbi10cmFuc2xhdGUucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXItbDEwbi9zcmMvbGliL3BpcGVzL2wxMG4tdHJhbnNsYXRlLnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDJCQUEyQixDQUFDOzs7QUFHMUQsTUFLYSxpQkFBaUI7SUFFMUIsWUFBc0IsV0FBbUM7UUFBbkMsZ0JBQVcsR0FBWCxXQUFXLENBQXdCO0lBQUksQ0FBQztJQUV2RCxTQUFTLENBQUMsR0FBUSxFQUFFLFFBQWdCLEVBQUUsTUFBWTtRQUNyRCxJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksR0FBRyxLQUFLLEVBQUU7WUFBRSxPQUFPLElBQUksQ0FBQztRQUUzQyxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUM7SUFDN0QsQ0FBQzs4R0FSUSxpQkFBaUI7NEdBQWpCLGlCQUFpQjs7U0FBakIsaUJBQWlCOzJGQUFqQixpQkFBaUI7a0JBTDdCLElBQUk7bUJBQUM7b0JBQ0YsSUFBSSxFQUFFLFdBQVc7b0JBQ2pCLElBQUksRUFBRSxJQUFJO29CQUNWLFVBQVUsRUFBRSxJQUFJO2lCQUNuQjs7QUFhRCxNQUthLHNCQUF1QixTQUFRLGFBQWE7SUFFOUMsU0FBUyxDQUFDLEdBQVEsRUFBRSxNQUFZLEVBQUUsUUFBaUI7UUFDdEQsSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLEdBQUcsS0FBSyxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUM7UUFFM0MsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQzdELENBQUM7OEdBTlEsc0JBQXNCOzRHQUF0QixzQkFBc0I7O1NBQXRCLHNCQUFzQjsyRkFBdEIsc0JBQXNCO2tCQUxsQyxJQUFJO21CQUFDO29CQUNGLElBQUksRUFBRSxnQkFBZ0I7b0JBQ3RCLElBQUksRUFBRSxLQUFLO29CQUNYLFVBQVUsRUFBRSxJQUFJO2lCQUNuQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEwxMG5Bc3luY1BpcGUgfSBmcm9tICcuLi9tb2RlbHMvbDEwbi1hc3luYy1waXBlJztcclxuaW1wb3J0IHsgTDEwblRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2wxMG4tdHJhbnNsYXRpb24uc2VydmljZSc7XHJcblxyXG5AUGlwZSh7XHJcbiAgICBuYW1lOiAndHJhbnNsYXRlJyxcclxuICAgIHB1cmU6IHRydWUsXHJcbiAgICBzdGFuZGFsb25lOiB0cnVlXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBMMTBuVHJhbnNsYXRlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCB0cmFuc2xhdGlvbjogTDEwblRyYW5zbGF0aW9uU2VydmljZSkgeyB9XHJcblxyXG4gICAgcHVibGljIHRyYW5zZm9ybShrZXk6IGFueSwgbGFuZ3VhZ2U6IHN0cmluZywgcGFyYW1zPzogYW55KTogc3RyaW5nIHwgbnVsbCB7XHJcbiAgICAgICAgaWYgKGtleSA9PSBudWxsIHx8IGtleSA9PT0gJycpIHJldHVybiBudWxsO1xyXG5cclxuICAgICAgICByZXR1cm4gdGhpcy50cmFuc2xhdGlvbi50cmFuc2xhdGUoa2V5LCBwYXJhbXMsIGxhbmd1YWdlKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbkBQaXBlKHtcclxuICAgIG5hbWU6ICd0cmFuc2xhdGVBc3luYycsXHJcbiAgICBwdXJlOiBmYWxzZSxcclxuICAgIHN0YW5kYWxvbmU6IHRydWVcclxufSlcclxuZXhwb3J0IGNsYXNzIEwxMG5UcmFuc2xhdGVBc3luY1BpcGUgZXh0ZW5kcyBMMTBuQXN5bmNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XHJcblxyXG4gICAgcHVibGljIHRyYW5zZm9ybShrZXk6IGFueSwgcGFyYW1zPzogYW55LCBsYW5ndWFnZT86IHN0cmluZyk6IHN0cmluZyB8IG51bGwge1xyXG4gICAgICAgIGlmIChrZXkgPT0gbnVsbCB8fCBrZXkgPT09ICcnKSByZXR1cm4gbnVsbDtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMudHJhbnNsYXRpb24udHJhbnNsYXRlKGtleSwgcGFyYW1zLCBsYW5ndWFnZSk7XHJcbiAgICB9XHJcblxyXG59XHJcbiJdfQ==