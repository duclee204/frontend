import { NgModule, APP_INITIALIZER } from '@angular/core';
import { L10nTranslatePipe, L10nTranslateAsyncPipe } from '../pipes/l10n-translate.pipe';
import { L10nTranslateDirective } from '../directives/l10n-translate.directive';
import { L10N_CONFIG, L10N_LOCALE } from '../models/l10n-config';
import { L10nTranslationService } from '../services/l10n-translation.service';
import { L10nCache } from '../services/l10n-cache';
import { L10nStorage, L10nDefaultStorage } from '../services/l10n-storage';
import { L10nLocaleResolver, L10nDefaultLocaleResolver } from '../services/l10n-locale-resolver';
import { L10nTranslationFallback, L10nDefaultTranslationFallback } from '../services/l10n-translation-fallback';
import { L10nTranslationLoader, L10nDefaultTranslationLoader } from '../services/l10n-translation-loader';
import { L10nTranslationHandler, L10nDefaultTranslationHandler } from '../services/l10n-translation-handler';
import { L10nMissingTranslationHandler, L10nDefaultMissingTranslationHandler } from '../services/l10n-missing-translation-handler';
import { L10nLoader, L10nDefaultLoader } from '../services/l10n-loader';
import { initL10n } from '../functions/initL10n';
import * as i0 from "@angular/core";
class L10nTranslationModule {
    static forRoot(config, token = {}) {
        return {
            ngModule: L10nTranslationModule,
            providers: [
                L10nTranslationService,
                L10nCache,
                { provide: L10N_CONFIG, useValue: config },
                { provide: L10N_LOCALE, useValue: { language: '', units: {} } },
                { provide: L10nStorage, useClass: token.storage || L10nDefaultStorage },
                { provide: L10nLocaleResolver, useClass: token.localeResolver || L10nDefaultLocaleResolver },
                { provide: L10nTranslationFallback, useClass: token.translationFallback || L10nDefaultTranslationFallback },
                { provide: L10nTranslationLoader, useClass: token.translationLoader || L10nDefaultTranslationLoader },
                { provide: L10nTranslationHandler, useClass: token.translationHandler || L10nDefaultTranslationHandler },
                {
                    provide: L10nMissingTranslationHandler,
                    useClass: token.missingTranslationHandler || L10nDefaultMissingTranslationHandler
                },
                { provide: L10nLoader, useClass: token.loader || L10nDefaultLoader },
                {
                    provide: APP_INITIALIZER,
                    useFactory: initL10n,
                    deps: [L10nLoader],
                    multi: true
                }
            ]
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslationModule, imports: [L10nTranslatePipe,
            L10nTranslateAsyncPipe,
            L10nTranslateDirective], exports: [L10nTranslatePipe,
            L10nTranslateAsyncPipe,
            L10nTranslateDirective] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslationModule }); }
}
export { L10nTranslationModule };
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.0.0", ngImport: i0, type: L10nTranslationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        L10nTranslatePipe,
                        L10nTranslateAsyncPipe,
                        L10nTranslateDirective
                    ],
                    exports: [
                        L10nTranslatePipe,
                        L10nTranslateAsyncPipe,
                        L10nTranslateDirective
                    ]
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibDEwbi10cmFuc2xhdGlvbi5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyLWwxMG4vc3JjL2xpYi9tb2R1bGVzL2wxMG4tdHJhbnNsYXRpb24ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQXVCLGVBQWUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUvRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSw4QkFBOEIsQ0FBQztBQUN6RixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx3Q0FBd0MsQ0FBQztBQUNoRixPQUFPLEVBQW9DLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNuRyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDbkQsT0FBTyxFQUFFLFdBQVcsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzNFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSx5QkFBeUIsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ2pHLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSw4QkFBOEIsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ2hILE9BQU8sRUFBRSxxQkFBcUIsRUFBRSw0QkFBNEIsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBQzFHLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSw2QkFBNkIsRUFBRSxNQUFNLHNDQUFzQyxDQUFDO0FBQzdHLE9BQU8sRUFBRSw2QkFBNkIsRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLDhDQUE4QyxDQUFDO0FBQ25JLE9BQU8sRUFBRSxVQUFVLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RSxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7O0FBRWpELE1BWWEscUJBQXFCO0lBRXZCLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBa0IsRUFBRSxRQUE4QixFQUFFO1FBQ3RFLE9BQU87WUFDSCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFNBQVMsRUFBRTtnQkFDUCxzQkFBc0I7Z0JBQ3RCLFNBQVM7Z0JBQ1QsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxNQUFNLEVBQUU7Z0JBQzFDLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsRUFBRTtnQkFDL0QsRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsT0FBTyxJQUFJLGtCQUFrQixFQUFFO2dCQUN2RSxFQUFFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLGNBQWMsSUFBSSx5QkFBeUIsRUFBRTtnQkFDNUYsRUFBRSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxtQkFBbUIsSUFBSSw4QkFBOEIsRUFBRTtnQkFDM0csRUFBRSxPQUFPLEVBQUUscUJBQXFCLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxpQkFBaUIsSUFBSSw0QkFBNEIsRUFBRTtnQkFDckcsRUFBRSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxrQkFBa0IsSUFBSSw2QkFBNkIsRUFBRTtnQkFDeEc7b0JBQ0ksT0FBTyxFQUFFLDZCQUE2QjtvQkFDdEMsUUFBUSxFQUFFLEtBQUssQ0FBQyx5QkFBeUIsSUFBSSxvQ0FBb0M7aUJBQ3BGO2dCQUNELEVBQUUsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsS0FBSyxDQUFDLE1BQU0sSUFBSSxpQkFBaUIsRUFBRTtnQkFDcEU7b0JBQ0ksT0FBTyxFQUFFLGVBQWU7b0JBQ3hCLFVBQVUsRUFBRSxRQUFRO29CQUNwQixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUM7b0JBQ2xCLEtBQUssRUFBRSxJQUFJO2lCQUNkO2FBQ0o7U0FDSixDQUFDO0lBQ04sQ0FBQzs4R0E1QlEscUJBQXFCOytHQUFyQixxQkFBcUIsWUFWMUIsaUJBQWlCO1lBQ2pCLHNCQUFzQjtZQUN0QixzQkFBc0IsYUFHdEIsaUJBQWlCO1lBQ2pCLHNCQUFzQjtZQUN0QixzQkFBc0I7K0dBR2pCLHFCQUFxQjs7U0FBckIscUJBQXFCOzJGQUFyQixxQkFBcUI7a0JBWmpDLFFBQVE7bUJBQUM7b0JBQ04sT0FBTyxFQUFFO3dCQUNMLGlCQUFpQjt3QkFDakIsc0JBQXNCO3dCQUN0QixzQkFBc0I7cUJBQ3pCO29CQUNELE9BQU8sRUFBRTt3QkFDTCxpQkFBaUI7d0JBQ2pCLHNCQUFzQjt3QkFDdEIsc0JBQXNCO3FCQUN6QjtpQkFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBBUFBfSU5JVElBTElaRVIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmltcG9ydCB7IEwxMG5UcmFuc2xhdGVQaXBlLCBMMTBuVHJhbnNsYXRlQXN5bmNQaXBlIH0gZnJvbSAnLi4vcGlwZXMvbDEwbi10cmFuc2xhdGUucGlwZSc7XHJcbmltcG9ydCB7IEwxMG5UcmFuc2xhdGVEaXJlY3RpdmUgfSBmcm9tICcuLi9kaXJlY3RpdmVzL2wxMG4tdHJhbnNsYXRlLmRpcmVjdGl2ZSc7XHJcbmltcG9ydCB7IEwxMG5Db25maWcsIEwxMG5UcmFuc2xhdGlvblRva2VuLCBMMTBOX0NPTkZJRywgTDEwTl9MT0NBTEUgfSBmcm9tICcuLi9tb2RlbHMvbDEwbi1jb25maWcnO1xyXG5pbXBvcnQgeyBMMTBuVHJhbnNsYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbDEwbi10cmFuc2xhdGlvbi5zZXJ2aWNlJztcclxuaW1wb3J0IHsgTDEwbkNhY2hlIH0gZnJvbSAnLi4vc2VydmljZXMvbDEwbi1jYWNoZSc7XHJcbmltcG9ydCB7IEwxMG5TdG9yYWdlLCBMMTBuRGVmYXVsdFN0b3JhZ2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9sMTBuLXN0b3JhZ2UnO1xyXG5pbXBvcnQgeyBMMTBuTG9jYWxlUmVzb2x2ZXIsIEwxMG5EZWZhdWx0TG9jYWxlUmVzb2x2ZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9sMTBuLWxvY2FsZS1yZXNvbHZlcic7XHJcbmltcG9ydCB7IEwxMG5UcmFuc2xhdGlvbkZhbGxiYWNrLCBMMTBuRGVmYXVsdFRyYW5zbGF0aW9uRmFsbGJhY2sgfSBmcm9tICcuLi9zZXJ2aWNlcy9sMTBuLXRyYW5zbGF0aW9uLWZhbGxiYWNrJztcclxuaW1wb3J0IHsgTDEwblRyYW5zbGF0aW9uTG9hZGVyLCBMMTBuRGVmYXVsdFRyYW5zbGF0aW9uTG9hZGVyIH0gZnJvbSAnLi4vc2VydmljZXMvbDEwbi10cmFuc2xhdGlvbi1sb2FkZXInO1xyXG5pbXBvcnQgeyBMMTBuVHJhbnNsYXRpb25IYW5kbGVyLCBMMTBuRGVmYXVsdFRyYW5zbGF0aW9uSGFuZGxlciB9IGZyb20gJy4uL3NlcnZpY2VzL2wxMG4tdHJhbnNsYXRpb24taGFuZGxlcic7XHJcbmltcG9ydCB7IEwxMG5NaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyLCBMMTBuRGVmYXVsdE1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIgfSBmcm9tICcuLi9zZXJ2aWNlcy9sMTBuLW1pc3NpbmctdHJhbnNsYXRpb24taGFuZGxlcic7XHJcbmltcG9ydCB7IEwxMG5Mb2FkZXIsIEwxMG5EZWZhdWx0TG9hZGVyIH0gZnJvbSAnLi4vc2VydmljZXMvbDEwbi1sb2FkZXInO1xyXG5pbXBvcnQgeyBpbml0TDEwbiB9IGZyb20gJy4uL2Z1bmN0aW9ucy9pbml0TDEwbic7XHJcblxyXG5ATmdNb2R1bGUoe1xyXG4gICAgaW1wb3J0czogW1xyXG4gICAgICAgIEwxMG5UcmFuc2xhdGVQaXBlLFxyXG4gICAgICAgIEwxMG5UcmFuc2xhdGVBc3luY1BpcGUsXHJcbiAgICAgICAgTDEwblRyYW5zbGF0ZURpcmVjdGl2ZVxyXG4gICAgXSxcclxuICAgIGV4cG9ydHM6IFtcclxuICAgICAgICBMMTBuVHJhbnNsYXRlUGlwZSxcclxuICAgICAgICBMMTBuVHJhbnNsYXRlQXN5bmNQaXBlLFxyXG4gICAgICAgIEwxMG5UcmFuc2xhdGVEaXJlY3RpdmVcclxuICAgIF1cclxufSlcclxuZXhwb3J0IGNsYXNzIEwxMG5UcmFuc2xhdGlvbk1vZHVsZSB7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBmb3JSb290KGNvbmZpZzogTDEwbkNvbmZpZywgdG9rZW46IEwxMG5UcmFuc2xhdGlvblRva2VuID0ge30pOiBNb2R1bGVXaXRoUHJvdmlkZXJzPEwxMG5UcmFuc2xhdGlvbk1vZHVsZT4ge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIG5nTW9kdWxlOiBMMTBuVHJhbnNsYXRpb25Nb2R1bGUsXHJcbiAgICAgICAgICAgIHByb3ZpZGVyczogW1xyXG4gICAgICAgICAgICAgICAgTDEwblRyYW5zbGF0aW9uU2VydmljZSxcclxuICAgICAgICAgICAgICAgIEwxMG5DYWNoZSxcclxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogTDEwTl9DT05GSUcsIHVzZVZhbHVlOiBjb25maWcgfSxcclxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogTDEwTl9MT0NBTEUsIHVzZVZhbHVlOiB7IGxhbmd1YWdlOiAnJywgdW5pdHM6IHt9IH0gfSxcclxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogTDEwblN0b3JhZ2UsIHVzZUNsYXNzOiB0b2tlbi5zdG9yYWdlIHx8IEwxMG5EZWZhdWx0U3RvcmFnZSB9LFxyXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBMMTBuTG9jYWxlUmVzb2x2ZXIsIHVzZUNsYXNzOiB0b2tlbi5sb2NhbGVSZXNvbHZlciB8fCBMMTBuRGVmYXVsdExvY2FsZVJlc29sdmVyIH0sXHJcbiAgICAgICAgICAgICAgICB7IHByb3ZpZGU6IEwxMG5UcmFuc2xhdGlvbkZhbGxiYWNrLCB1c2VDbGFzczogdG9rZW4udHJhbnNsYXRpb25GYWxsYmFjayB8fCBMMTBuRGVmYXVsdFRyYW5zbGF0aW9uRmFsbGJhY2sgfSxcclxuICAgICAgICAgICAgICAgIHsgcHJvdmlkZTogTDEwblRyYW5zbGF0aW9uTG9hZGVyLCB1c2VDbGFzczogdG9rZW4udHJhbnNsYXRpb25Mb2FkZXIgfHwgTDEwbkRlZmF1bHRUcmFuc2xhdGlvbkxvYWRlciB9LFxyXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBMMTBuVHJhbnNsYXRpb25IYW5kbGVyLCB1c2VDbGFzczogdG9rZW4udHJhbnNsYXRpb25IYW5kbGVyIHx8IEwxMG5EZWZhdWx0VHJhbnNsYXRpb25IYW5kbGVyIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogTDEwbk1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXNlQ2xhc3M6IHRva2VuLm1pc3NpbmdUcmFuc2xhdGlvbkhhbmRsZXIgfHwgTDEwbkRlZmF1bHRNaXNzaW5nVHJhbnNsYXRpb25IYW5kbGVyXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeyBwcm92aWRlOiBMMTBuTG9hZGVyLCB1c2VDbGFzczogdG9rZW4ubG9hZGVyIHx8IEwxMG5EZWZhdWx0TG9hZGVyIH0sXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJvdmlkZTogQVBQX0lOSVRJQUxJWkVSLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZUZhY3Rvcnk6IGluaXRMMTBuLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlcHM6IFtMMTBuTG9hZGVyXSxcclxuICAgICAgICAgICAgICAgICAgICBtdWx0aTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbn1cclxuIl19