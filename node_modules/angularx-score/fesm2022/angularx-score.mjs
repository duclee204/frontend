import * as i0 from '@angular/core';
import { Injectable, inject, Component, Inject, NgModule, Directive, Input, Renderer2, ElementRef, Optional, HostListener, EventEmitter, Output, HostBinding } from '@angular/core';
import * as i1$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from 'primeng/button';
import { ButtonModule } from 'primeng/button';
import { BreadcrumbModule } from 'primeng/breadcrumb';
import * as i5 from 'primeng/panel';
import { PanelModule } from 'primeng/panel';
import * as i6$1 from 'primeng/table';
import { TableModule } from 'primeng/table';
import * as i6 from '@angular/forms';
import { Validators, FormControl, FormGroup, FormArray, NG_VALIDATORS, COMPOSITION_BUFFER_MODE, NG_VALUE_ACCESSOR, FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as CryptoJS from 'crypto-js';
import { HttpParams, HttpClient, HttpClientModule } from '@angular/common/http';
import * as moment from 'moment';
import { BehaviorSubject, throwError } from 'rxjs';
import * as i3$1 from 'primeng/api';
import { ConfirmationService, MessageService } from 'primeng/api';
import * as i2 from 'angular-l10n';
import { L10N_LOCALE, L10nTranslateAsyncPipe } from 'angular-l10n';
import * as i1 from '@angular/router';
import { DialogModule } from 'primeng/dialog';
import * as i1$2 from 'primeng/dynamicdialog';
import { DynamicDialogModule, DialogService } from 'primeng/dynamicdialog';
import { OverlayPanelModule } from 'primeng/overlaypanel';
import { ConfirmDialogModule } from 'primeng/confirmdialog';
import * as i4$1 from 'primeng/toast';
import { ToastModule } from 'primeng/toast';
import * as i3 from 'primeng/dropdown';
import { DropdownModule } from 'primeng/dropdown';
import * as i2$1 from 'primeng/tree';
import { TreeModule } from 'primeng/tree';
import * as i5$1 from 'primeng/tooltip';
import * as i7 from 'primeng/inputtext';
import { InputTextModule } from 'primeng/inputtext';
import { saveAs } from 'file-saver';
import { tap, catchError } from 'rxjs/operators';
import * as i6$2 from 'primeng/radiobutton';
import { RadioButtonModule } from 'primeng/radiobutton';
import * as i1$3 from '@angular/platform-browser';
import * as i3$2 from 'primeng/inputswitch';
import { InputSwitchModule } from 'primeng/inputswitch';
import * as i3$3 from 'primeng/multiselect';
import { MultiSelectModule } from 'primeng/multiselect';
import * as i4$2 from 'primeng/calendar';
import { CalendarModule } from 'primeng/calendar';
import { ProgressSpinnerModule } from 'primeng/progressspinner';
import { TabViewModule } from 'primeng/tabview';
import { InputNumberModule } from 'primeng/inputnumber';
import { CheckboxModule } from 'primeng/checkbox';
import { SplitButtonModule } from 'primeng/splitbutton';
import { ScrollPanelModule } from 'primeng/scrollpanel';

class CryptoService {
    static { this.encrText = 'rNZSYvtgfyUPx75Okf6ArEx2SiktAW9j'; }
    static encr(data) {
        try {
            return CryptoJS.AES.encrypt(JSON.stringify(data), this.encrText).toString();
        }
        catch (e) {
            console.log(e);
            return '';
        }
    }
    static decr(data) {
        try {
            const bytes = CryptoJS.AES.decrypt(data, this.encrText);
            if (bytes) {
                return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));
            }
            return data;
        }
        catch (e) {
            console.log(e);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CryptoService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CryptoService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CryptoService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });

class StorageData {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: StorageData, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: StorageData, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: StorageData, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
class HrStorage {
    static { this.expriteIn = '_expriteIn'; }
    static { this.instanceName = '_HrStorage'; }
    static { this.storage = localStorage; }
    /**
     * init
     */
    static init() {
    }
    /**
     * isExprited
     */
    static isExprited() {
        return false;
    }
    /**
     * clear
     */
    static clear() {
        this.storage.removeItem(this.instanceName);
    }
    /**
     * storedData
     */
    static storedData() {
        const storedData = this.storage.getItem(this.instanceName);
        if (CommonUtils.isNullOrEmpty(storedData)) {
            return {};
        }
        return CryptoService.decr(storedData);
    }
    /**
     * get
     */
    static get(key) {
        if (this.isExprited()) {
            return null;
        }
        const storedData = this.storedData();
        if (storedData == null) {
            return null;
        }
        return storedData[key];
    }
    /**
     * get
     */
    static set(key, val) {
        let storedData = this.storedData();
        if (storedData == null) {
            storedData = new StorageData();
        }
        storedData[key] = val;
        this.storage.setItem(this.instanceName, CryptoService.encr(storedData));
    }
    /**
     * getUserToken
     */
    static getUserToken() {
        return this.get('userToken');
    }
    /**
     * setUserToken
     */
    static setUserToken(userToken) {
        return this.set('userToken', userToken);
    }
    /**
     * getNavState
     */
    static getNavState() {
        const navState = this.get('navState');
        return navState === null ? false : navState;
    }
    /**
     * setNavState
     */
    static setNavState(navState) {
        this.set('navState', navState);
    }
    /**
     * getNavFlipState
     */
    static getNavFlipState() {
        const navFlipState = this.get('navFlipState');
        return navFlipState === null ? false : navFlipState;
    }
    /**
     * setNavFlipState
     */
    static setNavFlipState(navFlipState) {
        this.set('navFlipState', navFlipState);
    }
    /**
     * getSearchState
     */
    static getSearchState() {
        return this.get('searchState');
    }
    /**
     * setNavFlipState
     */
    static setSearchState(searchState) {
        this.set('searchState', searchState);
    }
    /**
     * getSelectedLang
     */
    static getSelectedLang() {
        const listLang = this.getListLang();
        if (listLang == null) {
            return null;
        }
        for (const item of listLang) {
            if (item.isDefault === 1) {
                return item;
            }
        }
        return listLang[0];
    }
    /**
    * setSelectedLang
    */
    static setSelectedLang(object) {
        const listLang = this.getListLang();
        if (listLang == null) {
            return;
        }
        for (const item of listLang) {
            if (object.code === item.code) {
                item.isDefault = 1;
            }
            else {
                item.isDefault = null;
            }
        }
        this.setListLang(listLang);
    }
    /**
     * getListLang
     */
    static getListLang() {
        return this.get('listLang');
    }
    /**
     * setListLang
     */
    static setListLang(listLang) {
        this.set('listLang', listLang);
    }
    /**
     * getCurrentMarket
     */
    static getSelectedMarket() {
        const listMarket = this.getListMarket();
        if (listMarket == null) {
            return null;
        }
        for (const item of listMarket) {
            if (item.isDefault && item.isDefault === 1) {
                return item;
            }
        }
        return listMarket[0];
    }
    /**
     * setSelectedMarket
     */
    static setSelectedMarket(object) {
        const listMarket = this.getListMarket();
        if (listMarket == null) {
            return;
        }
        for (const item of listMarket) {
            if (object.marketCompanyId === item.marketCompanyId) {
                item.isDefault = 1;
            }
            else {
                item.isDefault = null;
            }
        }
        this.setListMarket(listMarket);
    }
    /**
     * getListMarket
     */
    static getListMarket() {
        return this.get('listMarket');
    }
    /**
     * setListMarket
     */
    static setListMarket(listMarket) {
        this.set('listMarket', listMarket);
    }
    /**
     * getCurrentUrl
     */
    static getCurrentUrl() {
        return this.get('currentUrl');
    }
    /**
     * setCurrentUrl
     */
    static setCurrentUrl(currentUrl) {
        this.set('currentUrl', currentUrl);
    }
    /**
     * getIntro
     */
    static getIntro() {
        return this.get('intro');
    }
    /**
     * setIntro
     */
    static setIntro(intro) {
        this.set('intro', intro);
    }
    /**
     * introIsDone
     * @ param screenCode
     */
    static introIsDone(screenCode) {
        const intro = this.getIntro();
        if (intro == null || intro.length === 0) {
            return false;
        }
        return intro.indexOf(screenCode) > -1;
    }
    /**
     * introIsDone
     * @ param screenCode
     */
    static introSetDone(screenCode) {
        let intro = this.getIntro();
        if (intro == null || intro.length === 0) {
            intro = [];
        }
        if (intro.indexOf(screenCode) > -1) {
            return;
        }
        intro.push(screenCode);
        this.setIntro(intro);
    }
    /**
     * getTheme
     */
    static getTheme() {
        return this.get('theme');
    }
    /**
     * setTheme
     */
    static setTheme(theme) {
        this.set('theme', theme);
    }
    /**
     * setSessionId
     */
    static setSessionId(id) {
        this.set('sessionId', id);
    }
    /**
    * getSessionId
    */
    static getSessionId() {
        return this.get('sessionId');
    }
}

const APP_CONSTANTS = {};
const CONFIG_DEFAULT = {
    dateFormat: 'dd/MM/yyyy'
};
const CONFIG = {
    API_PATH: {
        home: '/v1/home',
        categoryType: '/v1/category-type',
        category: '/v1/category',
        organization: '/v1/organization',
        employee: '/v1/employee',
        educationType: '/v1/education-type',
        trainingCourse: '/v1/training-course',
        course: '/v1/course',
        classroom: '/v1/classroom',
        classroomSchedule: '/v1/classroom-schedule',
        employeeRequest: '/v1/employee-request',
        employeeClassroom: '/v1/employee-classroom',
        employeeClassroomAttend: '/v1/employee-classroom-attend',
        certificateApproval: '/v1/certificate-approval',
        certificateBook: '/v1/certificate-book',
        role: '/v1/role',
        resource: '/v1/resource',
        user: '/v1/user',
        auth: '/v1/auth',
        student: '/v1/student',
        subject: '/v1/subject',
        schoolYear: '/v1/school-year',
        classSubject: '/v1/class-subject',
        studentClassSubject: '/v1/student-class-subject',
    }
};
const PERMISSION_CODE = {
    // action tac dong
    'action.view': 'VIEW',
    'action.insert': 'INSERT',
    'action.update': 'UPDATE',
    'action.delete': 'DELETE',
    'action.import': 'IMPORT',
    'action.export': 'EXPORT',
    'action.approve': 'APPROVE',
    'action.decide': 'DECIDE',
    'action.unDecide': 'UN_DECIDE',
    'action.unApproveAll': 'UN_APPROVE_ALL',
    'action.approveAll': 'APPROVE_ALL',
    'action.removeEmp': 'REMOVE_EMP',
    'action.addEmp': 'ADD_EMP',
    'action.unApprove': 'UN_APPROVE',
    'action.unLock': 'UN_LOCK',
    'action.lock': 'LOCK',
    'action.calculate': 'CALCULATE',
    'action.viewHistory': 'VIEW_HISTORY',
    'action.enable': 'ENABLE',
    'action.disable': 'DISABLE',
    'action.issueAgain': 'ISSUE_AGAIN',
    'action.issueChange': 'ISSUE_CHANGE',
    'action.quickImport': 'QUICK_IMPORT',
    'action.transfer': 'TRANSFER',
    'action.manage': 'MANAGE',
    'action.viewAll': 'VIEW_ALL',
    'action.payrollCalculate': 'PAYROLL_CALCULATE',
    'action.payrollDestroy': 'DESTROY_PAYROLL',
    'action.syncTax': 'SYNC_TAX',
    'action.syncPayroll': 'SYNC_PAYROLL',
    'action.addAction': 'ADD_ACTION',
    'action.grantRole': 'GRANT_ROLE',
    'action.grantMenu': 'GRANT_MENU',
    'action.grantPermission': 'GRANT_PERMISSION',
    'action.updateStatus': 'UPDATE_STATUS',
    'action.resetPassword': 'RESET_PASSWORD',
    'action.lockUser': 'LOCK_USER',
    'action.brag': 'BRAG' // Dồn túi & làm phách
    ,
    'action.dataSynthesis': 'DATA_SYNTHESIS' // Tổng hợp dữ liệu
    ,
    'action.mngStudent': 'MNG_STUDENT' // Tổng hợp dữ liệu
    ,
    'resource.organization': 'ORGANIZATION',
    'resource.employee': 'EMPLOYEE',
    'resource.trainingCourse': 'TRAINING_COURSE',
    'resource.educationType': 'EDUCATION_TYPE',
    'resource.category': 'CATEGORY',
    'resource.employeeRequest': 'EMPLOYEE_REQUEST',
    'resource.employeeClassroom': 'EMPLOYEE_CLASSROOM',
    'resource.employeeClassroomAttend': 'EMPLOYEE_CLASSROOM_ATTEND',
    'resource.course': 'COURSE',
    'resource.classroom': 'CLASSROOM',
    'resource.classroomSchedule': 'CLASSROOM_SCHEDULE',
    'resource.gradingAssignments': 'GRADING_ASSIGNMENTS' // Chấm bài thu hoạch
    ,
    'resource.certificateApproval': 'CERTIFICATE_APPROVAL' // Xét duyệt cấp chứng chỉ
    ,
    'resource.certificateBook': 'CERTIFICATE_BOOK' // Sổ cấp chứng chỉ
    ,
    'resource.role': 'ROLE',
    'resource.user': 'USER',
    'resource.student': 'STUDENT',
    'resource.subject': 'SUBJECT',
    'resource.schoolYear': 'SCHOOL_YEAR',
    'resource.classSubject': 'CLASS_SUBJECT',
    'resource.roomType': 'ROOM_TYPE',
    'resource.room': 'ROOM',
    'resource.contract': 'CONTRACT',
    'resource.waterElectric': 'WATER_ELECTRIC',
    'resource.waterElectricBill': 'WATER_ELECTRIC_BILL'
};
var RESOURCE;
(function (RESOURCE) {
    RESOURCE["HOME"] = "HOME";
    RESOURCE["OVERALL_STATISTICS"] = "OVERALL_STATISTICS";
    RESOURCE["SYS_PROPERTY"] = "SYS_PROPERTY";
    RESOURCE["SETTING"] = "SETTING";
    RESOURCE["CATEGORY_TYPE"] = "CATEGORY_TYPE";
    RESOURCE["CATEGORY"] = "CATEGORY";
    // Tổ chức - bộ máy, biên chế
    RESOURCE["MNG_ORGANIZATION"] = "MNG_ORGANIZATION";
    RESOURCE["ORGANIZATION"] = "ORGANIZATION";
    RESOURCE["EMPLOYEE"] = "EMPLOYEE";
    RESOURCE["EDUCATION_TYPE"] = "EDUCATION_TYPE";
    RESOURCE["TRAINING_COURSE"] = "TRAINING_COURSE";
    RESOURCE["COURSE"] = "COURSE";
    RESOURCE["CLASSROOM"] = "CLASSROOM";
    RESOURCE["ROLE"] = "ROLE";
    RESOURCE["USER"] = "USER";
    RESOURCE["AUTH"] = "AUTH";
    RESOURCE["STUDENT"] = "STUDENT";
    RESOURCE["SUBJECT"] = "SUBJECT";
    RESOURCE["SCHOOL_YEAR"] = "SCHOOL_YEAR";
    RESOURCE["CLASS_SUBJECT"] = "CLASS_SUBJECT";
    RESOURCE["STUDENT_CLASS_SUBJECT"] = "STUDENT_CLASS_SUBJECT";
    RESOURCE["ROOM_TYPE"] = "ROOM_TYPE";
    RESOURCE["ROOM"] = "ROOM";
    RESOURCE["CONTRACT"] = "CONTRACT";
    RESOURCE["WATER_ELECTRIC"] = "WATER_ELECTRIC";
    RESOURCE["WATER_ELECTRIC_BILL"] = "WATER_ELECTRIC_BILL";
})(RESOURCE || (RESOURCE = {}));
var INPUT_TYPE;
(function (INPUT_TYPE) {
    INPUT_TYPE["TEXT"] = "text";
    INPUT_TYPE["NUMBER"] = "number";
    INPUT_TYPE["TEXT_AREA"] = "text-area";
    INPUT_TYPE["CURRENCY"] = "currency";
    INPUT_TYPE["DATE"] = "date";
    INPUT_TYPE["URL"] = "url";
    INPUT_TYPE["PASSWORD"] = "password";
})(INPUT_TYPE || (INPUT_TYPE = {}));
var ACTION_FORM;
(function (ACTION_FORM) {
    ACTION_FORM["SEARCH"] = "SEARCH";
    ACTION_FORM["INSERT"] = "INSERT";
    ACTION_FORM["UPDATE"] = "UPDATE";
    ACTION_FORM["IMPORT"] = "IMPORT";
    ACTION_FORM["VIEW"] = "VIEW";
    ACTION_FORM["DELETE"] = "DELETE";
    ACTION_FORM["CONFIG"] = "CONFIG";
    ACTION_FORM["UPDATE_STATUS"] = "UPDATE_STATUS";
    ACTION_FORM["SYS_CAT_TYPE_INSERT"] = "SYS_CAT_TYPE_INSERT";
})(ACTION_FORM || (ACTION_FORM = {}));
var SEARCH_OPERATION;
(function (SEARCH_OPERATION) {
    SEARCH_OPERATION["IN"] = "in";
    SEARCH_OPERATION["GREATER_THAN"] = "gt";
    SEARCH_OPERATION["LESS_THAN"] = "lt";
    SEARCH_OPERATION["GREATER_THAN_EQUAL"] = "gte";
    SEARCH_OPERATION["LESS_THAN_EQUAL"] = "lte";
    SEARCH_OPERATION["NOT_EQUAL"] = "neq";
    SEARCH_OPERATION["EQUAL"] = "eq";
    SEARCH_OPERATION["MATCH"] = "ma";
    SEARCH_OPERATION["MATCH_END"] = "mae";
})(SEARCH_OPERATION || (SEARCH_OPERATION = {}));
const GENDER_OPTIONS = [
    { label: "Nam", value: 1 },
    { label: "Nữ", value: 0 },
];
const OBJ_TYPE_OPTIONS = [
    { label: "Cán bộ", value: "OFFICERS" },
    { label: "Học viên", value: "STUDENT" }
];
const STATUS_DEFENCE_SECURITY = [
    { label: "Chưa học", value: 0 },
    { label: "Đã học", value: 1 },
    { label: "Chưa đủ điều kiện", value: 2 },
    { label: "Đã đăng ký học", value: 3 },
];
var CLASSROOM_STATUS_ENUM;
(function (CLASSROOM_STATUS_ENUM) {
    CLASSROOM_STATUS_ENUM["TAO_MOI"] = "TAO_MOI";
    CLASSROOM_STATUS_ENUM["DANG_HOC"] = "DANG_HOC";
    CLASSROOM_STATUS_ENUM["DA_THAM_QUAN"] = "DA_THAM_QUAN";
    CLASSROOM_STATUS_ENUM["DA_THI"] = "DA_THI";
    CLASSROOM_STATUS_ENUM["DA_KET_THUC"] = "DA_KET_THUC";
})(CLASSROOM_STATUS_ENUM || (CLASSROOM_STATUS_ENUM = {}));
const CLASSROOM_STATUS = [
    { label: "Tạo mới", value: CLASSROOM_STATUS_ENUM.TAO_MOI },
    { label: "Đang học", value: CLASSROOM_STATUS_ENUM.DANG_HOC },
    { label: "Đã đi tham quan", value: CLASSROOM_STATUS_ENUM.DA_THAM_QUAN },
    { label: "Đã thi", value: CLASSROOM_STATUS_ENUM.DA_THI },
    { label: "Đã kết thúc", value: CLASSROOM_STATUS_ENUM.DA_KET_THUC },
];
var CLASSROOM_SCHEDULE_TYPE_ENUM;
(function (CLASSROOM_SCHEDULE_TYPE_ENUM) {
    CLASSROOM_SCHEDULE_TYPE_ENUM["LY_THUYET"] = "LY_THUYET";
    CLASSROOM_SCHEDULE_TYPE_ENUM["THAM_QUAN"] = "THAM_QUAN";
    CLASSROOM_SCHEDULE_TYPE_ENUM["THI"] = "THI";
})(CLASSROOM_SCHEDULE_TYPE_ENUM || (CLASSROOM_SCHEDULE_TYPE_ENUM = {}));
const CLASSROOM_SCHEDULE_TYPE = [
    { label: "Lý thuyết", value: CLASSROOM_SCHEDULE_TYPE_ENUM.LY_THUYET },
    { label: "Tham quan", value: CLASSROOM_SCHEDULE_TYPE_ENUM.THAM_QUAN },
    { label: "Thi", value: CLASSROOM_SCHEDULE_TYPE_ENUM.THI },
];

class ValidationService {
    /**
     * validate required with no space
     */
    static required(control) {
        if (control.value === null || control.value === '') {
            return { required: true };
        }
        else if (('' + control.value).trim() === '') {
            return { required: true };
        }
        else {
            return null;
        }
    }
    /**
     * validate required with no space
     */
    static noWhiteSpace(control) {
        if (control.value.indexOf(' ') >= 0) {
            return { cannotContainSpace: true };
        }
        return null;
    }
    static maxLength(length) {
        return (c) => {
            if (c.value) {
                if ((c.value + '').replace(/\n/g, '\r\n').length > length) {
                    return { 'maxlength': { 'requiredLength': length } };
                }
            }
            return null;
        };
    }
    static passwordValidator(control) {
        if (!control.value) {
            return;
        }
        // {6,100}           - Assert password is between 6 and 100 characters
        // (?=.*[0-9])       - Assert a string has at least one number
        // (?!.*\s)          - Spaces are not allowed
        return (control.value.match(/^(?=.*\d)(?=.*[a-zA-Z!@#$%^&*])(?!.*\s).{6,100}$/)) ? '' : { invalidPassword: true };
    }
    /**
     * validate onlyLetterNumber
     */
    static onlyLetterNumber(control) {
        if (!control.value) {
            return;
        }
        return (control.value.match(/^[0-9a-zA-Z]+$/)) ? '' : { onlyLetterNumber: true };
    }
    /**
     * validate onlyLetterNumberSp
     */
    static onlyLetterNumberSp(control) {
        if (!control.value) {
            return;
        }
        return (control.value.match(/^[0-9a-zA-Z\ ]+$/)) ? '' : { onlyLetterNumber: true };
    }
    /**
     * validate database tableColumnName
     */
    static dbTableColumnName(control) {
        if (!control.value) {
            return;
        }
        return (control.value.match(/^[0-9a-zA-Z_]+$/)) ? '' : { dbTableColumnName: true };
    }
    /**
     * validate personalIdNumber
     */
    static personalIdNumber(control) {
        if (!control.value) {
            return;
        }
        return (control.value.match(/^[0-9a-zA-Z]{8,15}$/)) ? '' : { personalIdNumber: true };
    }
    /**
     * validate phone
     */
    static phone(control) {
        if (!control.value) {
            return;
        }
        return (control.value.match(/^([\+])?(\d([.\s])?){1,15}$/)) ? '' : { phone: true };
    }
    /**
     * validate mobileNumber
     */
    static mobileNumber(control) {
        if (!control.value) {
            return;
        }
        return (control.value.match(/^([+][0-9]{1,3}([ .-])?)?([(][0-9]{1,6}[)])?([0-9 .-]{1,32})(([A-Za-z :]{1,11})?[0-9]{1,4}?)$/))
            ? '' : { mobileNumber: true };
    }
    /**
     * validate integer
     */
    static integer(control) {
        if (!control.value) {
            return;
        }
        return (control.value.toString().trim().match(/^[\-\+]?\d+$/)) ? '' : { integer: true };
    }
    /**
     * validate positiveInteger
     */
    static positiveInteger(control) {
        if (!control.value) {
            return;
        }
        return (control.value.toString().trim().match(/^\d+$/)) ? '' : { positiveInteger: true };
    }
    /**
     * validate number
     */
    static number(control) {
        if (!control.value) {
            return;
        }
        return (control.value.toString().trim().match(/^[\-\+]?(([0-9]+)([\.]([0-9]+))?|([\.]([0-9]+))?)$/))
            ? '' : { number: true };
    }
    /**
     * validate positiveNumber
     */
    static positiveNumber(control) {
        if (!control.value) {
            return;
        }
        return (control.value.toString().trim().match(/^(([0-9]+)([\.]([0-9]+))?|([\.]([0-9]+))?)$/))
            ? '' : { positiveNumber: true };
    }
    /**
   * validate beforeCurrentDate
   */
    static beforeCurrentDate(control) {
        if (!control.value) {
            return;
        }
        const x = new Date().getTime();
        return (control.value < x)
            ? '' : { beforeCurrentDate: true };
    }
    static afterCurrentDate(control) {
        if (!control.value) {
            return;
        }
        const x = new Date().getTime();
        return (control.value >= x || x - control.value < 99999999)
            ? '' : { afterCurrentDate: true };
    }
    /**
     * Validate IP
     * @param control : any
     */
    static isIp(control) {
        if (!control.value) {
            return;
        }
        const str = '^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.'
            + '){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$';
        const regExp = new RegExp(str);
        if (!regExp.test(control.value)) {
            return { isIp: true };
        }
        return '';
    }
    /**
   * Validate URL
   * @param control : any
   */
    static isUrl(control) {
        if (!control.value) {
            return;
        }
        const str = '(https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|' +
            'www\.[a-zA-Z0-9][a-zA-Z0-9-]+[a-zA-Z0-9]\.[^\s]{2,}|' +
            'https?:\/\/(?:www\.|(?!www))[a-zA-Z0-9]\.[^\s]{2,}|www\.[a-zA-Z0-9]\.[^\s]{2,})';
        const regExp = new RegExp(str);
        if (!regExp.test(control.value)) {
            return { isUrl: true };
        }
        return '';
    }
    /** Validate email format */
    static emailFormat(control) {
        if (!control.value) {
            return;
        }
        // tslint:disable-next-line: max-line-length
        return (control.value.toString().trim().match(/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?$/i))
            ? '' : { invalidEmail: true };
    }
    /**
     * Validate date not affter date
     * @param targetKey: any
     * @param toMatchKey: any
     */
    static notAffter(targetKey, toMatchKey, labelMatchCode) {
        return (group) => {
            const target = group.controls[targetKey];
            const toMatch = group.controls[toMatchKey];
            if (target.hasError('dateNotAffter')) {
                target.setErrors(null);
                target.markAsUntouched();
            }
            if (target.value && toMatch.value) {
                const isCheck = target.value <= toMatch.value;
                // set equal value error on dirty controls
                if (!isCheck && target.valid && toMatch.valid) {
                    target.setErrors({ dateNotAffter: { dateNotAffter: labelMatchCode } });
                    target.markAsTouched();
                }
            }
            return null;
        };
    }
    /**
    * Validate date not before date
    * @param targetKey: any
    * @param toMatchKey: any
    */
    static notBefore(targetKey, toMatchKey, labelMatchCode) {
        return (group) => {
            const target = group.controls[targetKey];
            const toMatch = group.controls[toMatchKey];
            if (target.hasError('dateNotBefore')) {
                target.setErrors(null);
                target.markAsUntouched();
            }
            if (target.value && toMatch.value) {
                const isCheck = target.value >= toMatch.value;
                // set equal value error on dirty controls
                if (!isCheck && target.valid && toMatch.valid) {
                    target.setErrors({ dateNotBefore: { dateNotBefore: labelMatchCode } });
                    target.markAsTouched();
                }
            }
            return null;
        };
    }
    /**
     * Validate date not affter number
     * @param targetKey: any
     * @param toMatchKey: any
     */
    static notAffterNumber(targetKey, toMatchKey, labelMatchCode) {
        return (group) => {
            const target = group.controls[targetKey];
            const toMatch = group.controls[toMatchKey];
            // neu mot trong hai truong null thi chuyen sang require
            if (!target || !toMatch) {
                return null;
            }
            // dieu kien kiem tra
            if (target.hasError('dateNotAffter')) {
                target.setErrors(null);
                target.markAsUntouched();
            }
            const targetValue = parseFloat(target.value);
            const toMatchValue = parseFloat(toMatch.value);
            if (targetValue && toMatchValue) {
                const isCheck = targetValue <= toMatchValue;
                // set equal value error on dirty controls
                if (!isCheck && target.valid && toMatch.valid) {
                    target.setErrors({ dateNotAffter: { dateNotAffter: labelMatchCode } });
                    target.markAsTouched();
                }
            }
            return null;
        };
    }
    /**
     * Validate date in range 6 Month
     * @param targetKey: any
     * @param toMatchKey: any
     */
    static isRangeOf6Month(targetKey, toMatchKey, labelMatchCode) {
        return (group) => {
            const target = group.controls[targetKey];
            const toMatch = group.controls[toMatchKey];
            // kiem tra null
            if (target.hasError('isRangeOf6Month')) {
                target.setErrors(null);
                target.markAsUntouched();
            }
            let temp = new Date(target.value);
            temp.setMonth(temp.getMonth() + 6);
            // kiem tra  gia tri
            if (target.value && toMatch.value) {
                const isCheck = temp >= new Date(toMatch.value);
                // set equal value error on dirty controls
                if (!isCheck) {
                    target.setErrors({ isRangeOf6Month: { dateNotAffter: labelMatchCode } });
                    target.markAsTouched();
                }
            }
            return null;
        };
    }
    /**
     * Validate date not before a specify date
     * @param targetKey: any
     * @param specifyDate: any
     */
    static beforeSpecifyDate(targetKey, specifyDate, labelMatchCode) {
        return (group) => {
            const target = group.controls[targetKey];
            // Neu mot trong hai truong null
            if (!target || !specifyDate) {
                return null;
            }
            // Dieu kien kiem tra
            if (target.hasError('dateNotBefore')) {
                target.setErrors(null);
                target.markAsUntouched();
            }
            const targetValue = parseFloat(target.value);
            const toMatchValue = parseFloat(specifyDate);
            if (targetValue || targetValue === 0 && toMatchValue) {
                const isCheck = targetValue >= toMatchValue;
                // Set equal value error on dirty controls
                if (!isCheck && target.valid) {
                    target.setErrors({ dateNotBefore: { dateNotBefore: labelMatchCode } });
                    target.markAsTouched();
                }
            }
            return null;
        };
    }
    /**
     * Validate date not after a specify date
     * @param targetKey: any
     * @param specifyDate: any
     */
    static afterSpecifyDate(targetKey, specifyDate, labelMatchCode) {
        return (group) => {
            const target = group.controls[targetKey];
            // Neu mot trong hai truong null
            if (!target || !specifyDate) {
                return null;
            }
            // Dieu kien kiem tra
            if (target.hasError('dateNotAffter')) {
                target.setErrors(null);
                target.markAsUntouched();
            }
            const targetValue = parseFloat(target.value);
            const toMatchValue = parseFloat(specifyDate);
            if (targetValue || targetValue === 0 && toMatchValue) {
                const isCheck = targetValue <= toMatchValue;
                // Set equal value error on dirty controls
                if (!isCheck && target.valid) {
                    target.setErrors({ dateNotAffter: { dateNotAffter: labelMatchCode } });
                    target.markAsTouched();
                }
            }
            return null;
        };
    }
    /**
     * Validate date not before number
     * @param targetKey: any
     * @param toMatchKey: any
     */
    static notBeforeNumber(targetKey, toMatchKey, labelMatchCode) {
        return (group) => {
            const target = group.controls[targetKey];
            const toMatch = group.controls[toMatchKey];
            // neu mot trong hai truong null thi chuyen sang require
            if (!target || !toMatch) {
                return null;
            }
            // dieu kien kiem tra
            if (target.hasError('dateNotBefore')) {
                target.setErrors(null);
                target.markAsUntouched();
            }
            const targetValue = parseFloat(target.value);
            const toMatchValue = parseFloat(toMatch.value);
            if (targetValue || targetValue === 0 && toMatchValue) {
                const isCheck = targetValue >= toMatchValue;
                // set equal value error on dirty controls
                if (!isCheck && target.valid && toMatch.valid) {
                    target.setErrors({ dateNotBefore: { dateNotBefore: labelMatchCode } });
                    target.markAsTouched();
                }
            }
            return null;
        };
    }
    static getValidatorArr(oldArr, prop) {
        const validators = new Array();
        if (oldArr && oldArr.length > 0 && (prop === null || prop === undefined)) {
            return oldArr;
        }
        if (prop === null || prop === undefined || prop.isHide === true) {
            return validators;
        }
        if (prop.isRequire) {
            validators.push(ValidationService.required);
        }
        if (prop.isEmail) {
            validators.push(Validators.email);
        }
        if (prop.isNumber) {
            validators.push(ValidationService.number);
        }
        if (prop.isUrl) {
            validators.push(ValidationService.isUrl);
        }
        if (prop.isIp) {
            validators.push(ValidationService.isIp);
        }
        if (prop.minLength) {
            validators.push(Validators.minLength(prop.minLength));
        }
        if (prop.maxLength) {
            validators.push(ValidationService.maxLength(prop.maxLength));
        }
        if (prop.numberMin) {
            validators.push(Validators.min(prop.numberMin));
        }
        if (prop.numberMax) {
            validators.push(Validators.max(prop.numberMax));
        }
        if (prop.password) {
            validators.push(ValidationService.passwordValidator);
        }
        if (prop.phone) {
            validators.push(ValidationService.phone);
        }
        if (prop.mobileNumber) {
            validators.push(ValidationService.mobileNumber);
        }
        if (prop.personalIdNumber) {
            validators.push(ValidationService.personalIdNumber);
        }
        if (prop.beforeCurrentDate) {
            validators.push(ValidationService.beforeCurrentDate);
        }
        if (prop.numberType) {
            switch (prop.numberType) {
                case 'isNumber':
                    validators.push(ValidationService.number);
                    break;
                case 'positiveNumber':
                    validators.push(ValidationService.positiveNumber);
                    break;
                case 'integer':
                    validators.push(ValidationService.integer);
                    break;
                case 'positiveInteger':
                    validators.push(ValidationService.positiveInteger);
                    break;
                case 'positiveRealNumber':
                    validators.push(ValidationService.positiveRealNumber);
                    break;
            }
        }
        if (prop.emailFormat) {
            validators.push(ValidationService.emailFormat);
        }
        return validators;
    }
    /**
       * Validate 'Đơn vị, Chức danh công việc không được phép trùng'
       * @param targetKey: any
       * @param toMatchKey: any
       */
    static duplicateArray(controlKeys, target, messageKey) {
        return (array) => {
            // target.setErrors({duplicateArray: {duplicateName: messageKey}});
            // target.markAsTouched();
            const map = {};
            for (const group of array.controls) {
                const controlTaget = group.get(target);
                let count = 0;
                const values = [];
                for (const key of controlKeys) {
                    const control = group.get(key);
                    if (control.value !== null && control.value !== '') {
                        values.push(control.value);
                        count++;
                    }
                }
                let k = '/' + values.join('/') + '/';
                k = k.toLowerCase();
                if (controlKeys.length === count) {
                    if (map.hasOwnProperty(k)) {
                        controlTaget.setErrors({ duplicateArray: { duplicateArray: messageKey } });
                        controlTaget.markAsTouched();
                    }
                    else {
                        map[k] = true;
                        // fix bug khi xoa row dau khi bi duplicate
                        if (controlTaget.hasError('duplicateArray')) {
                            controlTaget.setErrors(null);
                            controlTaget.markAsUntouched();
                        }
                    }
                }
            }
            return null;
        };
    }
    // Hàm xử lý validate bắt buộc nhập các trường còn lại nếu có 1 trường trong danh sách được nhập
    static requiredIfHaveOne(control) {
        let isRequire = false;
        const group = control.parent;
        Object.keys(group.controls).forEach(key => {
            const controlEl = group.get(key);
            if (controlEl.propertyName !== control.propertyName) {
                if (controlEl.listValidation) {
                    for (const f of controlEl.listValidation) {
                        const fn = f;
                        if (fn === ValidationService.requiredIfHaveOne && controlEl.value) {
                            isRequire = true;
                        }
                    }
                }
            }
        });
        if (isRequire && !control.value) {
            return { requiredIfHaveOne: true };
        }
        return null;
    }
    /**
     * Xu ly neu nhu co gia tri tai truong hien tai thi validate bat buoc nhap tai truong duoc set
     * @param controlKeys Ten truong bat buoc nhap
     */
    static ifHaveOneIsRequired(controlKeys) {
        return (c) => {
            const group = c.parent;
            const controlRequired = group.get(controlKeys);
            if (c.value !== null && c.value.toString().length > 0) { //  vi co th value = []
                if (controlRequired.value === null || controlRequired.value === '') {
                    controlRequired.setErrors({ ifHaveOneIsRequired: true });
                    controlRequired.markAsTouched();
                }
                else {
                    if (controlRequired.hasError('ifHaveOneIsRequired')) {
                        controlRequired.setErrors(null);
                        controlRequired.markAsUntouched();
                    }
                }
            }
            else {
                if (controlRequired.hasError('ifHaveOneIsRequired')) {
                    controlRequired.setErrors(null);
                    controlRequired.markAsUntouched();
                }
            }
        };
    }
    /**
     * Xu ly bat buoc nhap truong hien tai khi truong truyen vao co gia tri
     * @param controlKeys Ten truong nhap gia tri
     */
    static isRequiredIfHaveOne(controlKeys) {
        return (c) => {
            const group = c.parent;
            const controlHaveOne = group.get(controlKeys);
            if (c.value === null || c.value === '') {
                if (controlHaveOne && (controlHaveOne.value === null || controlHaveOne.value.toString().length === 0)) { //  vi co th value = []
                    return null;
                }
                else {
                    return { ifHaveOneIsRequired: true };
                }
            }
            else {
                return null;
            }
        };
    }
    /**
     * validate array form requird
     * Neu ko nhap truong nao thi ko validate, khi nhap 1 trong cac truong  thi bat buoc nhap tat ca cac truong cau hinh
     */
    static requiredControlInGroup(controlKeys, controlKeysIgnore) {
        return (group) => {
            let checkExitsValue = false;
            Object.keys(group.controls).forEach(key => {
                if (controlKeysIgnore && controlKeysIgnore.includes(key)) {
                    return true;
                }
                const controlEl = group.get(key);
                if (!(controlEl.value === null || controlEl.value === '' || !controlEl.value)) {
                    checkExitsValue = true;
                }
                return false;
            });
            controlKeys.forEach(key => {
                const formControl = group.controls[key];
                if (checkExitsValue) {
                    if (formControl.value === null || formControl.value === '') {
                        formControl.setErrors({ requiredControlInGroup: true });
                        // formControl.markAsTouched();
                    }
                    else if (('' + formControl.value).trim() === '') {
                        formControl.setErrors({ requiredControlInGroup: true });
                        // formControl.markAsTouched();
                    }
                    else {
                        if (formControl.hasError('requiredControlInGroup')) {
                            formControl.setErrors(null);
                            formControl.markAsUntouched();
                        }
                    }
                }
                else {
                    if (formControl.hasError('requiredControlInGroup')) {
                        formControl.setErrors(null);
                        formControl.markAsUntouched();
                    }
                }
            });
            return null;
        };
    }
    /**
    * Xu ly validate bat buoc nhap 1 truong trong danh sach cau hinh
    */
    static justRequiredOneField(controlKeys) {
        return (group) => {
            let checkExitsValue = false;
            controlKeys.forEach(key => {
                const controlEl = group.get(key);
                if (controlEl.value !== null && controlEl.value !== '') {
                    checkExitsValue = true;
                }
            });
            controlKeys.forEach(key => {
                const formControl = group.get(key);
                if (checkExitsValue) {
                    if (formControl.hasError('justRequiredOneField')) {
                        formControl.setErrors(null);
                        formControl.markAsUntouched();
                    }
                }
                else {
                    if (!formControl.hasError('justRequiredOneField')) {
                        formControl.setErrors({ justRequiredOneField: true });
                        // formControl.markAsTouched();
                    }
                }
            });
            return null;
        };
    }
    static positiveRealNumber(control) {
        if (!control.value) {
            return;
        }
        return (control.value.toString().trim().match(/^(([0-9]+)([\.]([5]{1}))?)$/))
            ? '' : { positiveRealNumber: true };
    }
    static isRequiredIfHaveOneValue(controlKeys) {
        return (c) => {
            const group = c.parent;
            const controlHaveOne = group.get(controlKeys);
            if (c.value === null || c.value == "" || c.value.toString().length === 0) {
                if (controlHaveOne && (controlHaveOne.value === null || controlHaveOne.value === 0)) { //  vi co th value = []
                    return null;
                }
                else {
                    return { ifHaveOneIsRequired: true };
                }
            }
            else {
                return null;
            }
        };
    }
    static isRequiredReason(sabbaticalLeaveId, addDay, subDay) {
        return (c) => {
            const group = c.parent;
            const controlSabbaticalLeaveId = group.get(sabbaticalLeaveId);
            const controlAddAnuualDayLeave = group.get(addDay);
            const controlSubAnuualDayLeave = group.get(subDay);
            if (controlSabbaticalLeaveId.value) {
                if (c.value === null || c.value === "") {
                    return null;
                }
                else {
                    return { ifHaveOneIsRequired: true };
                }
            }
            else {
                if (controlSabbaticalLeaveId.value == null) {
                    if (controlAddAnuualDayLeave.value != null || controlSubAnuualDayLeave.value != null) {
                        if (c.value === null || c.value === "") {
                            return null;
                        }
                    }
                    else {
                        return { ifHaveOneIsRequired: true };
                    }
                }
            }
        };
    }
    static isHaveSabbaticalLeaveId(controlKeys) {
        return (c) => {
            const group = c.parent;
            const controlHaveOne = group.get(controlKeys);
            if (controlHaveOne.value) {
                if (c.value === null || c.value === "") {
                    return { ifHaveOneIsRequired: true };
                }
            }
            else {
                return null;
            }
        };
    }
    /**
     * Validate number not greater than number (selector)
     * @param targetKey: any
     * @param toMatchKey: any
     */
    static notGreater(targetKey, toMatchKey, labelMatchCode) {
        return (group) => {
            const target = group.controls[targetKey];
            const toMatch = group.controls[toMatchKey];
            if (target.hasError('numberNotGreater')) {
                target.setErrors(null);
                target.markAsUntouched();
            }
            if (target.value && toMatch.value) {
                const isCheck = Number(target.value) <= Number(toMatch.value);
                // set equal value error on dirty controls
                if (!isCheck && target.valid && toMatch.valid) {
                    target.setErrors({ numberNotGreater: { numberNotGreater: labelMatchCode } });
                    target.markAsTouched();
                }
            }
            return null;
        };
    }
    /**
    * validate beforeCurrentMonth
    */
    static beforeCurrentMonth(control) {
        if (!control.value) {
            return;
        }
        const x = new Date().getMonth() + 1;
        const y = new Date().getFullYear();
        var date = new Date(control.value);
        var month = date.getMonth() + 1;
        var year = date.getFullYear();
        var check = false;
        if (year < y) {
            check = true;
        }
        else if (year == y && month <= x) {
            check = true;
        }
        return (check == true)
            ? '' : { beforeCurrentMonth: true };
    }
    static afterCurrentMonth(control) {
        if (!control.value) {
            return;
        }
        const x = new Date().getMonth() + 1;
        return (control.value >= x || x - control.value < 99999999)
            ? '' : { afterCurrentMonth: true };
    }
    /**
     * validate 9 or 12
     */
    static lenght9or12(control) {
        if (!control.value) {
            return;
        }
        return (control.value.toString().trim().length == 9 || control.value.toString().trim().length == 12) ? '' : { lenght9or12: true };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ValidationService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ValidationService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ValidationService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });

class BaseControl extends FormControl {
    constructor() {
        super(...arguments);
        this.propertyName = '';
        this.actionForm = '';
        this.resource = '';
        this.css = '';
        this.isHide = false;
        this.isRequire = false;
        this.dateFormat = CommonUtils.getDateFormat();
        this.isMultiLanguage = false;
    }
    configBaseControl(propertyConfig, oldValidator, type) {
        if (type) {
            this.type = type;
        }
        // Xu ly set mac dinh required neu khong co cau hinh trong database
        if (oldValidator) {
            if (typeof oldValidator === 'function') {
                const val = oldValidator;
                if (val === ValidationService.required) {
                    this.isRequire = true;
                }
            }
            else {
                for (const index in oldValidator) {
                    const val = oldValidator[index];
                    if (val === ValidationService.required) {
                        this.isRequire = true;
                    }
                }
            }
        }
        if (propertyConfig) {
            this.propertyConfig = propertyConfig;
            this.isHide = this.propertyConfig.isHide;
            this.isRequire = this.propertyConfig.isRequire;
            this.isMultiLanguage = this.propertyConfig.isTranslation;
            this.css = this.propertyConfig.css;
            this.dateFormat = this.propertyConfig.dateFormat ? this.propertyConfig.dateFormat : this.dateFormat;
            this.setType();
        }
        this.listValidation = ValidationService.getValidatorArr(oldValidator, this.propertyConfig);
    }
    getPropertyConfig() {
        return this.propertyConfig;
    }
    getListValidation() {
        return this.listValidation;
    }
    setType() {
        if (this.propertyConfig.moneyFormat) {
            this.type = INPUT_TYPE.CURRENCY;
            return;
        }
        if (this.propertyConfig.numberFormat) {
            this.type = INPUT_TYPE.NUMBER;
            return;
        }
        if (this.propertyConfig.dateFormat) {
            this.type = INPUT_TYPE.DATE;
            return;
        }
        // if (this.propertyConfig.maxLength >= 200) {
        //   this.type = INPUT_TYPE.TEXT_AREA;
        //   return;
        // }
        this.type = INPUT_TYPE.TEXT;
    }
}

class HelperService {
    constructor() {
        this.ORGANIZATION = new BehaviorSubject([]);
        this.APP_TOAST_MESSAGE = new BehaviorSubject([]);
        this.APP_CONFIRM_DELETE = new BehaviorSubject(null);
        this.APP_SHOW_HIDE_LEFT_MENU = new BehaviorSubject([]);
        this.APP_SHOW_PROCESSING = new BehaviorSubject([]);
        this.EMPLOYEE_URL = new BehaviorSubject([]);
        this.INSERT_WORK_PROCESS = new BehaviorSubject([]);
        this.CHECK_WORK_PROCESS = new BehaviorSubject([]);
        this.LANGUAGE_CHANGE = new BehaviorSubject(null);
        this.PROCESS_LOADER = new BehaviorSubject(null);
        this.MESSAGE_TOASTER = new BehaviorSubject(null);
        this.CONFIRM = new BehaviorSubject(null);
        this.LOAD_USER = new BehaviorSubject(null);
    }
    /**
     * afterSaveOrganization
     * param data
     */
    afterSaveOrganization(data) {
        this.ORGANIZATION.next(data);
    }
    /**
     * createMessage
     * param data
     */
    processReturnMessage(data) {
        this.APP_TOAST_MESSAGE.next(data);
    }
    /**
     * processing
     * param data
     */
    isProcessing(isProcessing) {
        this.APP_SHOW_PROCESSING.next(isProcessing);
    }
    /**
     * confirmDelete
     * param data
     */
    confirmDelete(data) {
        this.APP_CONFIRM_DELETE.next(data);
        // this.APP_CONFIRM_DELETE.pipe(data);
    }
    refreshConfirmDelete() {
        this.APP_CONFIRM_DELETE = new BehaviorSubject(null);
    }
    /**
     * Load lại cây đơn vị
     */
    reloadTreeOrganization(data) {
        this.ORGANIZATION.next({ type: 'RELOAD_TREE', data: data });
    }
    reloadGridOrganization(data) {
        this.ORGANIZATION.next({ type: 'RELOAD_GRID', data: data });
    }
    resolveUrlEmployee(data) {
        this.EMPLOYEE_URL.next(data);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: HelperService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: HelperService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: HelperService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });

class CommonUtils {
    constructor(helperService) {
        this.helperService = helperService;
    }
    static isNullOrEmpty(str) {
        return !str || (str + '').trim() === '';
    }
    /**
   * Hàm lấy DateFormat hiện tại theo MarketCompany. Ko có trả về mặc định
   */
    static getDateFormat() {
        const nationProperty = HrStorage.getSelectedMarket();
        if (nationProperty === null || nationProperty === undefined || !nationProperty.dateFormat) {
            return CONFIG_DEFAULT.dateFormat;
        }
        return nationProperty.dateFormat;
    }
    /**
   * createFormNew use Dynamic Input
   */
    static createFormNew(resource, actionForm, formData, options, propConfigs, validate) {
        const formGroup = new FormGroup({});
        for (const property in options) {
            const config = propConfigs && propConfigs.length > 0
                ? propConfigs.filter(item => item.propertyCode === property && item.actionForm === actionForm)[0] : null;
            const control = new BaseControl();
            control.propertyName = property;
            control.actionForm = actionForm;
            control.resource = resource;
            control.configBaseControl(config, options[property][1]);
            control.setValue(options[property][0]);
            if (formData.hasOwnProperty(property)) {
                control.setValue(formData[property]);
            }
            control.setValidators(control.getListValidation());
            formGroup.addControl(property, control);
            formGroup.get(property)?.updateValueAndValidity();
        }
        if (validate) {
            formGroup.setValidators(validate);
        }
        return formGroup;
    }
    /**
   * convert To FormData mutilpart request post
   */
    static convertFormFile(dataPost) {
        const filteredData = CommonUtils.convertData(dataPost);
        const formData = CommonUtils.objectToFormData(filteredData, '', []);
        return formData;
    }
    /**
     * objectToFormData
     */
    static objectToFormData(obj, rootName, ignoreList) {
        const formData = new FormData();
        function appendFormData(data, root) {
            if (!ignore(root)) {
                root = root || '';
                if (data instanceof File) {
                    if (data.type !== 'x_stored_file') {
                        formData.append(root, data);
                    }
                }
                else if (Array.isArray(data)) {
                    let index = 0;
                    for (let i = 0; i < data.length; i++) {
                        if (data[i] instanceof File) {
                            if (data[i].type !== 'x_stored_file') {
                                appendFormData(data[i], root + '[' + index + ']');
                                index++;
                            }
                        }
                        else {
                            appendFormData(data[i], root + '[' + i + ']');
                        }
                    }
                }
                else if (data && typeof data === 'object') {
                    for (const key in data) {
                        if (data.hasOwnProperty(key)) {
                            if (root === '') {
                                appendFormData(data[key], key);
                            }
                            else {
                                appendFormData(data[key], root + '.' + key);
                            }
                        }
                    }
                }
                else {
                    if (data !== null && typeof data !== 'undefined') {
                        formData.append(root, data);
                    }
                }
            }
        }
        function ignore(root) {
            return Array.isArray(ignoreList) && ignoreList.some(function (x) { return x === root; });
        }
        appendFormData(obj, rootName);
        return formData;
    }
    /**
   * convertData
   */
    static convertData(data) {
        if (typeof data === typeof {}) {
            return CommonUtils.convertDataObject(data);
        }
        else if (typeof data === typeof []) {
            return CommonUtils.convertDataArray(data);
        }
        else if (typeof data === typeof true) {
            return CommonUtils.convertBoolean(data);
        }
        return data;
    }
    /**
     * convertDataObject
     * param data
     */
    static convertDataObject(data) {
        if (data) {
            for (const key in data) {
                if (data[key] instanceof File) {
                }
                else {
                    data[key] = CommonUtils.convertData(data[key]);
                }
            }
        }
        return data;
    }
    static convertDataArray(data) {
        if (data && data.length > 0) {
            for (const i in data) {
                data[i] = CommonUtils.convertData(data[i]);
            }
        }
        return data;
    }
    static convertBoolean(value) {
        return value ? 1 : 0;
    }
    /**
   * copyProperties
   * param dest
   * param orgs
   */
    static buildParams(obj) {
        return Object.entries(obj || {})
            .reduce((params, [key, value]) => {
            if (value === null) {
                return params.set(key, String(''));
            }
            else if (typeof value === typeof {}) {
                return params.set(key, JSON.stringify(value));
            }
            else {
                return params.set(key, String(value));
            }
        }, new HttpParams({ encoder: new CustomEncoder() }));
    }
    static buildParamsArray(obj) {
        return Object.entries(obj || {})
            .reduce((params, [key, value]) => {
            if (value === null) {
                return params.set(key, String(''));
            }
            else if (typeof value === typeof {}) {
                if (Array.isArray(value)) {
                    const temp = value;
                    if (temp && temp.length > 0) {
                        return temp.reduce((res, element, index) => {
                            return res.set(`${key}[${index}]`, JSON.stringify(element));
                        }, params);
                    }
                    return params;
                }
                else {
                    return params.set(key, JSON.stringify(value));
                }
            }
            else {
                return params.set(key, String(value));
            }
        }, new HttpParams({ encoder: new CustomEncoder() }));
    }
    /**
   * validateForm
   * @param form: FormGroup
   */
    static isValidForm(form) {
        setTimeout(() => {
            this.markAsTouched(form);
        }, 200);
        if (form.invalid) {
            setTimeout(() => {
                CommonUtils.scrollToSmoothly('.errorMessageDiv.show');
            }, 200);
        }
        return !form.invalid;
    }
    static offset(el) {
        const rect = el.getBoundingClientRect(), scrollLeft = window.pageXOffset || document.documentElement.scrollLeft, scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        return { top: rect.top + scrollTop, left: rect.left + scrollLeft };
    }
    static scrollToSmoothly(querySelectorAll, time) {
        const elements = document.querySelectorAll(querySelectorAll);
        if (!elements) {
            return;
        }
        const first = elements[0];
        if (!first) {
            return;
        }
        const position = CommonUtils.offset(first);
        if (isNaN(position.top)) {
            console.warn('Position must be a number');
            return;
        }
        if (position.top < 0) {
            console.warn('Position can not be negative');
            return;
        }
        let top = position.top - 100;
        const currentPos = window.scrollY || window.screenTop;
        if (currentPos > position.top) {
            top = position.top + 100;
        }
        try {
            window.scrollTo({ left: 0, top: top, behavior: 'smooth' });
        }
        catch (e) {
            window.scrollTo(0, top);
        }
    }
    static markAsTouched(form) {
        if (form instanceof FormGroup) {
            CommonUtils.isValidFormGroup(form);
        }
        else if (form instanceof FormArray) {
            CommonUtils.isValidFormArray(form);
        }
        else if (form instanceof FormControl) {
            form.markAsTouched({ onlySelf: true });
            if (form.invalid) {
                console.warn('Validate error field:', form);
            }
        }
    }
    static isValidFormArray(form) {
        if (form['isHidden'] === true) { // neu form đang bị ẩn thì không cần validate
            return;
        }
        for (const i in form.controls) {
            CommonUtils.markAsTouched(form.controls[i]); // neu form đang bị ẩn thì không cần validate
        }
    }
    static isValidFormGroup(form) {
        if (form['isHidden'] === true) {
            return;
        }
        Object.keys(form.controls).forEach(key => {
            CommonUtils.markAsTouched(form.get(key));
        });
    }
    /**
   * convertData
   */
    convertData(data) {
        if (typeof data === typeof {}) {
            return data;
        }
        else if (typeof data === typeof []) {
            return this.convertDataArray(data);
        }
        else if (typeof data === typeof true) {
            return this.convertBoolean(data);
        }
        return data;
    }
    convertDataArray(data) {
        if (data && data.length > 0) {
            // tslint:disable-next-line: forin
            for (const i in data) {
                data[i] = this.convertData(data[i]);
            }
        }
        return data;
    }
    convertBoolean(value) {
        return value ? 1 : 0;
    }
    /**
     * copyProperties
     * param dest
     * param orgs
     */
    buildParams(obj) {
        return Object.entries(obj || {})
            .reduce((params, [key, value]) => {
            if (value === null) {
                return params.set(key, String(''));
            }
            else if (typeof value === typeof {}) {
                if (Array.isArray(value)) {
                    return params.set(key, value.join());
                }
                else {
                    return params.set(key, JSON.stringify(value));
                }
            }
            else {
                return params.set(key, String(value));
            }
        }, new HttpParams());
    }
    toastMessage(severity, code, data) {
        this.helperService.MESSAGE_TOASTER.next({
            severity,
            code,
            value: data
        });
    }
    /**
   * convert To FormData mutilpart request post
   */
    convertFormFile(dataPost) {
        const filteredData = this.convertData(dataPost);
        const formData = this.objectToFormData(filteredData, '', []);
        return formData;
    }
    /**
     * objectToFormData
     */
    objectToFormData(obj, rootName, ignoreList) {
        const formData = new FormData();
        function appendFormData(data, root) {
            if (!ignore(root)) {
                root = root || '';
                if (data instanceof File) {
                    if (data.type !== 'stored_file') {
                        formData.append(root, data);
                    }
                }
                else if (Array.isArray(data)) {
                    let index = 0;
                    for (let i = 0; i < data.length; i++) {
                        if (data[i] instanceof File) {
                            if (data[i].type !== 'stored_file') {
                                appendFormData(data[i], root + '[' + index + ']');
                                index++;
                            }
                        }
                        else {
                            appendFormData(data[i], root + '[' + i + ']');
                        }
                    }
                }
                else if (data && typeof data === 'object') {
                    for (const key in data) {
                        if (data.hasOwnProperty(key)) {
                            if (root === '') {
                                appendFormData(data[key], key);
                            }
                            else {
                                appendFormData(data[key], root + '.' + key);
                            }
                        }
                    }
                }
                else {
                    if (data !== null && typeof data !== 'undefined') {
                        formData.append(root, data);
                    }
                }
            }
        }
        function ignore(root) {
            return Array.isArray(ignoreList) && ignoreList.some(x => x === root);
        }
        appendFormData(obj, rootName);
        return formData;
    }
    static isSuccessRequest(res) {
        return res && res.type === 'SUCCESS';
    }
    static dateToString(date) {
        return moment(date).format('DD/MM/YYYY');
    }
    static logoutAction(router) {
        HrStorage.clear();
        router.navigate(['/auth/login']);
    }
    /**
   * getPermissionCode
   * @param code: string
   */
    static getPermissionCode(code) {
        return PERMISSION_CODE[code] || '';
    }
    /**
   * has Permission
   */
    static havePermission(operationKey, adResourceKey) {
        const permissionCode = this.getPermissionCode(adResourceKey) + '__' + this.getPermissionCode(operationKey);
        const userInfo = HrStorage.getUserToken();
        if (userInfo == null) {
            return false;
        }
        // if (!userInfo.userId) {
        //   return false;
        // }
        const userPermissionList = userInfo.userPermissionList;
        if (userPermissionList == null || userPermissionList.length <= 0) {
            return false;
        }
        for (const userPermission of userPermissionList) {
            if (userPermission.permission === permissionCode) {
                return true;
            }
        }
        return false;
    }
    static setWidthDiaglog(defaultValue) {
        var isMobile = navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(android)|(webOS)/i);
        return isMobile ? '90%' : defaultValue;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CommonUtils, deps: [{ token: HelperService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CommonUtils, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CommonUtils, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: HelperService }]; } });
class CustomEncoder {
    encodeKey(key) {
        return encodeURIComponent(key);
    }
    encodeValue(value) {
        return encodeURIComponent(value);
    }
    decodeKey(key) {
        return decodeURIComponent(key);
    }
    decodeValue(value) {
        return decodeURIComponent(value);
    }
}

class BaseComponent {
    constructor(injector, actr, _resource, actionForm) {
        this.injector = injector;
        this.actr = actr;
        this._resource = _resource;
        this.actionForm = ACTION_FORM.VIEW;
        this.resource = '';
        this.propertyConfigs = new Array();
        this.locale = inject(L10N_LOCALE);
        this.INPUT_TYPE = INPUT_TYPE;
        this.confirmationService = injector.get(ConfirmationService);
        this.commonUtil = injector.get(CommonUtils);
        if (actionForm) {
            this.actionForm = actionForm;
        }
        if (_resource) {
            this.resource = _resource;
        }
        // this.findPropertyDetails();
        // this.getPermissions();
    }
    /**
     * Build FormGroup
     * @param formData value of controls (Ex: data)
     * @param formConfig object formConfig (Ex: formConfig)
     * @param actionForm action of this Form (Ex: ACTION_FORM.INSERT)
     * @param validateForm validate of FormGroup
     */
    buildForm(formData, formConfig, actionForm, validateForm) {
        if (actionForm) {
            this.actionForm = actionForm;
            // console.log('ActionForm is being built ->', this.actionForm);
        }
        return CommonUtils.createFormNew(this.resource, this.actionForm, formData, formConfig, this.propertyConfigs, validateForm);
    }
    /**
     * confirmMessage
     */
    confirmMessage(messageCode, accept, reject) {
        const message = messageCode || 'Confirm Message';
        const header = 'Xác nhận';
        const btnSave = 'Đồng ý';
        const btnCancel = 'Hủy';
        this.confirmationService.confirm({
            message: message,
            header: header,
            icon: 'pi pi-exclamation-triangle',
            accept: accept,
            reject: reject,
            acceptLabel: btnSave,
            rejectLabel: btnCancel
        });
    }
    requestIsSuccess(res) {
        return res && res.type == 'SUCCESS';
    }
    havePermission(action, resource) {
        return CommonUtils.havePermission(action, resource);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: BaseComponent, deps: [{ token: i0.Injector }, { token: i1.ActivatedRoute }, { token: 'isFactory' }, { token: ACTION_FORM }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: BaseComponent, selector: "app-base-component", ngImport: i0, template: "<p>base-component works!</p>\n" }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: BaseComponent }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: BaseComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-base-component', template: "<p>base-component works!</p>\n" }]
        }, {
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.ActivatedRoute }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['isFactory']
                }] }, { type: ACTION_FORM }]; } });

class SharedDirectiveModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: SharedDirectiveModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.5", ngImport: i0, type: SharedDirectiveModule }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: SharedDirectiveModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: SharedDirectiveModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [],
                    exports: []
                }]
        }] });

class InputSpecialDirective {
    set type(value) {
        this._type = value;
    }
    set othertype(value) {
        this._othertype = value;
    }
    constructor() {
        this._type = '';
        this._othertype = '';
        this.validator = this.validateSpecialCharecter();
    }
    validate(c) {
        return this.validator(c);
    }
    validateSpecialCharecter() {
        return (c) => {
            const text = c.value;
            if (text && (this._type === 'text' || this._type === 'email' || this._type === 'tel') && !this._othertype) {
                const iChars = '!#$^*[]\\{}\"?<>\'';
                for (let j = 0; j < text.length; j++) {
                    if (iChars.indexOf(text.charAt(j)) >= 0) {
                        return { isValidInput: true };
                    }
                }
            }
            return null;
        };
    }
    registerOnValidatorChange(fn) {
        this._onChange = fn;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: InputSpecialDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.5", type: InputSpecialDirective, selector: "input[type=\"text\"],input[type=\"email\"],input[type=\"tel\"],input:not([othertype=\"url\"]),textarea", inputs: { type: "type", othertype: "othertype" }, providers: [
            {
                provide: NG_VALIDATORS,
                useExisting: InputSpecialDirective,
                multi: true
            }
        ], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: InputSpecialDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[type="text"],input[type="email"],input[type="tel"],input:not([othertype="url"]),textarea',
                    providers: [
                        {
                            provide: NG_VALIDATORS,
                            useExisting: InputSpecialDirective,
                            multi: true
                        }
                    ]
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { type: [{
                type: Input
            }], othertype: [{
                type: Input
            }] } });

class AutoFocusDirective {
    constructor(el) {
        this.el = el;
    }
    set autoFocus(value) {
        this._value = value;
    }
    ngAfterViewInit() {
        setTimeout(() => {
            if (this._value) {
                this.el.nativeElement.focus();
            }
        }, 400);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: AutoFocusDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.5", type: AutoFocusDirective, selector: "[autoFocus]", inputs: { autoFocus: "autoFocus" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: AutoFocusDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[autoFocus]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { autoFocus: [{
                type: Input
            }] } });

// import { TranslationService } from 'angular-l10n';
class ControlMessagesComponent {
    constructor(translation) {
        this.translation = translation;
        // tslint:disable-next-line: max-line-length
        this.replaceKeys = ['max', 'min', 'maxlength', 'minlength', 'dateNotAffter', 'dateNotBefore', 'duplicateArray', 'beforeCurrentDate', 'required', 'numberNotGreater'];
        // tslint:disable-next-line: max-line-length
        this.actualKeys = ['max', 'min', 'requiredLength', 'requiredLength', 'dateNotAffter', 'dateNotBefore', 'duplicateArray', 'beforeCurrentDate', 'required', 'numberNotGreater'];
        this.translateKeys = ['dateNotAffter', 'dateNotBefore', 'cannotContainSpace', 'duplicateArray', 'beforeCurrentDate', 'required', 'numberNotGreater'];
    }
    get errorMessage() {
        for (const propertyName in this.control.errors) {
            if (this.control.errors.hasOwnProperty(propertyName) && this.control.touched) {
                const messageText = this.translation.translate(`validate.${propertyName}`);
                // const messageText = `validate.${propertyName}`;
                const errors = this.control.errors[propertyName];
                return this.buildMessage(messageText, errors);
            }
        }
        return '';
    }
    markAsUntouched() {
        this.control.markAsUntouched();
    }
    /**
     * buildMessage
     * @param messageText: string
     * @param errors: ValidationErrors
     */
    buildMessage(messageText, errors) {
        for (const i in this.replaceKeys) {
            if (errors && errors.hasOwnProperty(this.actualKeys[i])) {
                let text = errors[this.actualKeys[i]];
                if (this.translateKeys.indexOf(this.actualKeys[i]) !== -1) {
                    text = this.translation.translate(text);
                    // text = text;
                }
                messageText = messageText.replace(new RegExp('\\$\\{' + this.replaceKeys[i] + '\\}', 'g'), text);
            }
        }
        return messageText;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ControlMessagesComponent, deps: [{ token: i2.L10nTranslationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: ControlMessagesComponent, selector: "app-control-messages", inputs: { control: "control", labelName: "labelName" }, ngImport: i0, template: "<div class=\"errorMessageDiv\" [ngClass]=\"{'show': errorMessage !== undefined}\">\r\n  <small *ngIf=\"errorMessage !== undefined\" (click)=\"markAsUntouched()\" class=\"text-danger errorMessage\">\r\n    {{ errorMessage }}\r\n  </small>\r\n</div>\r\n", styles: ["::ng-deep app-control-messages .errorMessage{color:#a94442!important;margin-top:1rem}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ControlMessagesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-control-messages', template: "<div class=\"errorMessageDiv\" [ngClass]=\"{'show': errorMessage !== undefined}\">\r\n  <small *ngIf=\"errorMessage !== undefined\" (click)=\"markAsUntouched()\" class=\"text-danger errorMessage\">\r\n    {{ errorMessage }}\r\n  </small>\r\n</div>\r\n", styles: ["::ng-deep app-control-messages .errorMessage{color:#a94442!important;margin-top:1rem}\n"] }]
        }], ctorParameters: function () { return [{ type: i2.L10nTranslationService }]; }, propDecorators: { control: [{
                type: Input
            }], labelName: [{
                type: Input
            }] } });

class InputTrimDirective {
    set type(value) {
        this._type = value || 'text';
    }
    /**
     * Updates the value on the blur event.
     */
    onBlur(event, value) {
        this.updateValue(event, value.trim());
        this.onTouched();
    }
    /**
     * Updates the value on the input event.
     */
    onInput(event, value) {
        this.updateValue(event, value);
    }
    constructor(renderer, elementRef, compositionMode) {
        // Get a value of the trim attribute if it was set.
        this.trim = '';
        /**
         * Keep the type of input element in a cache.
         *
         */
        this._type = 'text';
        /**
         * Keep the value of input element in a cache.
         *
         */
        this._value = '';
        this.onChange = (_) => { };
        this.onTouched = () => { };
        this._sourceRenderer = renderer;
        this._sourceElementRef = elementRef;
    }
    registerOnChange(fn) { this.onChange = fn; }
    registerOnTouched(fn) { this.onTouched = fn; }
    /**
     * Writes a new value to the element based on the type of input element.
     *
     */
    writeValue(value) {
        //
        // The Template Driven Form doesn't automatically convert undefined values to null. We will do,
        // keeping an empty string as string because the condition `'' || null` returns null what
        // could change the initial state of a model.
        // The Reactive Form does it automatically during initialization.
        //
        // SEE: https://github.com/anein/angular2-trim-directive/issues/18
        //
        this._value = value;
        this._sourceRenderer.setProperty(this._sourceElementRef.nativeElement, 'value', this._value);
        // a dirty trick (or magic) goes here:
        // it updates the element value if `setProperty` doesn't set a new value for some reason.
        //
        // SEE: https://github.com/anein/angular2-trim-directive/issues/9
        //
        if (this._type !== 'text') {
            this._sourceRenderer.setAttribute(this._sourceElementRef.nativeElement, 'value', this._value);
        }
    }
    setDisabledState(isDisabled) {
        this._sourceRenderer.setProperty(this._sourceElementRef.nativeElement, 'disabled', isDisabled);
    }
    /**
     * Trims an input value, and sets it to the model and element.
     *
     */
    updateValue(event, value) {
        // check if the user has set an optional attribute, and Trimmmm!!! Uhahahaha!
        value = event === 'input' ? value : value.trim();
        const previous = this._value;
        // write value to the element.
        this.writeValue(value);
        // Update the model only on getting new value, and prevent firing
        // the `dirty` state when click on empty fields.
        //
        // SEE:
        //    https://github.com/anein/angular2-trim-directive/issues/17
        //    https://github.com/anein/angular2-trim-directive/issues/35
        //    https://github.com/anein/angular2-trim-directive/issues/39
        //
        if ((this._value || previous) && this._value.trim() !== previous) {
            this.onChange(this._value);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: InputTrimDirective, deps: [{ token: Renderer2 }, { token: ElementRef }, { token: COMPOSITION_BUFFER_MODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.5", type: InputTrimDirective, selector: "input[type=\"text\"], textarea[]", inputs: { trim: "trim", type: "type" }, host: { listeners: { "blur": "onBlur($event.type,$event.target.value)", "input": "onInput($event.type,$event.target.value)" } }, providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: InputTrimDirective, multi: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: InputTrimDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[type="text"], textarea[]',
                    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: InputTrimDirective, multi: true }]
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [COMPOSITION_BUFFER_MODE]
                }] }]; }, propDecorators: { trim: [{
                type: Input
            }], type: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event.type', '$event.target.value']]
            }], onInput: [{
                type: HostListener,
                args: ['input', ['$event.type', '$event.target.value']]
            }] } });

class TextInputComponent {
    constructor() {
        // formControl of this input
        this.property = new BaseControl();
        // type of input: TEXT, TEXT-AREA, ...
        this.type = INPUT_TYPE.TEXT;
        // placeHolder
        this.placeholder = '';
        this.disabled = false;
        this.required = false;
        this.onChange = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.showPassword = false;
    }
    onBlurMethod(event) {
        const newValue = event.target.value?.trim();
        this.onBlur.emit(newValue);
    }
    onChangeMethod(event) {
        const newValue = event.target.value;
        this.property.setValue(newValue);
        this.property.markAsTouched();
        this.onChange.emit(newValue);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: TextInputComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: TextInputComponent, selector: "app-text-input", inputs: { property: "property", wrapClass: "wrapClass", type: "type", maxLength: "maxLength", rows: "rows", labelValue: "labelValue", placeholder: "placeholder", autofocus: "autofocus", disabled: "disabled", required: "required", readonly: "readonly" }, outputs: { onChange: "onChange", onBlur: "onBlur" }, ngImport: i0, template: "<div class=\"field\" [ngSwitch]=\"type\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire || required}\">{{ labelValue }}</label>\n    <ng-template [ngSwitchCase]=\"'text-area'\">\n        <textarea autoFocus=\"autoFocus\"\n            [formControl]=\"property\"\n            [maxlength]=\"maxLength\"\n            [autoFocus]=\"autofocus\"\n            [placeholder]=\"placeholder\"\n            [rows]=\"rows\"\n            [attr.disabled]=\"disabled ? true : null\"\n            [readonly]=\"readonly\"\n            class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\"\n            (blur)=\"property.markAsTouched(); onBlurMethod($event);\"\n            (input)=\"onChangeMethod($event)\"\n            >\n        </textarea>\n    </ng-template>\n    <!-- <ng-template [ngSwitchCase]=\"'number'\">\n        <p-inputNumber inputId=\"integeronly\" [(ngModel)]=\"value1\">\n        </p-inputNumber>\n    </ng-template> -->\n    <ng-template [ngSwitchCase]=\"'password'\">\n        <span class=\"p-input-icon-right w-100\">\n            <i [class]=\"showPassword ? 'pi pi-eye-slash' : 'pi pi-eye'\" (click)=\"showPassword = !showPassword\"></i>\n            <input *ngIf=\"!showPassword\" type=\"password\" [formControl]=\"property\" [placeholder]=\"placeholder\"\n                class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\" />\n            <input *ngIf=\"showPassword\" type=\"text\" [formControl]=\"property\" [placeholder]=\"placeholder\"\n                class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\" />\n        </span>\n    </ng-template>\n    <ng-template ngSwitchDefault>\n        <input type=\"text\" autoFocus=\"autoFocus\"\n            [formControl]=\"property\"\n            [maxlength]=\"maxLength\"\n            [autoFocus]=\"autofocus\"\n            [placeholder]=\"placeholder\"\n            [attr.disabled]=\"disabled ? true : null\"\n            [readonly]=\"readonly\"\n            class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\"\n            (blur)=\"property.markAsTouched(); onBlurMethod($event);\"\n            (input)=\"onChangeMethod($event)\"\n            >\n    </ng-template>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1$1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i1$1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i1$1.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i6.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: ControlMessagesComponent, selector: "app-control-messages", inputs: ["control", "labelName"] }, { kind: "directive", type: InputSpecialDirective, selector: "input[type=\"text\"],input[type=\"email\"],input[type=\"tel\"],input:not([othertype=\"url\"]),textarea", inputs: ["type", "othertype"] }, { kind: "directive", type: AutoFocusDirective, selector: "[autoFocus]", inputs: ["autoFocus"] }, { kind: "directive", type: InputTrimDirective, selector: "input[type=\"text\"], textarea[]", inputs: ["trim", "type"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: TextInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-text-input', template: "<div class=\"field\" [ngSwitch]=\"type\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire || required}\">{{ labelValue }}</label>\n    <ng-template [ngSwitchCase]=\"'text-area'\">\n        <textarea autoFocus=\"autoFocus\"\n            [formControl]=\"property\"\n            [maxlength]=\"maxLength\"\n            [autoFocus]=\"autofocus\"\n            [placeholder]=\"placeholder\"\n            [rows]=\"rows\"\n            [attr.disabled]=\"disabled ? true : null\"\n            [readonly]=\"readonly\"\n            class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\"\n            (blur)=\"property.markAsTouched(); onBlurMethod($event);\"\n            (input)=\"onChangeMethod($event)\"\n            >\n        </textarea>\n    </ng-template>\n    <!-- <ng-template [ngSwitchCase]=\"'number'\">\n        <p-inputNumber inputId=\"integeronly\" [(ngModel)]=\"value1\">\n        </p-inputNumber>\n    </ng-template> -->\n    <ng-template [ngSwitchCase]=\"'password'\">\n        <span class=\"p-input-icon-right w-100\">\n            <i [class]=\"showPassword ? 'pi pi-eye-slash' : 'pi pi-eye'\" (click)=\"showPassword = !showPassword\"></i>\n            <input *ngIf=\"!showPassword\" type=\"password\" [formControl]=\"property\" [placeholder]=\"placeholder\"\n                class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\" />\n            <input *ngIf=\"showPassword\" type=\"text\" [formControl]=\"property\" [placeholder]=\"placeholder\"\n                class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\" />\n        </span>\n    </ng-template>\n    <ng-template ngSwitchDefault>\n        <input type=\"text\" autoFocus=\"autoFocus\"\n            [formControl]=\"property\"\n            [maxlength]=\"maxLength\"\n            [autoFocus]=\"autofocus\"\n            [placeholder]=\"placeholder\"\n            [attr.disabled]=\"disabled ? true : null\"\n            [readonly]=\"readonly\"\n            class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\"\n            (blur)=\"property.markAsTouched(); onBlurMethod($event);\"\n            (input)=\"onChangeMethod($event)\"\n            >\n    </ng-template>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>" }]
        }], propDecorators: { property: [{
                type: Input
            }], wrapClass: [{
                type: Input
            }], type: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], rows: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], autofocus: [{
                type: Input
            }], disabled: [{
                type: Input
            }], required: [{
                type: Input
            }], readonly: [{
                type: Input
            }], onChange: [{
                type: Output
            }], onBlur: [{
                type: Output
            }] } });

class DropDownComponent {
    constructor() {
        // formControl of this input
        this.property = new BaseControl();
        this.options = [];
        this.optionLabel = '';
        this.optionValue = '';
        this.labelValue = '';
        this.showClear = true;
        this.onChange = new EventEmitter();
    }
    _onChange(event) {
        this.onChange.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: DropDownComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: DropDownComponent, selector: "app-drop-down", inputs: { property: "property", options: "options", optionLabel: "optionLabel", optionValue: "optionValue", labelValue: "labelValue", showClear: "showClear" }, outputs: { onChange: "onChange" }, ngImport: i0, template: "<div class=\"field\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\n    <p-dropdown\n        [formControl]=\"property\"\n        [options]=\"options\"\n        [optionLabel]=\"optionLabel\"\n        [optionValue]=\"optionValue\"\n        [filter]=\"true\"\n        [autoDisplayFirst]=\"false\"\n        [filterBy]=\"optionLabel\"\n        [showClear]=\"showClear\"\n        appendTo=\"body\"\n        class=\"inline-block w-full\"\n        emptyFilterMessage=\"Kh\u00F4ng t\u00ECm th\u1EA5y d\u1EEF li\u1EC7u\"\n        emptyMessage=\"Kh\u00F4ng t\u00ECm th\u1EA5y d\u1EEF li\u1EC7u\"\n        (onChange)=\"_onChange($event)\"></p-dropdown>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i3.Dropdown, selector: "p-dropdown", inputs: ["scrollHeight", "filter", "name", "style", "panelStyle", "styleClass", "panelStyleClass", "readonly", "required", "editable", "appendTo", "tabindex", "placeholder", "filterPlaceholder", "filterLocale", "inputId", "selectId", "dataKey", "filterBy", "autofocus", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "autoDisplayFirst", "group", "showClear", "emptyFilterMessage", "emptyMessage", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "ariaLabel", "ariaLabelledBy", "filterMatchMode", "maxlength", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "overlayDirection", "disabled", "itemSize", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "filterValue", "options"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onShow", "onHide", "onClear", "onLazyLoad"] }, { kind: "component", type: ControlMessagesComponent, selector: "app-control-messages", inputs: ["control", "labelName"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: DropDownComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-drop-down', template: "<div class=\"field\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\n    <p-dropdown\n        [formControl]=\"property\"\n        [options]=\"options\"\n        [optionLabel]=\"optionLabel\"\n        [optionValue]=\"optionValue\"\n        [filter]=\"true\"\n        [autoDisplayFirst]=\"false\"\n        [filterBy]=\"optionLabel\"\n        [showClear]=\"showClear\"\n        appendTo=\"body\"\n        class=\"inline-block w-full\"\n        emptyFilterMessage=\"Kh\u00F4ng t\u00ECm th\u1EA5y d\u1EEF li\u1EC7u\"\n        emptyMessage=\"Kh\u00F4ng t\u00ECm th\u1EA5y d\u1EEF li\u1EC7u\"\n        (onChange)=\"_onChange($event)\"></p-dropdown>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>" }]
        }], propDecorators: { property: [{
                type: Input
            }], options: [{
                type: Input
            }], optionLabel: [{
                type: Input
            }], optionValue: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], showClear: [{
                type: Input
            }], onChange: [{
                type: Output
            }] } });

class OrgTreeComponent {
    constructor(_injector, dialogService) {
        this._injector = _injector;
        this.dialogService = dialogService;
        this.onSelectNode = new EventEmitter();
        this.loading = false;
    }
    ngAfterViewInit() {
        this.loading = true;
        this.orgService.initOrgTree().subscribe((res) => {
            this.orgTree = res?.data;
            this.loading = false;
        });
    }
    nodeExpand(event) {
        if (!!event.node.children) {
            return;
        }
        if (event.node) {
            this.loading = true;
            setTimeout(() => {
                this.orgService.getChildOrg(event.node.key).subscribe((res) => {
                    event.node.children = res.data;
                });
                this.loading = false;
                // this.cd.markForCheck();
            }, 200);
        }
    }
    nodeSelect(event) {
        this.onSelectNode.emit(event.node);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: OrgTreeComponent, deps: [{ token: i0.Injector }, { token: i1$2.DialogService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: OrgTreeComponent, selector: "app-org-tree", inputs: { orgService: "orgService" }, outputs: { onSelectNode: "onSelectNode" }, ngImport: i0, template: "<p-tree class=\"w-full md:w-30rem\" [value]=\"orgTree\" selectionMode=\"single\" [loading]=\"loading\"\n    (onNodeExpand)=\"nodeExpand($event)\" (onNodeSelect)=\"nodeSelect($event)\"></p-tree>", styles: ["::ng-deep app-org-tree .p-tree{border:none;padding:0}\n"], dependencies: [{ kind: "component", type: i2$1.Tree, selector: "p-tree", inputs: ["value", "selectionMode", "selection", "style", "styleClass", "contextMenu", "layout", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "metaKeySelection", "propagateSelectionUp", "propagateSelectionDown", "loading", "loadingIcon", "emptyMessage", "ariaLabel", "togglerAriaLabel", "ariaLabelledBy", "validateDrop", "filter", "filterBy", "filterMode", "filterPlaceholder", "filteredNodes", "filterLocale", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "indentation", "_templateMap", "trackBy", "virtualNodeHeight"], outputs: ["selectionChange", "onNodeSelect", "onNodeUnselect", "onNodeExpand", "onNodeCollapse", "onNodeContextMenuSelect", "onNodeDrop", "onLazyLoad", "onScroll", "onScrollIndexChange", "onFilter"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: OrgTreeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-org-tree', template: "<p-tree class=\"w-full md:w-30rem\" [value]=\"orgTree\" selectionMode=\"single\" [loading]=\"loading\"\n    (onNodeExpand)=\"nodeExpand($event)\" (onNodeSelect)=\"nodeSelect($event)\"></p-tree>", styles: ["::ng-deep app-org-tree .p-tree{border:none;padding:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$2.DialogService }]; }, propDecorators: { orgService: [{
                type: Input
            }], onSelectNode: [{
                type: Output
            }] } });

class OrgSelectorDialogComponent extends BaseComponent {
    constructor(_injector, dialogService, translate, 
    // public orgService: OrganizationService,
    dynamicDialogRef, config) {
        super(_injector);
        this._injector = _injector;
        this.dialogService = dialogService;
        this.translate = translate;
        this.dynamicDialogRef = dynamicDialogRef;
        this.config = config;
        this.formConfig = {
            id: [''],
            code: [''],
            name: [''],
        };
        this.dataTable = {};
        this.selectedOrg = null;
        this.formSearch = this.buildForm({}, this.formConfig);
        this.orgService = this.config.data?.orgService;
        this.doSearchOrg();
    }
    doSearchOrg(event) {
        if (!event) {
            event = { rows: 10, resetTable: true };
        }
        this.orgService.search(this.formSearch.value, event)
            .subscribe((res) => {
            this.dataTable = res?.data || [];
        });
    }
    onRowSelect(event) {
        if (!!event.data) {
            this.dynamicDialogRef.close(event.data);
        }
    }
    onSelectNode(event) {
        console.log(' >>> onSelectNode', event);
        this.f['id'].setValue(event.key);
        this.doSearchOrg();
    }
    get f() {
        return this.formSearch.controls;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: OrgSelectorDialogComponent, deps: [{ token: i0.Injector }, { token: i1$2.DialogService }, { token: i2.L10nTranslationService }, { token: i1$2.DynamicDialogRef }, { token: i1$2.DynamicDialogConfig }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: OrgSelectorDialogComponent, selector: "app-org-selector-dialog", usesInheritance: true, ngImport: i0, template: "<div class=\"grid\">\r\n    <div class=\"md:col-4 col-12\">\r\n        <p-panel>\r\n            <ng-template pTemplate=\"header\" class=\"block\">\r\n                <div class=\"flex justify-content-between flex-wrap\">\r\n                    <b class=\"flex align-items-center\">{{ 'mngOrganization.organization.treeTitle' | translateAsync\r\n                        }}</b>\r\n                </div>\r\n            </ng-template>\r\n            <div>\r\n                <app-org-tree (onSelectNode)=\"onSelectNode($event)\" [orgService]=\"orgService\"/>\r\n            </div>\r\n        </p-panel>\r\n    </div>\r\n    <div class=\"md:col-8 col-12\">\r\n        <div class=\"grid\">\r\n            <app-text-input class=\"mr-3 md:col-8 col-12\" [placeholder]=\"'\u0110\u01A1n v\u1ECB'\" [property]=\"f['name']\"></app-text-input>\r\n            <p-button icon=\"pi pi-search\" class=\"md:col-3 col-12\" [label]=\"'common.label.search' | translateAsync\" (onClick)=\"doSearchOrg()\"></p-button>\r\n        </div>\r\n        <div>\r\n            <p-table [value]=\"dataTable?.data\" [paginator]=\"dataTable?.data && dataTable?.data?.length\" [rows]=\"10\"\r\n                styleClass=\"p-datatable-sm\" [lazy]=\"true\" [totalRecords]=\"dataTable?.recordsTotal\"\r\n                (onLazyLoad)=\"doSearchOrg($event)\"\r\n                [showCurrentPageReport]=\"true\"\r\n                selectionMode=\"single\"\r\n                (onRowSelect)=\"onRowSelect($event)\"\r\n                currentPageReportTemplate=\"T\u00ECm th\u1EA5y {totalRecords} k\u1EBFt qu\u1EA3, hi\u1EC3n th\u1ECB t\u1EEB {first} - {last}\">\r\n                <ng-template pTemplate=\"header\">\r\n                    <tr>\r\n                        <th style=\"width: 5%;\">STT</th>\r\n                        <th style=\"width: 15%\">\r\n                            {{ 'mngOrganization.organization.code' | translateAsync }}\r\n                        </th>\r\n                        <th style=\"width: 30%\">\r\n                            {{ 'mngOrganization.organization.name' | translateAsync }}\r\n                        </th>\r\n                        <th style=\"width: 20%\">\r\n                            {{ 'mngOrganization.organization.establishDate' | translateAsync }}\r\n                        </th>\r\n                    </tr>\r\n                </ng-template>\r\n                <ng-template pTemplate=\"body\" let-item let-index=\"rowIndex\">\r\n                    <tr [pSelectableRow]=\"item\">\r\n                        <td><span class=\"p-column-title\">STT</span>{{ index + 1 }}</td>\r\n                        <td><span class=\"p-column-title\">{{ 'mngOrganization.organization.code' | translateAsync }}</span>{{ item.code }}</td>\r\n                        <td><span class=\"p-column-title\">{{ 'mngOrganization.organization.name' | translateAsync }}</span>{{ item.name }}</td>\r\n                        <td><span class=\"p-column-title\">{{ 'mngOrganization.organization.establishDate' | translateAsync }}</span>{{ item.establishDate | date:'dd/MM/yyyy' }}</td>\r\n                    </tr>\r\n                </ng-template>\r\n                <ng-template pTemplate=\"emptymessage\">\r\n                    <tr>\r\n                        <td colspan=\"6\">{{ 'common.table.dataNotFound' | translateAsync }}</td>\r\n                    </tr>\r\n                </ng-template>\r\n            </p-table>\r\n        </div>\r\n    </div>\r\n</div>", styles: ["::ng-deep app-org-selector-dialog .p-panel .p-panel-content{padding:0}\n"], dependencies: [{ kind: "component", type: i4.Button, selector: "p-button", inputs: ["type", "iconPos", "icon", "badge", "label", "disabled", "loading", "loadingIcon", "style", "styleClass", "badgeClass", "ariaLabel"], outputs: ["onClick", "onFocus", "onBlur"] }, { kind: "directive", type: i3$1.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "component", type: i5.Panel, selector: "p-panel", inputs: ["toggleable", "header", "collapsed", "style", "styleClass", "iconPos", "expandIcon", "collapseIcon", "showHeader", "toggler", "transitionOptions"], outputs: ["collapsedChange", "onBeforeToggle", "onAfterToggle"] }, { kind: "component", type: i6$1.Table, selector: "p-table", inputs: ["frozenColumns", "frozenValue", "style", "styleClass", "tableStyle", "tableStyleClass", "paginator", "pageLinks", "rowsPerPageOptions", "alwaysShowPaginator", "paginatorPosition", "paginatorStyleClass", "paginatorDropdownAppendTo", "paginatorDropdownScrollHeight", "currentPageReportTemplate", "showCurrentPageReport", "showJumpToPageDropdown", "showJumpToPageInput", "showFirstLastIcon", "showPageLinks", "defaultSortOrder", "sortMode", "resetPageOnSort", "selectionMode", "selectionPageOnly", "contextMenuSelection", "contextMenuSelectionMode", "dataKey", "metaKeySelection", "rowSelectable", "rowTrackBy", "lazy", "lazyLoadOnInit", "compareSelectionBy", "csvSeparator", "exportFilename", "filters", "globalFilterFields", "filterDelay", "filterLocale", "expandedRowKeys", "editingRowKeys", "rowExpandMode", "scrollable", "scrollDirection", "rowGroupMode", "scrollHeight", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "virtualScrollDelay", "frozenWidth", "responsive", "contextMenu", "resizableColumns", "columnResizeMode", "reorderableColumns", "loading", "loadingIcon", "showLoader", "rowHover", "customSort", "showInitialSortBadge", "autoLayout", "exportFunction", "exportHeader", "stateKey", "stateStorage", "editMode", "groupRowsBy", "groupRowsByOrder", "responsiveLayout", "breakpoint", "paginatorLocale", "value", "columns", "first", "rows", "totalRecords", "sortField", "sortOrder", "multiSortMeta", "selection", "selectAll", "virtualRowHeight"], outputs: ["contextMenuSelectionChange", "selectAllChange", "selectionChange", "onRowSelect", "onRowUnselect", "onPage", "onSort", "onFilter", "onLazyLoad", "onRowExpand", "onRowCollapse", "onContextMenuSelect", "onColResize", "onColReorder", "onRowReorder", "onEditInit", "onEditComplete", "onEditCancel", "onHeaderCheckboxToggle", "sortFunction", "firstChange", "rowsChange", "onStateSave", "onStateRestore"] }, { kind: "directive", type: i6$1.SelectableRow, selector: "[pSelectableRow]", inputs: ["pSelectableRow", "pSelectableRowIndex", "pSelectableRowDisabled"] }, { kind: "component", type: TextInputComponent, selector: "app-text-input", inputs: ["property", "wrapClass", "type", "maxLength", "rows", "labelValue", "placeholder", "autofocus", "disabled", "required", "readonly"], outputs: ["onChange", "onBlur"] }, { kind: "component", type: OrgTreeComponent, selector: "app-org-tree", inputs: ["orgService"], outputs: ["onSelectNode"] }, { kind: "pipe", type: i1$1.DatePipe, name: "date" }, { kind: "pipe", type: i2.L10nTranslateAsyncPipe, name: "translateAsync" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: OrgSelectorDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-org-selector-dialog', template: "<div class=\"grid\">\r\n    <div class=\"md:col-4 col-12\">\r\n        <p-panel>\r\n            <ng-template pTemplate=\"header\" class=\"block\">\r\n                <div class=\"flex justify-content-between flex-wrap\">\r\n                    <b class=\"flex align-items-center\">{{ 'mngOrganization.organization.treeTitle' | translateAsync\r\n                        }}</b>\r\n                </div>\r\n            </ng-template>\r\n            <div>\r\n                <app-org-tree (onSelectNode)=\"onSelectNode($event)\" [orgService]=\"orgService\"/>\r\n            </div>\r\n        </p-panel>\r\n    </div>\r\n    <div class=\"md:col-8 col-12\">\r\n        <div class=\"grid\">\r\n            <app-text-input class=\"mr-3 md:col-8 col-12\" [placeholder]=\"'\u0110\u01A1n v\u1ECB'\" [property]=\"f['name']\"></app-text-input>\r\n            <p-button icon=\"pi pi-search\" class=\"md:col-3 col-12\" [label]=\"'common.label.search' | translateAsync\" (onClick)=\"doSearchOrg()\"></p-button>\r\n        </div>\r\n        <div>\r\n            <p-table [value]=\"dataTable?.data\" [paginator]=\"dataTable?.data && dataTable?.data?.length\" [rows]=\"10\"\r\n                styleClass=\"p-datatable-sm\" [lazy]=\"true\" [totalRecords]=\"dataTable?.recordsTotal\"\r\n                (onLazyLoad)=\"doSearchOrg($event)\"\r\n                [showCurrentPageReport]=\"true\"\r\n                selectionMode=\"single\"\r\n                (onRowSelect)=\"onRowSelect($event)\"\r\n                currentPageReportTemplate=\"T\u00ECm th\u1EA5y {totalRecords} k\u1EBFt qu\u1EA3, hi\u1EC3n th\u1ECB t\u1EEB {first} - {last}\">\r\n                <ng-template pTemplate=\"header\">\r\n                    <tr>\r\n                        <th style=\"width: 5%;\">STT</th>\r\n                        <th style=\"width: 15%\">\r\n                            {{ 'mngOrganization.organization.code' | translateAsync }}\r\n                        </th>\r\n                        <th style=\"width: 30%\">\r\n                            {{ 'mngOrganization.organization.name' | translateAsync }}\r\n                        </th>\r\n                        <th style=\"width: 20%\">\r\n                            {{ 'mngOrganization.organization.establishDate' | translateAsync }}\r\n                        </th>\r\n                    </tr>\r\n                </ng-template>\r\n                <ng-template pTemplate=\"body\" let-item let-index=\"rowIndex\">\r\n                    <tr [pSelectableRow]=\"item\">\r\n                        <td><span class=\"p-column-title\">STT</span>{{ index + 1 }}</td>\r\n                        <td><span class=\"p-column-title\">{{ 'mngOrganization.organization.code' | translateAsync }}</span>{{ item.code }}</td>\r\n                        <td><span class=\"p-column-title\">{{ 'mngOrganization.organization.name' | translateAsync }}</span>{{ item.name }}</td>\r\n                        <td><span class=\"p-column-title\">{{ 'mngOrganization.organization.establishDate' | translateAsync }}</span>{{ item.establishDate | date:'dd/MM/yyyy' }}</td>\r\n                    </tr>\r\n                </ng-template>\r\n                <ng-template pTemplate=\"emptymessage\">\r\n                    <tr>\r\n                        <td colspan=\"6\">{{ 'common.table.dataNotFound' | translateAsync }}</td>\r\n                    </tr>\r\n                </ng-template>\r\n            </p-table>\r\n        </div>\r\n    </div>\r\n</div>", styles: ["::ng-deep app-org-selector-dialog .p-panel .p-panel-content{padding:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$2.DialogService }, { type: i2.L10nTranslationService }, { type: i1$2.DynamicDialogRef }, { type: i1$2.DynamicDialogConfig }]; } });

class OrgSelectorComponent extends BaseComponent {
    constructor(_injector, dialogService, translate) {
        super(_injector);
        this._injector = _injector;
        this.dialogService = dialogService;
        this.translate = translate;
        // formControl of this input
        this.property = new BaseControl();
        this.onChange = new EventEmitter();
        this.dataTable = {};
        this.orgName = '';
    }
    /**
     * ngOnInit
     */
    ngOnInit() {
    }
    /**
     * ngAfterViewInit
     */
    ngAfterViewInit() {
    }
    onSelect() {
        this.ref = this.dialogService.open(OrgSelectorDialogComponent, {
            header: this.translate.translate('common.orgSelector.select'),
            width: CommonUtils.setWidthDiaglog('60%'),
            contentStyle: { overflow: 'auto' },
            baseZIndex: 99999,
            maximizable: true,
            data: {
                orgService: this.orgService
            }
        });
        this.ref.onClose.subscribe((node) => {
            if (node) {
                this.orgName = node.name;
                this.property.setValue(!!this.fieldValue ? node[this.fieldValue] : node.id);
                // callback on chose item
                this.onChange.emit(node);
            }
        });
    }
    /**
     * ngOnChanges
     */
    ngOnChanges() {
        this.onChangeOrgId();
    }
    onChangeOrgId() {
        if (!this.property) {
            return;
        }
        if (!this.property.value || this.property.value == 0) {
            return;
        }
        if (this.fieldValue == 'code') {
            this.orgService.getByCode(this.property.value)
                .subscribe((res) => {
                const data = res.data;
                if (data) {
                    this.orgName = data.name;
                }
            });
        }
        else {
            // thuc hien lay ten don vi de hien thi
            this.orgService.findOne(this.property.value)
                .subscribe((res) => {
                const data = res.data;
                if (data) {
                    this.orgName = data.name;
                }
            });
        }
    }
    onClear() {
        this.orgName = '';
        this.property.setValue(null);
        this.onChange.emit(null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: OrgSelectorComponent, deps: [{ token: i0.Injector }, { token: i1$2.DialogService }, { token: i2.L10nTranslationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: OrgSelectorComponent, selector: "app-org-selector", inputs: { property: "property", labelValue: "labelValue", orgService: "orgService", fieldValue: "fieldValue" }, outputs: { onChange: "onChange" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div class=\"field\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\n    <div class=\"p-inputgroup w-full\">\n        <input class=\"flex-1\" type=\"text\" pInputText [(ngModel)]=\"orgName\" [pTooltip]=\"orgName\" (click)=\"onSelect()\"/>\n        <button\n            type=\"button\"\n            pButton\n            icon=\"pi pi-times\"\n            class=\"p-button-danger\"\n            [pTooltip]=\"'common.orgSelector.clear' | translateAsync\"\n            (click)=\"onClear()\"></button>\n        <button\n            type=\"button\"\n            pButton\n            icon=\"pi pi-check\"\n            class=\"p-button-info\"\n            [pTooltip]=\"'common.orgSelector.select' | translateAsync\"\n            (click)=\"onSelect()\"></button>\n    </div>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>\n", styles: ["::ng-deep app-org-selector input{padding:0 .5rem!important}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i4.ButtonDirective, selector: "[pButton]", inputs: ["iconPos", "loadingIcon", "label", "icon", "loading"] }, { kind: "directive", type: i5$1.Tooltip, selector: "[pTooltip]", inputs: ["tooltipPosition", "tooltipEvent", "appendTo", "positionStyle", "tooltipStyleClass", "tooltipZIndex", "escape", "showDelay", "hideDelay", "life", "positionTop", "positionLeft", "autoHide", "fitContent", "hideOnEscape", "pTooltip", "tooltipDisabled", "tooltipOptions"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i7.InputText, selector: "[pInputText]" }, { kind: "component", type: ControlMessagesComponent, selector: "app-control-messages", inputs: ["control", "labelName"] }, { kind: "directive", type: InputSpecialDirective, selector: "input[type=\"text\"],input[type=\"email\"],input[type=\"tel\"],input:not([othertype=\"url\"]),textarea", inputs: ["type", "othertype"] }, { kind: "directive", type: InputTrimDirective, selector: "input[type=\"text\"], textarea[]", inputs: ["trim", "type"] }, { kind: "pipe", type: i2.L10nTranslateAsyncPipe, name: "translateAsync" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: OrgSelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-org-selector', template: "<div class=\"field\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\n    <div class=\"p-inputgroup w-full\">\n        <input class=\"flex-1\" type=\"text\" pInputText [(ngModel)]=\"orgName\" [pTooltip]=\"orgName\" (click)=\"onSelect()\"/>\n        <button\n            type=\"button\"\n            pButton\n            icon=\"pi pi-times\"\n            class=\"p-button-danger\"\n            [pTooltip]=\"'common.orgSelector.clear' | translateAsync\"\n            (click)=\"onClear()\"></button>\n        <button\n            type=\"button\"\n            pButton\n            icon=\"pi pi-check\"\n            class=\"p-button-info\"\n            [pTooltip]=\"'common.orgSelector.select' | translateAsync\"\n            (click)=\"onSelect()\"></button>\n    </div>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>\n", styles: ["::ng-deep app-org-selector input{padding:0 .5rem!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$2.DialogService }, { type: i2.L10nTranslationService }]; }, propDecorators: { property: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], orgService: [{
                type: Input
            }], fieldValue: [{
                type: Input
            }], onChange: [{
                type: Output
            }] } });

class AuthLayoutComponent {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: AuthLayoutComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: AuthLayoutComponent, selector: "app-auth-layout", ngImport: i0, template: "<p>auth-layout works!</p>\n", styles: [""] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: AuthLayoutComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-auth-layout', template: "<p>auth-layout works!</p>\n" }]
        }] });

class CategorySelectorComponent extends BaseComponent {
    constructor(_injector, 
    // public categoryService: CategoryService,
    cdr) {
        super(_injector);
        this._injector = _injector;
        this.cdr = cdr;
        // formControl of this input
        this.property = new BaseControl();
        this.typeCode = '';
        this.onChange = new EventEmitter();
        this.catogoryOptions = [];
        this.optionValue = 'id';
    }
    ngAfterViewInit() {
        this.loadCategoryOption();
        if (!!this.fieldValue) {
            this.optionValue = this.fieldValue;
        }
    }
    loadCategoryOption() {
        this.categoryService.findByTypeCode(this.typeCode)
            .subscribe((res) => {
            this.catogoryOptions = res.data;
            this.cdr.detectChanges();
        });
    }
    _onChange(event) {
        this.onChange.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CategorySelectorComponent, deps: [{ token: i0.Injector }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: CategorySelectorComponent, selector: "app-category-selector", inputs: { property: "property", labelValue: "labelValue", fieldValue: "fieldValue", categoryService: "categoryService", typeCode: "typeCode" }, outputs: { onChange: "onChange" }, usesInheritance: true, ngImport: i0, template: "<app-drop-down [property]=\"property\" [labelValue]=\"labelValue\" [showClear]=\"true\"\n    [options]=\"catogoryOptions\" optionLabel=\"name\" [optionValue]=\"optionValue\" (onChange)=\"_onChange($event)\"></app-drop-down>", styles: [""], dependencies: [{ kind: "component", type: DropDownComponent, selector: "app-drop-down", inputs: ["property", "options", "optionLabel", "optionValue", "labelValue", "showClear"], outputs: ["onChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CategorySelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-category-selector', template: "<app-drop-down [property]=\"property\" [labelValue]=\"labelValue\" [showClear]=\"true\"\n    [options]=\"catogoryOptions\" optionLabel=\"name\" [optionValue]=\"optionValue\" (onChange)=\"_onChange($event)\"></app-drop-down>" }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { property: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], fieldValue: [{
                type: Input
            }], categoryService: [{
                type: Input
            }], typeCode: [{
                type: Input
            }], onChange: [{
                type: Output
            }] } });

class ChangePasswordFormComponent extends BaseComponent {
    constructor(_injector, actr, translate, dynamicDialogRef, config) {
        super(_injector, actr, '');
        this._injector = _injector;
        this.translate = translate;
        this.dynamicDialogRef = dynamicDialogRef;
        this.config = config;
        this.formConfig = {
            currentPassword: ['', [ValidationService.required]],
            newPassword: ['', [ValidationService.required]],
            confirmPassword: ['', [ValidationService.required]],
        };
        this.formSave = this.buildForm(config?.data || {}, this.formConfig);
    }
    get f() {
        return this.formSave.controls;
    }
    onSave() {
        if (!CommonUtils.isValidForm(this.formSave)) {
            return;
        }
        this.confirmMessage(this.translate.translate('common.label.confirmSave'), () => {
            this.config.data?.authService.changePassword(this.formSave.value)
                .subscribe((res) => {
                if (this.requestIsSuccess(res)) {
                    this.dynamicDialogRef.close(res);
                }
            });
        }, () => {
        });
    }
    onClose() {
        this.dynamicDialogRef.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ChangePasswordFormComponent, deps: [{ token: i0.Injector }, { token: i1.ActivatedRoute }, { token: i2.L10nTranslationService }, { token: i1$2.DynamicDialogRef }, { token: i1$2.DynamicDialogConfig }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: ChangePasswordFormComponent, selector: "app-change-password-form", usesInheritance: true, ngImport: i0, template: "<form [formGroup]=\"formSave\">\n    <div class=\"formgrid grid\">\n        <app-text-input [property]=\"f['currentPassword']\"\n            class=\"col-12 md:col-12\"\n            [type]=\"INPUT_TYPE.PASSWORD\"\n            [labelValue]=\"'M\u1EADt kh\u1EA9u hi\u1EC7n t\u1EA1i'\"\n        ></app-text-input>\n        <app-text-input [property]=\"f['newPassword']\"\n            class=\"col-12 md:col-12\"\n            [type]=\"INPUT_TYPE.PASSWORD\"\n            [labelValue]=\"'M\u1EADt kh\u1EA9u m\u1EDBi'\"\n        ></app-text-input>\n        <app-text-input [property]=\"f['confirmPassword']\"\n            class=\"col-12 md:col-12\"\n            [type]=\"INPUT_TYPE.PASSWORD\"\n            [labelValue]=\"'X\u00E1c nh\u1EADn m\u1EADt kh\u1EA9u m\u1EDBi'\"\n        ></app-text-input>\n    </div>\n    <div class=\"flex justify-content-center app-dialog-footer\">\n        <p-button icon=\"pi pi-times\" [label]=\"'common.label.quit' | translateAsync\" styleClass=\"p-button-outlined\" (onClick)=\"onClose()\"></p-button>\n        <p-button icon=\"pi pi-save\" [label]=\"'common.label.save' | translateAsync\" (onClick)=\"onSave()\"></p-button>\n    </div>\n</form>", styles: [""], dependencies: [{ kind: "component", type: i4.Button, selector: "p-button", inputs: ["type", "iconPos", "icon", "badge", "label", "disabled", "loading", "loadingIcon", "style", "styleClass", "badgeClass", "ariaLabel"], outputs: ["onClick", "onFocus", "onBlur"] }, { kind: "directive", type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i6.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "component", type: TextInputComponent, selector: "app-text-input", inputs: ["property", "wrapClass", "type", "maxLength", "rows", "labelValue", "placeholder", "autofocus", "disabled", "required", "readonly"], outputs: ["onChange", "onBlur"] }, { kind: "pipe", type: i2.L10nTranslateAsyncPipe, name: "translateAsync" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ChangePasswordFormComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-change-password-form', template: "<form [formGroup]=\"formSave\">\n    <div class=\"formgrid grid\">\n        <app-text-input [property]=\"f['currentPassword']\"\n            class=\"col-12 md:col-12\"\n            [type]=\"INPUT_TYPE.PASSWORD\"\n            [labelValue]=\"'M\u1EADt kh\u1EA9u hi\u1EC7n t\u1EA1i'\"\n        ></app-text-input>\n        <app-text-input [property]=\"f['newPassword']\"\n            class=\"col-12 md:col-12\"\n            [type]=\"INPUT_TYPE.PASSWORD\"\n            [labelValue]=\"'M\u1EADt kh\u1EA9u m\u1EDBi'\"\n        ></app-text-input>\n        <app-text-input [property]=\"f['confirmPassword']\"\n            class=\"col-12 md:col-12\"\n            [type]=\"INPUT_TYPE.PASSWORD\"\n            [labelValue]=\"'X\u00E1c nh\u1EADn m\u1EADt kh\u1EA9u m\u1EDBi'\"\n        ></app-text-input>\n    </div>\n    <div class=\"flex justify-content-center app-dialog-footer\">\n        <p-button icon=\"pi pi-times\" [label]=\"'common.label.quit' | translateAsync\" styleClass=\"p-button-outlined\" (onClick)=\"onClose()\"></p-button>\n        <p-button icon=\"pi pi-save\" [label]=\"'common.label.save' | translateAsync\" (onClick)=\"onSave()\"></p-button>\n    </div>\n</form>" }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.ActivatedRoute }, { type: i2.L10nTranslationService }, { type: i1$2.DynamicDialogRef }, { type: i1$2.DynamicDialogConfig }]; } });

class ImportErrorListComponent {
    constructor(_injector, dynamicDialogRef, config) {
        this._injector = _injector;
        this.dynamicDialogRef = dynamicDialogRef;
        this.config = config;
        this.errorList = [];
        this.errorList = config.data.errorList;
    }
    onCancel() {
        this.dynamicDialogRef.close();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ImportErrorListComponent, deps: [{ token: i0.Injector }, { token: i1$2.DynamicDialogRef }, { token: i1$2.DynamicDialogConfig }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: ImportErrorListComponent, selector: "app-import-error-list", ngImport: i0, template: "<p-table [value]=\"errorList\">\n    <ng-template pTemplate=\"header\">\n        <tr>\n            <th style=\"width: 5%;\">#</th>\n            <th style=\"width: 15%;\">D\u00F2ng</th>\n            <th style=\"width: 15%;\">C\u1ED9t</th>\n            <th style=\"width: 65%;\">L\u1ED7i</th>\n        </tr>\n    </ng-template>\n    <ng-template pTemplate=\"body\" let-item let-index=\"rowIndex\">\n        <tr>\n            <td><span class=\"p-column-title\">STT</span>{{ index + 1 }}</td>\n            <td><span class=\"p-column-title\">D\u00F2ng</span>{{ item.row }}</td>\n            <td><span class=\"p-column-title\">C\u1ED9t</span>{{ item.columnLabel }}</td>\n            <td><span class=\"p-column-title\">L\u1ED7i</span><span [innerHtml]='item?.description'></span></td>\n        </tr>\n    </ng-template>\n</p-table>\n<div class=\"pt-3 d-flex justify-content-center\">\n    <p-button icon=\"pi pi-times\" [label]=\"'common.label.cancel' | translateAsync\"\n        styleClass=\"p-button-outlined\" (onClick)=\"onCancel()\"></p-button>\n</div>", styles: [""], dependencies: [{ kind: "component", type: i4.Button, selector: "p-button", inputs: ["type", "iconPos", "icon", "badge", "label", "disabled", "loading", "loadingIcon", "style", "styleClass", "badgeClass", "ariaLabel"], outputs: ["onClick", "onFocus", "onBlur"] }, { kind: "directive", type: i3$1.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "component", type: i6$1.Table, selector: "p-table", inputs: ["frozenColumns", "frozenValue", "style", "styleClass", "tableStyle", "tableStyleClass", "paginator", "pageLinks", "rowsPerPageOptions", "alwaysShowPaginator", "paginatorPosition", "paginatorStyleClass", "paginatorDropdownAppendTo", "paginatorDropdownScrollHeight", "currentPageReportTemplate", "showCurrentPageReport", "showJumpToPageDropdown", "showJumpToPageInput", "showFirstLastIcon", "showPageLinks", "defaultSortOrder", "sortMode", "resetPageOnSort", "selectionMode", "selectionPageOnly", "contextMenuSelection", "contextMenuSelectionMode", "dataKey", "metaKeySelection", "rowSelectable", "rowTrackBy", "lazy", "lazyLoadOnInit", "compareSelectionBy", "csvSeparator", "exportFilename", "filters", "globalFilterFields", "filterDelay", "filterLocale", "expandedRowKeys", "editingRowKeys", "rowExpandMode", "scrollable", "scrollDirection", "rowGroupMode", "scrollHeight", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "virtualScrollDelay", "frozenWidth", "responsive", "contextMenu", "resizableColumns", "columnResizeMode", "reorderableColumns", "loading", "loadingIcon", "showLoader", "rowHover", "customSort", "showInitialSortBadge", "autoLayout", "exportFunction", "exportHeader", "stateKey", "stateStorage", "editMode", "groupRowsBy", "groupRowsByOrder", "responsiveLayout", "breakpoint", "paginatorLocale", "value", "columns", "first", "rows", "totalRecords", "sortField", "sortOrder", "multiSortMeta", "selection", "selectAll", "virtualRowHeight"], outputs: ["contextMenuSelectionChange", "selectAllChange", "selectionChange", "onRowSelect", "onRowUnselect", "onPage", "onSort", "onFilter", "onLazyLoad", "onRowExpand", "onRowCollapse", "onContextMenuSelect", "onColResize", "onColReorder", "onRowReorder", "onEditInit", "onEditComplete", "onEditCancel", "onHeaderCheckboxToggle", "sortFunction", "firstChange", "rowsChange", "onStateSave", "onStateRestore"] }, { kind: "pipe", type: i2.L10nTranslateAsyncPipe, name: "translateAsync" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ImportErrorListComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-import-error-list', template: "<p-table [value]=\"errorList\">\n    <ng-template pTemplate=\"header\">\n        <tr>\n            <th style=\"width: 5%;\">#</th>\n            <th style=\"width: 15%;\">D\u00F2ng</th>\n            <th style=\"width: 15%;\">C\u1ED9t</th>\n            <th style=\"width: 65%;\">L\u1ED7i</th>\n        </tr>\n    </ng-template>\n    <ng-template pTemplate=\"body\" let-item let-index=\"rowIndex\">\n        <tr>\n            <td><span class=\"p-column-title\">STT</span>{{ index + 1 }}</td>\n            <td><span class=\"p-column-title\">D\u00F2ng</span>{{ item.row }}</td>\n            <td><span class=\"p-column-title\">C\u1ED9t</span>{{ item.columnLabel }}</td>\n            <td><span class=\"p-column-title\">L\u1ED7i</span><span [innerHtml]='item?.description'></span></td>\n        </tr>\n    </ng-template>\n</p-table>\n<div class=\"pt-3 d-flex justify-content-center\">\n    <p-button icon=\"pi pi-times\" [label]=\"'common.label.cancel' | translateAsync\"\n        styleClass=\"p-button-outlined\" (onClick)=\"onCancel()\"></p-button>\n</div>" }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$2.DynamicDialogRef }, { type: i1$2.DynamicDialogConfig }]; } });

class BaseService {
    constructor(injector, baseUrl, baseObject) {
        this.injector = injector;
        this.baseUrl = baseUrl;
        this.baseObject = baseObject;
        this.httpClient = this.injector.get(HttpClient);
        this.helperService = this.injector.get(HelperService);
        this.commonUtil = this.injector.get(CommonUtils);
    }
    // tslint:disable-next-line: ban-types
    getBaseUrl() {
        return this.baseUrl;
    }
    search(data, event) {
        const searchData = this.commonUtil.convertData(data);
        if (event) {
            searchData._search = event;
        }
        const buildParams = this.commonUtil.buildParams(searchData);
        const url = `${this.baseUrl}/search?`;
        return this.getRequest(url, { params: buildParams });
    }
    getConfigSearch() {
        const url = `http://localhost:8685/v1/config-search/${this.baseObject}`;
        return this.getRequest(url);
    }
    /**
     * findAll
     */
    findAll() {
        const url = `${this.baseUrl}`;
        return this.getRequest(url);
    }
    /**
     * findAllByFillter
     */
    findAllByFillter(data) {
        const url = `${this.baseUrl}/filter`;
        return this.postRequestNoToast(url, this.commonUtil.convertData(data || {}));
    }
    /**
     * findAllByFillterAndGroupCode
     */
    findAllByFillterAndGroupCode(data, groupCode) {
        const url = `${this.baseUrl}/filter/${groupCode}`;
        return this.postRequestNoToast(url, this.commonUtil.convertData(data || {}));
    }
    /**
     * findOne
     * param id
     */
    findOne(id) {
        const url = `${this.baseUrl}/${id}`;
        return this.getRequest(url);
    }
    /**
     * saveOrUpdate
     */
    saveOrUpdate(item) {
        const url = `${this.baseUrl}`;
        return this.postRequest(url, this.commonUtil.convertData(item));
    }
    /**
     * saveOrUpdate
     */
    saveOrUpdateConfigSearch(item) {
        const url = `http://localhost:8685/v1/config-search/save-config`;
        return this.postRequestNoneProcessing(url, this.commonUtil.convertData(item));
    }
    /**
     * saveOrUpdateFormFile
     */
    saveOrUpdateFormFile(item) {
        const formdata = this.commonUtil.convertFormFile(item);
        const url = `${this.baseUrl}/form-data`;
        return this.postRequest(url, formdata);
    }
    /**
     * deleteById
     * param id
     */
    deleteById(id) {
        const url = `${this.baseUrl}/${id}`;
        return this.deleteRequest(url);
    }
    /**
     * deleteByListId
     * param id
     */
    deleteItemsSelected(data) {
        const url = `${this.baseUrl}/delete-all`;
        return this.postRequest(url, this.commonUtil.convertData(data));
    }
    /*******************************/
    /**
     * make get request
     */
    getRequest(url, options) {
        this.helperService.PROCESS_LOADER.next(true);
        return this.httpClient.get(url, options)
            .pipe(tap(// Log the result or error
        // Log the result or error
        res => {
            // this.helperService.MESSAGE_TOASTER.next(res);
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            // if (error.status !== 401 && error.status !== 403) {
            this.commonUtil.toastMessage('error', 'common.toast.haveError');
            // }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    /**
     * make post request
     */
    postRequest(url, data) {
        this.helperService.PROCESS_LOADER.next(true);
        return this.httpClient.post(url, data)
            .pipe(tap(// Log the result or error
        (res) => {
            if (res.type === 'WARNING') {
                this.commonUtil.toastMessage('warn', res.code, res.data);
            }
            else {
                this.commonUtil.toastMessage('success', res.code);
            }
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    postRequestNoToast(url, data) {
        this.helperService.PROCESS_LOADER.next(true);
        return this.httpClient.post(url, data)
            .pipe(tap(// Log the result or error
        (res) => {
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    /**
     * make post request for file
     */
    postRequestFile(url, data) {
        this.helperService.PROCESS_LOADER.next(true);
        return this.httpClient.post(url, data, { responseType: 'blob' })
            .pipe(tap(// Log the result or error
        // Log the result or error
        res => {
            // this.helperService.MESSAGE_TOASTER.next(res);
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    /**
     * make get request
     */
    deleteRequest(url) {
        this.helperService.PROCESS_LOADER.next(true);
        return this.httpClient.delete(url)
            .pipe(tap(// Log the result or error
        (res) => {
            if (res.type === 'WARN') {
                this.commonUtil.toastMessage('warn', res.code, res.data);
            }
            else if (res.type === 'SUCSSES') {
                this.commonUtil.toastMessage('success', res.code);
            }
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    /**
     * getRequestNoneProcessing
     */
    getRequestNoneProcessing(url, options) {
        return this.httpClient.get(url, options)
            .pipe(tap(// Log the result or error
        // Log the result or error
        res => {
            // this.helperService.MESSAGE_TOASTER.next(res);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
        }), catchError(this.handleError));
    }
    /**
     * postRequestNoneProcessing
     */
    postRequestNoneProcessing(url, data) {
        return this.httpClient.post(url, data)
            .pipe(tap(// Log the result or error
        // Log the result or error
        res => {
            // this.helperService.MESSAGE_TOASTER.next(res);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
        }), catchError(this.handleError));
    }
    /**
     * postRequestFileNoneProcessing
     */
    postRequestFileNoneProcessing(url, data) {
        this.helperService.PROCESS_LOADER.next(true);
        return this.httpClient.post(url, data, { responseType: 'blob' })
            .pipe(tap(// Log the result or error
        // Log the result or error
        res => {
            // this.helperService.MESSAGE_TOASTER.next(res);
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    /**
     * deleteRequestNoneProcessing
     */
    deleteRequestNoneProcessing(url) {
        return this.httpClient.delete(url)
            .pipe(tap(// Log the result or error
        // Log the result or error
        res => {
            // this.helperService.MESSAGE_TOASTER.next(res);
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    // tslint:disable-next-line: typedef
    handleError(error) {
        const errorMsg = (error.message) ? error.message :
            error.status ? `${error.status} - ${error.statusText}` : 'Server error';
        return throwError(errorMsg);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: BaseService, deps: [{ token: i0.Injector }, { token: String }, { token: String }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: BaseService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: BaseService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: String }, { type: String }]; } });

class ImportFormService extends BaseService {
    constructor(_injector) {
        super(_injector, '', '');
        this._injector = _injector;
    }
    downloadTemplate(service, urlEndpoint, extraValue) {
        const url = `${service.getBaseUrl()}/${urlEndpoint}`;
        // return this.getRequest(url);
        const buildParams = this.commonUtil.buildParams(extraValue || {});
        return this.getRequest(url, { params: buildParams, responseType: 'blob' });
    }
    //   public doDownloadFileByName(fileName: string) {
    //     const url = UrlConstant.API_VERSION + '/download/temp-file?fileName=' + fileName;
    //     return this.getRequestFile(url);
    //   }
    doImport(service, endpoint, data) {
        const url = `${service.getBaseUrl()}/${endpoint}`;
        return this.postRequest(url, data);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ImportFormService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ImportFormService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ImportFormService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });
``;

class DragDirective {
    constructor(sanitizer) {
        this.sanitizer = sanitizer;
        this.files = new EventEmitter();
        this.background = "#fff";
        this.borderColor = "#E9EAFF";
    }
    onDragOver(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        this.background = "#E9EAFF";
        this.borderColor = "#141ED2";
    }
    onDragLeave(evt) {
        evt.preventDefault();
        evt.stopPropagation();
        this.background = "#fff";
        this.borderColor = "#E9EAFF";
    }
    onDrop(evt) {
        if (!evt || !evt.dataTransfer) {
            return;
        }
        evt.preventDefault();
        evt.stopPropagation();
        this.background = '#fff';
        this.borderColor = "#E9EAFF";
        let files = [];
        for (let i = 0; i < evt.dataTransfer.files.length; i++) {
            const file = evt.dataTransfer.files[i];
            const url = this.sanitizer.bypassSecurityTrustUrl(window.URL.createObjectURL(file));
            files.push({ file, url });
        }
        if (files.length > 0) {
            this.files.emit(files);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: DragDirective, deps: [{ token: i1$3.DomSanitizer }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.5", type: DragDirective, selector: "[appDrag]", outputs: { files: "files" }, host: { listeners: { "dragover": "onDragOver($event)", "dragleave": "onDragLeave($event)", "drop": "onDrop($event)" }, properties: { "style.background": "this.background", "style.borderColor": "this.borderColor" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: DragDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: "[appDrag]"
                }]
        }], ctorParameters: function () { return [{ type: i1$3.DomSanitizer }]; }, propDecorators: { files: [{
                type: Output
            }], background: [{
                type: HostBinding,
                args: ["style.background"]
            }], borderColor: [{
                type: HostBinding,
                args: ["style.borderColor"]
            }], onDragOver: [{
                type: HostListener,
                args: ["dragover", ["$event"]]
            }], onDragLeave: [{
                type: HostListener,
                args: ["dragleave", ["$event"]]
            }], onDrop: [{
                type: HostListener,
                args: ['drop', ['$event']]
            }] } });

class ChooseFileImportDialogComponent extends BaseComponent {
    constructor(_injector, dynamicDialogRef, config, importFormService, dialogService) {
        super(_injector);
        this._injector = _injector;
        this.dynamicDialogRef = dynamicDialogRef;
        this.config = config;
        this.importFormService = importFormService;
        this.dialogService = dialogService;
        this.selectedFile = null;
        this.urlApiDownloadTemp = '';
        this.urlApiImport = '';
        this.extraValue = {};
        this.errorList = [];
        this.actionType = 'THEM_MOI';
        this.showActionType = false;
        this.fileName = null;
        this.urlApiDownloadTemp = config.data.urlApiDownloadTemp;
        this.urlApiImport = config.data.urlApiImport;
        this.fileName = config.data.fileName;
        this.serviceAPI = config.data.serviceAPI;
        this.extraValue = config.data.extraValue || {};
        this.showActionType = config.data.showActionType;
    }
    filesDropped(event) {
        if (event && event.length > 1) {
            this.commonUtil.toastMessage('warn', 'common.toast.importMultiFile');
        }
        // validate file type
        // for (let i = 0; i < event.length; i++) {
        //   const file = event[i];
        //   console.log(' 12>>', file.file.name)
        // }
        this.selectedFile = event[0].file;
    }
    onFileInput(event) {
        const element = event.currentTarget;
        let fileList = element.files;
        if (!fileList || fileList.length > 1) {
            this.commonUtil.toastMessage('warn', 'common.toast.importMultiFile');
        }
        if (fileList == null || fileList.length == 0) {
            return;
        }
        this.selectedFile = fileList[0];
    }
    onRemoveFile(event) {
        event.stopPropagation();
        this.selectedFile = null;
    }
    onCancel() {
        this.dynamicDialogRef.close();
    }
    onDownloadTemplate() {
        this.importFormService.downloadTemplate(this.serviceAPI, this.urlApiDownloadTemp, this.extraValue).subscribe(res => {
            // const reportFile = new Blob([res], { type: getTypeExport('xlsx') });
            saveAs(res, `${this.fileName || 'template'}.xlsx`);
        });
    }
    onImport() {
        if (!this.selectedFile) {
            return;
        }
        // let formData = new FormData();
        // formData.append('file', this.selectedFile);
        const formData = CommonUtils.convertFormFile({
            ...this.extraValue,
            file: this.selectedFile,
            actionType: this.actionType
        });
        this.importFormService.doImport(this.serviceAPI, this.urlApiImport, formData).subscribe(res => {
            if (!CommonUtils.isSuccessRequest(res)) {
                this.ref = this.dialogService.open(ImportErrorListComponent, {
                    header: 'Danh sách lỗi',
                    width: CommonUtils.setWidthDiaglog('40%'),
                    contentStyle: { overflow: 'auto' },
                    baseZIndex: 99999,
                    maximizable: true,
                    data: {
                        errorList: res.data.errorList
                    }
                });
            }
            else {
                this.dynamicDialogRef.close(true);
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ChooseFileImportDialogComponent, deps: [{ token: i0.Injector }, { token: i1$2.DynamicDialogRef }, { token: i1$2.DynamicDialogConfig }, { token: ImportFormService }, { token: i1$2.DialogService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: ChooseFileImportDialogComponent, selector: "app-choose-file-import-dialog", usesInheritance: true, ngImport: i0, template: "<div *ngIf=\"showActionType\">\n    <div class=\"field\">\n        <label class=\"font-semibold\">T\u00F9y ch\u1ECDn</label>\n        <div class=\"d-flex\">\n            <div class=\"field-checkbox mr-3\">\n                <p-radioButton [(ngModel)]=\"actionType\" inputId=\"THEM_MOI\" name=\"actionType\"\n                    [value]=\"'THEM_MOI'\"></p-radioButton>\n                <label for=\"THEM_MOI\" class=\"ml-2\">Th\u00EAm m\u1EDBi</label>\n            </div>\n            <div class=\"field-checkbox mr-3\">\n                <p-radioButton [(ngModel)]=\"actionType\" inputId=\"BO_SUNG\" name=\"actionType\"\n                    [value]=\"'BO_SUNG'\"></p-radioButton>\n                <label for=\"BO_SUNG\" class=\"ml-2\">B\u1ED5 sung</label>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"mb-2 p-2 download-template\">\n    <a (click)=\"onDownloadTemplate()\"><i class=\"fa fa-download mr-2\"></i> Download file m\u1EABu</a>\n</div>\n<div class=\"image-upload-wrap d-flex align-items-center\" appDrag (files)=\"filesDropped($event)\"\n    (click)=\"fileInput.click()\">\n    <input #fileInput class=\"file-upload-input\" type='file' hidden (change)=\"onFileInput($event)\" accept=\".xls,.xlsx\" />\n    <div class=\"drag-text text-center flex-1\">\n        <div>\n            <img src=\"assets/images/svg/excel-file.svg\" alt=\"Upload file\" width=\"70px\">\n        </div>\n        <ng-container *ngIf=\"!selectedFile\">\n            <h5>T\u1EA3i t\u1EC7p l\u00EAn ho\u1EB7c th\u1EA3 t\u1EC7p t\u1EA1i \u0111\u00E2y</h5>\n        </ng-container>\n        <ng-container *ngIf=\"!!selectedFile\">\n            <div>\n                <span>{{ selectedFile.name }}</span>\n            </div>\n            <div>\n                <button pButton pRipple label=\"X\u00F3a\" class=\"p-button-danger p-button-rounded\"\n                    (click)=\"onRemoveFile($event)\"></button>\n            </div>\n        </ng-container>\n    </div>\n</div>\n<div class=\"pt-3 d-flex justify-content-center\">\n    <p-button icon=\"pi pi-times\" [label]=\"'common.label.cancel' | translateAsync\" styleClass=\"p-button-outlined\"\n        class=\"mr-2\" (onClick)=\"onCancel()\"></p-button>\n    <p-button icon=\"pi pi-upload\" [label]=\"'common.label.import' | translateAsync\" (onClick)=\"onImport()\"></p-button>\n</div>", styles: ["::ng-deep app-choose-file-import-dialog .image-upload-wrap{height:200px;border:#E9EAFF dashed 1px;border-radius:8px}::ng-deep app-choose-file-import-dialog .image-upload-wrap:hover{background-color:#e9eaff!important;cursor:pointer;border:#141ED2 dashed 1px}::ng-deep app-choose-file-import-dialog .download-template{border:solid 1px #E9EAFF;border-radius:8px}::ng-deep app-choose-file-import-dialog .download-template a:hover{cursor:pointer;text-decoration:underline!important;color:#141ed2!important}\n"], dependencies: [{ kind: "directive", type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i4.ButtonDirective, selector: "[pButton]", inputs: ["iconPos", "loadingIcon", "label", "icon", "loading"] }, { kind: "component", type: i4.Button, selector: "p-button", inputs: ["type", "iconPos", "icon", "badge", "label", "disabled", "loading", "loadingIcon", "style", "styleClass", "badgeClass", "ariaLabel"], outputs: ["onClick", "onFocus", "onBlur"] }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i6$2.RadioButton, selector: "p-radioButton", inputs: ["value", "formControlName", "name", "disabled", "label", "tabindex", "inputId", "ariaLabelledBy", "ariaLabel", "style", "styleClass", "labelStyleClass"], outputs: ["onClick", "onFocus", "onBlur"] }, { kind: "directive", type: DragDirective, selector: "[appDrag]", outputs: ["files"] }, { kind: "directive", type: InputSpecialDirective, selector: "input[type=\"text\"],input[type=\"email\"],input[type=\"tel\"],input:not([othertype=\"url\"]),textarea", inputs: ["type", "othertype"] }, { kind: "pipe", type: i2.L10nTranslateAsyncPipe, name: "translateAsync" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ChooseFileImportDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-choose-file-import-dialog', template: "<div *ngIf=\"showActionType\">\n    <div class=\"field\">\n        <label class=\"font-semibold\">T\u00F9y ch\u1ECDn</label>\n        <div class=\"d-flex\">\n            <div class=\"field-checkbox mr-3\">\n                <p-radioButton [(ngModel)]=\"actionType\" inputId=\"THEM_MOI\" name=\"actionType\"\n                    [value]=\"'THEM_MOI'\"></p-radioButton>\n                <label for=\"THEM_MOI\" class=\"ml-2\">Th\u00EAm m\u1EDBi</label>\n            </div>\n            <div class=\"field-checkbox mr-3\">\n                <p-radioButton [(ngModel)]=\"actionType\" inputId=\"BO_SUNG\" name=\"actionType\"\n                    [value]=\"'BO_SUNG'\"></p-radioButton>\n                <label for=\"BO_SUNG\" class=\"ml-2\">B\u1ED5 sung</label>\n            </div>\n        </div>\n    </div>\n</div>\n<div class=\"mb-2 p-2 download-template\">\n    <a (click)=\"onDownloadTemplate()\"><i class=\"fa fa-download mr-2\"></i> Download file m\u1EABu</a>\n</div>\n<div class=\"image-upload-wrap d-flex align-items-center\" appDrag (files)=\"filesDropped($event)\"\n    (click)=\"fileInput.click()\">\n    <input #fileInput class=\"file-upload-input\" type='file' hidden (change)=\"onFileInput($event)\" accept=\".xls,.xlsx\" />\n    <div class=\"drag-text text-center flex-1\">\n        <div>\n            <img src=\"assets/images/svg/excel-file.svg\" alt=\"Upload file\" width=\"70px\">\n        </div>\n        <ng-container *ngIf=\"!selectedFile\">\n            <h5>T\u1EA3i t\u1EC7p l\u00EAn ho\u1EB7c th\u1EA3 t\u1EC7p t\u1EA1i \u0111\u00E2y</h5>\n        </ng-container>\n        <ng-container *ngIf=\"!!selectedFile\">\n            <div>\n                <span>{{ selectedFile.name }}</span>\n            </div>\n            <div>\n                <button pButton pRipple label=\"X\u00F3a\" class=\"p-button-danger p-button-rounded\"\n                    (click)=\"onRemoveFile($event)\"></button>\n            </div>\n        </ng-container>\n    </div>\n</div>\n<div class=\"pt-3 d-flex justify-content-center\">\n    <p-button icon=\"pi pi-times\" [label]=\"'common.label.cancel' | translateAsync\" styleClass=\"p-button-outlined\"\n        class=\"mr-2\" (onClick)=\"onCancel()\"></p-button>\n    <p-button icon=\"pi pi-upload\" [label]=\"'common.label.import' | translateAsync\" (onClick)=\"onImport()\"></p-button>\n</div>", styles: ["::ng-deep app-choose-file-import-dialog .image-upload-wrap{height:200px;border:#E9EAFF dashed 1px;border-radius:8px}::ng-deep app-choose-file-import-dialog .image-upload-wrap:hover{background-color:#e9eaff!important;cursor:pointer;border:#141ED2 dashed 1px}::ng-deep app-choose-file-import-dialog .download-template{border:solid 1px #E9EAFF;border-radius:8px}::ng-deep app-choose-file-import-dialog .download-template a:hover{cursor:pointer;text-decoration:underline!important;color:#141ed2!important}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$2.DynamicDialogRef }, { type: i1$2.DynamicDialogConfig }, { type: ImportFormService }, { type: i1$2.DialogService }]; } });

class EmployeePickerDialogComponent extends BaseComponent {
    constructor(_injector, dialogService, 
    // public employeeService: EmployeeService,
    config, dynamicDialogRef) {
        super(_injector);
        this._injector = _injector;
        this.dialogService = dialogService;
        this.config = config;
        this.dynamicDialogRef = dynamicDialogRef;
        this.code = '';
        this.fullname = '';
        this.dataTable = {};
        this.selectedEmployee = null;
        this.doSearch();
    }
    doSearch(event) {
        if (!event) {
            event = { rows: 10, resetTable: true };
        }
        this.config.data?.employeeService.search({ code: this.code, fullname: this.fullname }, event)
            .subscribe((res) => {
            const source = res?.data || {};
            this.dataTable = source;
        });
    }
    onRowSelect(event) {
        this.dynamicDialogRef.close(event.data);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: EmployeePickerDialogComponent, deps: [{ token: i0.Injector }, { token: i1$2.DialogService }, { token: i1$2.DynamicDialogConfig }, { token: i1$2.DynamicDialogRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: EmployeePickerDialogComponent, selector: "app-employee-picker-dialog", usesInheritance: true, ngImport: i0, template: "<div>\r\n    <div class=\"d-flex\">\r\n        <form class=\"p-inputgroup\">\r\n            <input [(ngModel)]=\"code\" name=\"code\" class=\"flex-1\" type=\"text\" pInputText\r\n                [placeholder]=\"'S\u1ED1 hi\u1EC7u'\" />\r\n            <input [(ngModel)]=\"fullname\" name=\"fullname\" class=\"flex-1\" type=\"text\" pInputText\r\n                [placeholder]=\"'H\u1ECD v\u00E0 t\u00EAn'\" />\r\n            <button type=\"submit\" pButton icon=\"pi pi-search\" styleClass=\"p-button-warn\"\r\n                [pTooltip]=\"'common.label.search' | translateAsync\" (click)=\"doSearch()\"></button>\r\n        </form>\r\n    </div>\r\n    <div class=\"mt-2\">\r\n        <p-table [value]=\"dataTable?.data\" [paginator]=\"dataTable?.data && dataTable?.data?.length\" [rows]=\"10\"\r\n        styleClass=\"p-datatable-sm\" [lazy]=\"true\"\r\n        [totalRecords]=\"dataTable?.recordsTotal\" (onLazyLoad)=\"doSearch($event)\" [showCurrentPageReport]=\"true\"\r\n        currentPageReportTemplate=\"T\u00ECm th\u1EA5y {totalRecords} k\u1EBFt qu\u1EA3, hi\u1EC3n th\u1ECB t\u1EEB {first} - {last}\"\r\n        [scrollable]=\"true\" scrollHeight=\"450px\" pageLinks=\"1\"\r\n        selectionMode=\"single\" [(selection)]=\"selectedEmployee\" dataKey=\"code\" (onRowSelect)=\"onRowSelect($event)\">\r\n        <ng-template pTemplate=\"header\">\r\n            <tr>\r\n                <th style=\"width: 5%\" >STT</th>\r\n                <th style=\"width: 20%\">\r\n                    S\u1ED1 hi\u1EC7u\r\n                </th>\r\n                <th style=\"width: 30%\">\r\n                    H\u1ECD v\u00E0 t\u00EAn\r\n                </th>\r\n                <!-- <th style=\"width: 15%\">\r\n                   Ng\u00E0y sinh\r\n                </th>\r\n                <th style=\"width: 15%\">\r\n                    Gi\u1EDBi t\u00EDnh\r\n                 </th> -->\r\n                 <th style=\"width: 15%\">\r\n                    \u0110\u01A1n v\u1ECB\r\n                 </th>\r\n            </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"body\" let-item let-index=\"rowIndex\">\r\n            <tr [pSelectableRow]=\"item\">\r\n                <td>{{ index + 1 }}</td>\r\n                <td>{{ item.code }}</td>\r\n                <td>{{ item.fullname }}</td>\r\n                <!-- <td>{{ item.dateOfBirth | date:'dd/MM/yyyy' }}</td>\r\n                <td>{{ item.gender == 1 ? 'Nam' : 'N\u1EEF' }}</td> -->\r\n                <td>{{ item.organizationName }}</td>\r\n            </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"emptymessage\">\r\n            <tr>\r\n                <td colspan=\"6\">{{ 'common.table.dataNotFound' | translateAsync }}</td>\r\n            </tr>\r\n        </ng-template>\r\n    </p-table>\r\n    </div>\r\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i4.ButtonDirective, selector: "[pButton]", inputs: ["iconPos", "loadingIcon", "label", "icon", "loading"] }, { kind: "directive", type: i3$1.PrimeTemplate, selector: "[pTemplate]", inputs: ["type", "pTemplate"] }, { kind: "directive", type: i5$1.Tooltip, selector: "[pTooltip]", inputs: ["tooltipPosition", "tooltipEvent", "appendTo", "positionStyle", "tooltipStyleClass", "tooltipZIndex", "escape", "showDelay", "hideDelay", "life", "positionTop", "positionLeft", "autoHide", "fitContent", "hideOnEscape", "pTooltip", "tooltipDisabled", "tooltipOptions"] }, { kind: "component", type: i6$1.Table, selector: "p-table", inputs: ["frozenColumns", "frozenValue", "style", "styleClass", "tableStyle", "tableStyleClass", "paginator", "pageLinks", "rowsPerPageOptions", "alwaysShowPaginator", "paginatorPosition", "paginatorStyleClass", "paginatorDropdownAppendTo", "paginatorDropdownScrollHeight", "currentPageReportTemplate", "showCurrentPageReport", "showJumpToPageDropdown", "showJumpToPageInput", "showFirstLastIcon", "showPageLinks", "defaultSortOrder", "sortMode", "resetPageOnSort", "selectionMode", "selectionPageOnly", "contextMenuSelection", "contextMenuSelectionMode", "dataKey", "metaKeySelection", "rowSelectable", "rowTrackBy", "lazy", "lazyLoadOnInit", "compareSelectionBy", "csvSeparator", "exportFilename", "filters", "globalFilterFields", "filterDelay", "filterLocale", "expandedRowKeys", "editingRowKeys", "rowExpandMode", "scrollable", "scrollDirection", "rowGroupMode", "scrollHeight", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "virtualScrollDelay", "frozenWidth", "responsive", "contextMenu", "resizableColumns", "columnResizeMode", "reorderableColumns", "loading", "loadingIcon", "showLoader", "rowHover", "customSort", "showInitialSortBadge", "autoLayout", "exportFunction", "exportHeader", "stateKey", "stateStorage", "editMode", "groupRowsBy", "groupRowsByOrder", "responsiveLayout", "breakpoint", "paginatorLocale", "value", "columns", "first", "rows", "totalRecords", "sortField", "sortOrder", "multiSortMeta", "selection", "selectAll", "virtualRowHeight"], outputs: ["contextMenuSelectionChange", "selectAllChange", "selectionChange", "onRowSelect", "onRowUnselect", "onPage", "onSort", "onFilter", "onLazyLoad", "onRowExpand", "onRowCollapse", "onContextMenuSelect", "onColResize", "onColReorder", "onRowReorder", "onEditInit", "onEditComplete", "onEditCancel", "onHeaderCheckboxToggle", "sortFunction", "firstChange", "rowsChange", "onStateSave", "onStateRestore"] }, { kind: "directive", type: i6$1.SelectableRow, selector: "[pSelectableRow]", inputs: ["pSelectableRow", "pSelectableRowIndex", "pSelectableRowDisabled"] }, { kind: "directive", type: i6.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i6.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { kind: "directive", type: i7.InputText, selector: "[pInputText]" }, { kind: "directive", type: InputSpecialDirective, selector: "input[type=\"text\"],input[type=\"email\"],input[type=\"tel\"],input:not([othertype=\"url\"]),textarea", inputs: ["type", "othertype"] }, { kind: "directive", type: InputTrimDirective, selector: "input[type=\"text\"], textarea[]", inputs: ["trim", "type"] }, { kind: "pipe", type: i2.L10nTranslateAsyncPipe, name: "translateAsync" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: EmployeePickerDialogComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-employee-picker-dialog', template: "<div>\r\n    <div class=\"d-flex\">\r\n        <form class=\"p-inputgroup\">\r\n            <input [(ngModel)]=\"code\" name=\"code\" class=\"flex-1\" type=\"text\" pInputText\r\n                [placeholder]=\"'S\u1ED1 hi\u1EC7u'\" />\r\n            <input [(ngModel)]=\"fullname\" name=\"fullname\" class=\"flex-1\" type=\"text\" pInputText\r\n                [placeholder]=\"'H\u1ECD v\u00E0 t\u00EAn'\" />\r\n            <button type=\"submit\" pButton icon=\"pi pi-search\" styleClass=\"p-button-warn\"\r\n                [pTooltip]=\"'common.label.search' | translateAsync\" (click)=\"doSearch()\"></button>\r\n        </form>\r\n    </div>\r\n    <div class=\"mt-2\">\r\n        <p-table [value]=\"dataTable?.data\" [paginator]=\"dataTable?.data && dataTable?.data?.length\" [rows]=\"10\"\r\n        styleClass=\"p-datatable-sm\" [lazy]=\"true\"\r\n        [totalRecords]=\"dataTable?.recordsTotal\" (onLazyLoad)=\"doSearch($event)\" [showCurrentPageReport]=\"true\"\r\n        currentPageReportTemplate=\"T\u00ECm th\u1EA5y {totalRecords} k\u1EBFt qu\u1EA3, hi\u1EC3n th\u1ECB t\u1EEB {first} - {last}\"\r\n        [scrollable]=\"true\" scrollHeight=\"450px\" pageLinks=\"1\"\r\n        selectionMode=\"single\" [(selection)]=\"selectedEmployee\" dataKey=\"code\" (onRowSelect)=\"onRowSelect($event)\">\r\n        <ng-template pTemplate=\"header\">\r\n            <tr>\r\n                <th style=\"width: 5%\" >STT</th>\r\n                <th style=\"width: 20%\">\r\n                    S\u1ED1 hi\u1EC7u\r\n                </th>\r\n                <th style=\"width: 30%\">\r\n                    H\u1ECD v\u00E0 t\u00EAn\r\n                </th>\r\n                <!-- <th style=\"width: 15%\">\r\n                   Ng\u00E0y sinh\r\n                </th>\r\n                <th style=\"width: 15%\">\r\n                    Gi\u1EDBi t\u00EDnh\r\n                 </th> -->\r\n                 <th style=\"width: 15%\">\r\n                    \u0110\u01A1n v\u1ECB\r\n                 </th>\r\n            </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"body\" let-item let-index=\"rowIndex\">\r\n            <tr [pSelectableRow]=\"item\">\r\n                <td>{{ index + 1 }}</td>\r\n                <td>{{ item.code }}</td>\r\n                <td>{{ item.fullname }}</td>\r\n                <!-- <td>{{ item.dateOfBirth | date:'dd/MM/yyyy' }}</td>\r\n                <td>{{ item.gender == 1 ? 'Nam' : 'N\u1EEF' }}</td> -->\r\n                <td>{{ item.organizationName }}</td>\r\n            </tr>\r\n        </ng-template>\r\n        <ng-template pTemplate=\"emptymessage\">\r\n            <tr>\r\n                <td colspan=\"6\">{{ 'common.table.dataNotFound' | translateAsync }}</td>\r\n            </tr>\r\n        </ng-template>\r\n    </p-table>\r\n    </div>\r\n</div>" }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$2.DialogService }, { type: i1$2.DynamicDialogConfig }, { type: i1$2.DynamicDialogRef }]; } });

class EmployeePickerComponent extends BaseComponent {
    constructor(_injector, dialogService, translate) {
        super(_injector);
        this._injector = _injector;
        this.dialogService = dialogService;
        this.translate = translate;
        // formControl of this input
        this.property = new BaseControl();
        this.onChange = new EventEmitter();
        this.dataTable = {};
        this.empName = '';
    }
    /**
     * ngOnInit
     */
    ngOnInit() {
    }
    /**
     * ngAfterViewInit
     */
    ngAfterViewInit() {
    }
    onSelect() {
        this.ref = this.dialogService.open(EmployeePickerDialogComponent, {
            header: 'Chọn cán bộ/học viên',
            width: CommonUtils.setWidthDiaglog('40%'),
            contentStyle: { overflow: 'auto' },
            baseZIndex: 99999,
            maximizable: true,
            data: {
                employeeService: this.employeeService
            }
        });
        this.ref.onClose.subscribe((node) => {
            if (node) {
                this.empName = `${node.code} - ${node.fullname}`;
                this.property.setValue(node.id);
                // callback on chose item
                this.onChange.emit(node);
            }
        });
    }
    /**
     * ngOnChanges
     */
    ngOnChanges() {
        this.onChangeOrgId();
    }
    onChangeOrgId() {
        if (!this.property) {
            return;
        }
        if (!this.property.value || this.property.value == 0) {
            return;
        }
        // thuc hien lay ten de hien thi
        this.employeeService.findOne(this.property.value)
            .subscribe((res) => {
            const data = res.data;
            if (data) {
                this.empName = `${data.code} - ${data.fullname}`;
            }
        });
    }
    onClear() {
        this.empName = '';
        this.property.setValue(null);
        this.onChange.emit(null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: EmployeePickerComponent, deps: [{ token: i0.Injector }, { token: i1$2.DialogService }, { token: i2.L10nTranslationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: EmployeePickerComponent, selector: "app-employee-picker", inputs: { property: "property", labelValue: "labelValue", employeeService: "employeeService" }, outputs: { onChange: "onChange" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div class=\"field\">\r\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\r\n    <div class=\"p-inputgroup w-full\">\r\n        <input class=\"flex-1\" type=\"text\" pInputText [(ngModel)]=\"empName\" [pTooltip]=\"empName\" (click)=\"onSelect()\"/>\r\n        <button\r\n            type=\"button\"\r\n            pButton\r\n            icon=\"pi pi-times\"\r\n            class=\"p-button-danger\"\r\n            [pTooltip]=\"'common.orgSelector.clear' | translateAsync\"\r\n            (click)=\"onClear()\"></button>\r\n        <button\r\n            type=\"button\"\r\n            pButton\r\n            icon=\"pi pi-check\"\r\n            class=\"p-button-info\"\r\n            [pTooltip]=\"'common.orgSelector.select' | translateAsync\"\r\n            (click)=\"onSelect()\"></button>\r\n    </div>\r\n    <app-control-messages [control]=\"property\"></app-control-messages>\r\n</div>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i4.ButtonDirective, selector: "[pButton]", inputs: ["iconPos", "loadingIcon", "label", "icon", "loading"] }, { kind: "directive", type: i5$1.Tooltip, selector: "[pTooltip]", inputs: ["tooltipPosition", "tooltipEvent", "appendTo", "positionStyle", "tooltipStyleClass", "tooltipZIndex", "escape", "showDelay", "hideDelay", "life", "positionTop", "positionLeft", "autoHide", "fitContent", "hideOnEscape", "pTooltip", "tooltipDisabled", "tooltipOptions"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i7.InputText, selector: "[pInputText]" }, { kind: "component", type: ControlMessagesComponent, selector: "app-control-messages", inputs: ["control", "labelName"] }, { kind: "directive", type: InputSpecialDirective, selector: "input[type=\"text\"],input[type=\"email\"],input[type=\"tel\"],input:not([othertype=\"url\"]),textarea", inputs: ["type", "othertype"] }, { kind: "directive", type: InputTrimDirective, selector: "input[type=\"text\"], textarea[]", inputs: ["trim", "type"] }, { kind: "pipe", type: i2.L10nTranslateAsyncPipe, name: "translateAsync" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: EmployeePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-employee-picker', template: "<div class=\"field\">\r\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\r\n    <div class=\"p-inputgroup w-full\">\r\n        <input class=\"flex-1\" type=\"text\" pInputText [(ngModel)]=\"empName\" [pTooltip]=\"empName\" (click)=\"onSelect()\"/>\r\n        <button\r\n            type=\"button\"\r\n            pButton\r\n            icon=\"pi pi-times\"\r\n            class=\"p-button-danger\"\r\n            [pTooltip]=\"'common.orgSelector.clear' | translateAsync\"\r\n            (click)=\"onClear()\"></button>\r\n        <button\r\n            type=\"button\"\r\n            pButton\r\n            icon=\"pi pi-check\"\r\n            class=\"p-button-info\"\r\n            [pTooltip]=\"'common.orgSelector.select' | translateAsync\"\r\n            (click)=\"onSelect()\"></button>\r\n    </div>\r\n    <app-control-messages [control]=\"property\"></app-control-messages>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1$2.DialogService }, { type: i2.L10nTranslationService }]; }, propDecorators: { property: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], employeeService: [{
                type: Input
            }], onChange: [{
                type: Output
            }] } });

class InputSwitchComponent {
    constructor() {
        // formControl of this input
        this.property = new BaseControl();
        this.labelValue = '';
        this.onChange = new EventEmitter();
    }
    _onChange(event) {
        this.onChange.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: InputSwitchComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: InputSwitchComponent, selector: "app-input-switch", inputs: { property: "property", labelValue: "labelValue" }, outputs: { onChange: "onChange" }, ngImport: i0, template: "<div class=\"field\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\n    <div class=\"d-flex\">\n        <p-inputSwitch [formControl]=\"property\" (onChange)=\"_onChange($event)\"></p-inputSwitch>\n    </div>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i3$2.InputSwitch, selector: "p-inputSwitch", inputs: ["style", "styleClass", "tabindex", "inputId", "name", "disabled", "readonly", "trueValue", "falseValue", "ariaLabel", "ariaLabelledBy"], outputs: ["onChange"] }, { kind: "component", type: ControlMessagesComponent, selector: "app-control-messages", inputs: ["control", "labelName"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: InputSwitchComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-input-switch', template: "<div class=\"field\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\n    <div class=\"d-flex\">\n        <p-inputSwitch [formControl]=\"property\" (onChange)=\"_onChange($event)\"></p-inputSwitch>\n    </div>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>" }]
        }], propDecorators: { property: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], onChange: [{
                type: Output
            }] } });

class MultiSelectComponent {
    constructor() {
        // formControl of this input
        this.property = new BaseControl();
        this.options = [];
        this.optionLabel = '';
        this.optionValue = '';
        this.labelValue = '';
        this.showClear = true;
        this.onChange = new EventEmitter();
    }
    _onChange(event) {
        this.onChange.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: MultiSelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: MultiSelectComponent, selector: "app-multi-select", inputs: { property: "property", options: "options", optionLabel: "optionLabel", optionValue: "optionValue", labelValue: "labelValue", showClear: "showClear" }, outputs: { onChange: "onChange" }, ngImport: i0, template: "<div class=\"field\">\r\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\r\n    <p-multiSelect\r\n        [formControl]=\"property\"\r\n        [options]=\"options\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [filter]=\"true\"\r\n        [filterBy]=\"optionLabel\"\r\n        [showClear]=\"showClear\"\r\n        display=\"chip\"\r\n        appendTo=\"body\"\r\n        class=\"inline-block w-full\"\r\n        emptyFilterMessage=\"Kh\u00F4ng t\u00ECm th\u1EA5y d\u1EEF li\u1EC7u\"\r\n        emptyMessage=\"Kh\u00F4ng t\u00ECm th\u1EA5y d\u1EEF li\u1EC7u\"\r\n        [displaySelectedLabel]=\"true\"\r\n        (onChange)=\"_onChange($event)\"></p-multiSelect>\r\n    <app-control-messages [control]=\"property\"></app-control-messages>\r\n</div>", styles: ["::ng-deep app-multi-select .p-multiselect{width:100%}::ng-deep app-multi-select .p-multiselect-token{margin-right:4px}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i3$3.MultiSelect, selector: "p-multiSelect", inputs: ["style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "label", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "filterBy", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "defaultLabel", "placeholder", "options", "filterValue", "itemSize", "selectionLimit"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide", "onLazyLoad", "onRemove"] }, { kind: "component", type: ControlMessagesComponent, selector: "app-control-messages", inputs: ["control", "labelName"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: MultiSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-multi-select', template: "<div class=\"field\">\r\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\r\n    <p-multiSelect\r\n        [formControl]=\"property\"\r\n        [options]=\"options\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [filter]=\"true\"\r\n        [filterBy]=\"optionLabel\"\r\n        [showClear]=\"showClear\"\r\n        display=\"chip\"\r\n        appendTo=\"body\"\r\n        class=\"inline-block w-full\"\r\n        emptyFilterMessage=\"Kh\u00F4ng t\u00ECm th\u1EA5y d\u1EEF li\u1EC7u\"\r\n        emptyMessage=\"Kh\u00F4ng t\u00ECm th\u1EA5y d\u1EEF li\u1EC7u\"\r\n        [displaySelectedLabel]=\"true\"\r\n        (onChange)=\"_onChange($event)\"></p-multiSelect>\r\n    <app-control-messages [control]=\"property\"></app-control-messages>\r\n</div>", styles: ["::ng-deep app-multi-select .p-multiselect{width:100%}::ng-deep app-multi-select .p-multiselect-token{margin-right:4px}\n"] }]
        }], propDecorators: { property: [{
                type: Input
            }], options: [{
                type: Input
            }], optionLabel: [{
                type: Input
            }], optionValue: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], showClear: [{
                type: Input
            }], onChange: [{
                type: Output
            }] } });

class RadioButtonComponent {
    constructor() {
        // formControl of this input
        this.property = new BaseControl();
        this.options = [];
        this.optionLabel = '';
        this.optionValue = '';
        this.labelValue = '';
        this.onChange = new EventEmitter();
    }
    _onClick(event) {
        this.onChange.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: RadioButtonComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: RadioButtonComponent, selector: "app-radio-button", inputs: { property: "property", options: "options", optionLabel: "optionLabel", optionValue: "optionValue", labelValue: "labelValue" }, outputs: { onChange: "onChange" }, ngImport: i0, template: "<div class=\"field\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\n    <div class=\"d-flex\">\n        <div *ngFor=\"let category of options\" class=\"field-checkbox mr-3\">\n            <p-radioButton (onClick)=\"_onClick($event)\" [inputId]=\"category[optionValue]\" [name]=\"property.propertyName\" [value]=\"category[optionValue]\" [formControl]=\"property\"></p-radioButton>\n            <label [for]=\"category[optionValue]\" class=\"ml-2\">{{ category[optionLabel] }}</label>\n        </div>\n    </div>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i6$2.RadioButton, selector: "p-radioButton", inputs: ["value", "formControlName", "name", "disabled", "label", "tabindex", "inputId", "ariaLabelledBy", "ariaLabel", "style", "styleClass", "labelStyleClass"], outputs: ["onClick", "onFocus", "onBlur"] }, { kind: "component", type: ControlMessagesComponent, selector: "app-control-messages", inputs: ["control", "labelName"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: RadioButtonComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-radio-button', template: "<div class=\"field\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\n    <div class=\"d-flex\">\n        <div *ngFor=\"let category of options\" class=\"field-checkbox mr-3\">\n            <p-radioButton (onClick)=\"_onClick($event)\" [inputId]=\"category[optionValue]\" [name]=\"property.propertyName\" [value]=\"category[optionValue]\" [formControl]=\"property\"></p-radioButton>\n            <label [for]=\"category[optionValue]\" class=\"ml-2\">{{ category[optionLabel] }}</label>\n        </div>\n    </div>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>" }]
        }], propDecorators: { property: [{
                type: Input
            }], options: [{
                type: Input
            }], optionLabel: [{
                type: Input
            }], optionValue: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], onChange: [{
                type: Output
            }] } });

class SharedPluginComponent {
    constructor(translate, helperService, messageService, confirmationService) {
        this.translate = translate;
        this.helperService = helperService;
        this.messageService = messageService;
        this.confirmationService = confirmationService;
        this.helperService.MESSAGE_TOASTER.subscribe(res => {
            if (res) {
                const summary = this.translate.translate('common.toast.messageSummary');
                const detail = this.translate.translate(res.code || 'empty', res.value || { data: '' });
                this.messageService.add({ severity: res.severity, summary, detail });
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: SharedPluginComponent, deps: [{ token: i2.L10nTranslationService }, { token: HelperService }, { token: i3$1.MessageService }, { token: i3$1.ConfirmationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: SharedPluginComponent, selector: "shared-plugin", providers: [ConfirmationService, MessageService], ngImport: i0, template: "<p-toast position=\"bottom-right\" [baseZIndex]=\"10000\"></p-toast>\n", dependencies: [{ kind: "component", type: i4$1.Toast, selector: "p-toast", inputs: ["key", "autoZIndex", "baseZIndex", "life", "style", "styleClass", "position", "preventOpenDuplicates", "preventDuplicates", "showTransformOptions", "hideTransformOptions", "showTransitionOptions", "hideTransitionOptions", "breakpoints"], outputs: ["onClose"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: SharedPluginComponent, decorators: [{
            type: Component,
            args: [{ selector: 'shared-plugin', providers: [ConfirmationService, MessageService], template: "<p-toast position=\"bottom-right\" [baseZIndex]=\"10000\"></p-toast>\n" }]
        }], ctorParameters: function () { return [{ type: i2.L10nTranslationService }, { type: HelperService }, { type: i3$1.MessageService }, { type: i3$1.ConfirmationService }]; } });

class HasNotPermissionDirective {
    constructor(element, templateRef, viewContainer) {
        this.element = element;
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
    }
    set hasNotPermission(value) {
        this._value = value;
        this.updateView(this._value);
    }
    ngOnInit() {
    }
    updateView(value) {
        // if (!value[0].permissions || value[0].permissions.length <= 0) {
        //   this.viewContainer.createEmbeddedView(this.templateRef);
        // } else {
        //   const rsSearch = value[0].permissions.findIndex((x: any) => x.operationCode === CommonUtils.getPermissionCode(value[1]));
        //   if (rsSearch >= 0) {
        //     this.viewContainer.clear();
        //   } else {
        //     this.viewContainer.createEmbeddedView(this.templateRef);
        //   }
        // }
        if (!CommonUtils.havePermission(value[1], value[2])) {
            this.viewContainer.createEmbeddedView(this.templateRef);
        }
        else {
            this.viewContainer.clear();
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: HasNotPermissionDirective, deps: [{ token: i0.ElementRef }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.5", type: HasNotPermissionDirective, selector: "[hasNotPermission]", inputs: { hasNotPermission: "hasNotPermission" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: HasNotPermissionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[hasNotPermission]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; }, propDecorators: { hasNotPermission: [{
                type: Input
            }] } });

class HasPermissionDirective {
    constructor(element, templateRef, viewContainer) {
        this.element = element;
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
    }
    set hasPermission(value) {
        this._value = value;
        this.updateView(this._value);
    }
    ngOnInit() {
    }
    updateView(value) {
        if (value[2]) { //resource key
            if (CommonUtils.havePermission(value[1], value[2])) {
                this.viewContainer.createEmbeddedView(this.templateRef);
            }
            else {
                this.viewContainer.clear();
            }
        }
        else {
            if (!value[0].permissions || value[0].permissions.length <= 0) {
                this.viewContainer.clear();
            }
            else {
                const rsSearch = value[0].permissions.findIndex((x) => x.operationCode === CommonUtils.getPermissionCode(value[1]));
                if (rsSearch < 0) {
                    this.viewContainer.clear();
                }
                else {
                    this.viewContainer.createEmbeddedView(this.templateRef);
                }
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: HasPermissionDirective, deps: [{ token: i0.ElementRef }, { token: i0.TemplateRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.5", type: HasPermissionDirective, selector: "[hasPermission]", inputs: { hasPermission: "hasPermission" }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: HasPermissionDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[hasPermission]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.TemplateRef }, { type: i0.ViewContainerRef }]; }, propDecorators: { hasPermission: [{
                type: Input
            }] } });

class LanguageBean {
}

class Filter {
    constructor(init) {
        Object.assign(this, init);
    }
}
class Order {
    constructor(init) {
        Object.assign(this, init);
    }
}
class Page {
    constructor(init) {
        Object.assign(this, init);
    }
}
class FilterModel {
    constructor(init) {
        Object.assign(this, init);
    }
}

class SysPropertyDetailBean {
    constructor(_sysProperty, _marketCompany) {
        this.propertyId = _sysProperty.propertyId;
        this.propertyCode = _sysProperty.code;
        this.propertyName = _sysProperty.name;
        this.actionForm = _sysProperty.actionForm;
        this.resourceCode = _sysProperty.resourceCode;
        this.tableName = _sysProperty.tableName;
        this.columnName = _sysProperty.columnName;
        this.marketCompanyId = _marketCompany.marketCompanyId;
        this.marketCompanyCode = _marketCompany.code;
        this.marketCompanyName = _marketCompany.name;
    }
}

class UserPermission {
}
class UserMenu {
}
class UserToken {
}

/*
 * Public API Surface of angularx-score
 */

class DatePickerComponent {
    constructor(controlContainer, primengConfig) {
        this.controlContainer = controlContainer;
        this.primengConfig = primengConfig;
        // formControl of this input
        this.property = new BaseControl();
        this.dateFormat = 'dd/mm/yy';
        this.onChanged = new EventEmitter();
        this.dateValue = null;
        this.oldPos = 0;
        this.dateMask = '';
        // TODO
        this.primengConfig.setTranslation({
            dayNames: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
            dayNamesShort: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
            dayNamesMin: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
            monthNames: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'],
            monthNamesShort: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'],
            today: 'Hôm nay',
            clear: 'Làm mới'
        });
    }
    ngOnChanges() {
        if (this.property.value) {
            this.dateValue = new Date(this.property.value);
        }
        else {
            this.dateValue = null;
        }
    }
    onBlur(event) {
        if (!this.dateValue && event.currentTarget.value !== '') {
            // this.helperService.APP_TOAST_MESSAGE.next({ type: 'ERROR', code: 'dateInvalid', message: null });
        }
        // Xu ly neu nguoi dung xoa het gia tri ngay thang
        if (event.currentTarget.value === '' && this.dateValue !== null) {
            this.dateValue = null;
            this.onInput(null);
        }
        if (event.currentTarget.value === '' && this.dateValue == null) {
            this.onChanged.emit(event);
        }
    }
    onInput(event) {
        let parseFormat = this.initDateFormatPosition(CommonUtils.getDateFormat());
        if (this.dateFormat == 'mm/yy') {
            parseFormat = this.initDateFormatPosition('MM/yyyy');
        }
        if (event) {
            let cursorPosition = event.target.selectionEnd;
            // if (event.inputType === 'deleteContentBackward' && parseFormat.isBackward(cursorPosition)) {
            //   event.target.value = event.target.value.substring(0, cursorPosition - 1) + event.target.value.substring(cursorPosition);
            //   cursorPosition --;
            // }
            // if (event.inputType === 'insertText' && (event.target.value.length > parseFormat.maxLength)) {
            //     event.target.value = event.target.value.substring(0, event.target.value.length - 1);
            // }
            if (this.oldPos > cursorPosition && parseFormat.isBackward(cursorPosition)) {
                event.target.value = event.target.value.substring(0, cursorPosition - 1) + event.target.value.substring(cursorPosition);
                cursorPosition--;
            }
            if (this.oldPos < cursorPosition && (event.target.value.length > parseFormat.maxLength)) {
                event.target.value = event.target.value.substring(0, event.target.value.length - 1);
            }
            this.oldPos = event.target.selectionEnd;
            this.dateMask = event.target.value.toString();
            this.dateMask = this.dateMask?.replace(/\D/g, '');
            let mask = '';
            for (let i = 0; i < this.dateMask.length; i++) {
                mask += this.dateMask[i];
                if (parseFormat.isForward(i)) {
                    mask += '/';
                    if (parseFormat.isBackward(cursorPosition)) {
                        cursorPosition++;
                        this.oldPos++;
                    }
                }
            }
            event.target.value = mask.toString();
            event.target.selectionStart = cursorPosition;
            event.target.selectionEnd = cursorPosition;
        }
        if (this.dateValue) {
            this.property.setValue(this.dateValue.getTime());
        }
        else {
            this.property.setValue(null);
        }
        if (this.onChange) {
            this.onChange();
        }
    }
    initDateFormatPosition(dateFormat) {
        const maxLength = dateFormat.length;
        const iMask = [];
        for (let i = 0; i < dateFormat.length; i++) {
            const char = dateFormat[i];
            if ('/' === char) {
                iMask.push(i - iMask.length > 0 ? (i - iMask.length - 1) : (i - iMask.length));
            }
        }
        const parse = {
            maxLength: maxLength,
            isBackward: (cursorPosition) => {
                const char = dateFormat.substr(cursorPosition, 1);
                return char === '/';
            }, isForward: (i) => {
                return iMask.indexOf(i) >= 0;
            }
        };
        return parse;
    }
    onSelect(event) {
        if (this.dateValue) {
            this.property.setValue(this.dateValue.getTime());
        }
        else {
            this.property.setValue(null);
        }
        if (this.onChange) {
            this.onChange();
        }
        this.onChanged.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: DatePickerComponent, deps: [{ token: i6.ControlContainer }, { token: i3$1.PrimeNGConfig }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: DatePickerComponent, selector: "app-date-picker", inputs: { property: "property", labelValue: "labelValue", dateFormat: "dateFormat", onChange: "onChange" }, outputs: { onChanged: "onChanged" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"field\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\n    <p-calendar [(ngModel)]=\"dateValue\" [showIcon]=\"true\"\n        [dateFormat]=\"dateFormat\"\n        class=\"w-full inline-block\"\n        appendTo=\"body\"\n        (onInput)=\"onInput($event)\"\n        (onSelect)=\"onSelect($event)\"\n        (onBlur)=\"onBlur($event)\"></p-calendar>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>\n", styles: ["::ng-deep app-date-picker span.p-calendar{width:100%}::ng-deep app-date-picker span.p-calendar input{height:40px}\n"], dependencies: [{ kind: "directive", type: i1$1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i4$2.Calendar, selector: "p-calendar", inputs: ["style", "styleClass", "inputStyle", "inputId", "name", "inputStyleClass", "placeholder", "ariaLabelledBy", "iconAriaLabel", "disabled", "dateFormat", "multipleSeparator", "rangeSeparator", "inline", "showOtherMonths", "selectOtherMonths", "showIcon", "icon", "appendTo", "readonlyInput", "shortYearCutoff", "monthNavigator", "yearNavigator", "hourFormat", "timeOnly", "stepHour", "stepMinute", "stepSecond", "showSeconds", "required", "showOnFocus", "showWeek", "showClear", "dataType", "selectionMode", "maxDateCount", "showButtonBar", "todayButtonStyleClass", "clearButtonStyleClass", "autoZIndex", "baseZIndex", "panelStyleClass", "panelStyle", "keepInvalid", "hideOnDateTimeSelect", "touchUI", "timeSeparator", "focusTrap", "showTransitionOptions", "hideTransitionOptions", "tabindex", "minDate", "maxDate", "disabledDates", "disabledDays", "yearRange", "showTime", "responsiveOptions", "numberOfMonths", "firstDayOfWeek", "locale", "view", "defaultDate"], outputs: ["onFocus", "onBlur", "onClose", "onSelect", "onClear", "onInput", "onTodayClick", "onClearClick", "onMonthChange", "onYearChange", "onClickOutside", "onShow"] }, { kind: "component", type: ControlMessagesComponent, selector: "app-control-messages", inputs: ["control", "labelName"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: DatePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-date-picker', template: "<div class=\"field\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\n    <p-calendar [(ngModel)]=\"dateValue\" [showIcon]=\"true\"\n        [dateFormat]=\"dateFormat\"\n        class=\"w-full inline-block\"\n        appendTo=\"body\"\n        (onInput)=\"onInput($event)\"\n        (onSelect)=\"onSelect($event)\"\n        (onBlur)=\"onBlur($event)\"></p-calendar>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>\n", styles: ["::ng-deep app-date-picker span.p-calendar{width:100%}::ng-deep app-date-picker span.p-calendar input{height:40px}\n"] }]
        }], ctorParameters: function () { return [{ type: i6.ControlContainer }, { type: i3$1.PrimeNGConfig }]; }, propDecorators: { property: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], onChange: [{
                type: Input
            }], onChanged: [{
                type: Output
            }] } });

class SharedModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: SharedModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.5", ngImport: i0, type: SharedModule, declarations: [DragDirective,
            BaseComponent,
            ControlMessagesComponent,
            InputSpecialDirective,
            AutoFocusDirective,
            InputTrimDirective,
            HasPermissionDirective,
            HasNotPermissionDirective,
            SharedPluginComponent,
            TextInputComponent,
            DropDownComponent,
            OrgSelectorComponent,
            OrgSelectorDialogComponent,
            DatePickerComponent,
            OrgTreeComponent,
            RadioButtonComponent,
            CategorySelectorComponent,
            ChooseFileImportDialogComponent,
            ImportErrorListComponent,
            InputSwitchComponent,
            EmployeePickerComponent,
            EmployeePickerDialogComponent,
            MultiSelectComponent,
            ChangePasswordFormComponent], imports: [CommonModule,
            ButtonModule,
            BreadcrumbModule,
            PanelModule,
            TableModule,
            DialogModule,
            SharedDirectiveModule,
            DynamicDialogModule,
            FormsModule,
            ReactiveFormsModule,
            OverlayPanelModule,
            ConfirmDialogModule,
            HttpClientModule,
            ToastModule,
            L10nTranslateAsyncPipe,
            DropdownModule,
            CalendarModule,
            TreeModule,
            RadioButtonModule,
            ProgressSpinnerModule,
            InputSwitchModule,
            TabViewModule,
            InputNumberModule,
            CheckboxModule,
            InputTextModule,
            SplitButtonModule,
            ScrollPanelModule,
            MultiSelectModule,
            ButtonModule], exports: [ButtonModule,
            BreadcrumbModule,
            PanelModule,
            TableModule,
            DialogModule,
            SharedDirectiveModule,
            DynamicDialogModule,
            FormsModule,
            ReactiveFormsModule,
            OverlayPanelModule,
            InputSpecialDirective,
            AutoFocusDirective,
            InputTrimDirective,
            HasPermissionDirective,
            HasNotPermissionDirective,
            ConfirmDialogModule,
            ControlMessagesComponent,
            HttpClientModule,
            ToastModule,
            SharedPluginComponent,
            TextInputComponent,
            L10nTranslateAsyncPipe,
            DropdownModule,
            DropDownComponent,
            OrgSelectorComponent,
            DatePickerComponent,
            CalendarModule,
            TreeModule,
            ButtonModule,
            RadioButtonModule,
            ProgressSpinnerModule,
            InputSwitchModule,
            TabViewModule,
            InputNumberModule,
            CheckboxModule,
            InputTextModule,
            SplitButtonModule,
            ScrollPanelModule,
            MultiSelectModule,
            OrgTreeComponent,
            RadioButtonComponent,
            CategorySelectorComponent,
            InputSwitchComponent,
            EmployeePickerComponent,
            MultiSelectComponent] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: SharedModule, providers: [
            DialogService
        ], imports: [CommonModule,
            ButtonModule,
            BreadcrumbModule,
            PanelModule,
            TableModule,
            DialogModule,
            SharedDirectiveModule,
            DynamicDialogModule,
            FormsModule,
            ReactiveFormsModule,
            OverlayPanelModule,
            ConfirmDialogModule,
            HttpClientModule,
            ToastModule,
            DropdownModule,
            CalendarModule,
            TreeModule,
            RadioButtonModule,
            ProgressSpinnerModule,
            InputSwitchModule,
            TabViewModule,
            InputNumberModule,
            CheckboxModule,
            InputTextModule,
            SplitButtonModule,
            ScrollPanelModule,
            MultiSelectModule,
            ButtonModule, ButtonModule,
            BreadcrumbModule,
            PanelModule,
            TableModule,
            DialogModule,
            SharedDirectiveModule,
            DynamicDialogModule,
            FormsModule,
            ReactiveFormsModule,
            OverlayPanelModule,
            ConfirmDialogModule,
            HttpClientModule,
            ToastModule,
            DropdownModule,
            CalendarModule,
            TreeModule,
            ButtonModule,
            RadioButtonModule,
            ProgressSpinnerModule,
            InputSwitchModule,
            TabViewModule,
            InputNumberModule,
            CheckboxModule,
            InputTextModule,
            SplitButtonModule,
            ScrollPanelModule,
            MultiSelectModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: SharedModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        DragDirective,
                        BaseComponent,
                        ControlMessagesComponent,
                        InputSpecialDirective,
                        AutoFocusDirective,
                        InputTrimDirective,
                        HasPermissionDirective,
                        HasNotPermissionDirective,
                        SharedPluginComponent,
                        TextInputComponent,
                        DropDownComponent,
                        OrgSelectorComponent,
                        OrgSelectorDialogComponent,
                        DatePickerComponent,
                        OrgTreeComponent,
                        RadioButtonComponent,
                        CategorySelectorComponent,
                        ChooseFileImportDialogComponent,
                        ImportErrorListComponent,
                        InputSwitchComponent,
                        EmployeePickerComponent,
                        EmployeePickerDialogComponent,
                        MultiSelectComponent,
                        ChangePasswordFormComponent,
                    ],
                    imports: [
                        CommonModule,
                        ButtonModule,
                        BreadcrumbModule,
                        PanelModule,
                        TableModule,
                        DialogModule,
                        SharedDirectiveModule,
                        DynamicDialogModule,
                        FormsModule,
                        ReactiveFormsModule,
                        OverlayPanelModule,
                        ConfirmDialogModule,
                        HttpClientModule,
                        ToastModule,
                        L10nTranslateAsyncPipe,
                        DropdownModule,
                        CalendarModule,
                        TreeModule,
                        RadioButtonModule,
                        ProgressSpinnerModule,
                        InputSwitchModule,
                        TabViewModule,
                        InputNumberModule,
                        CheckboxModule,
                        InputTextModule,
                        SplitButtonModule,
                        ScrollPanelModule,
                        MultiSelectModule,
                        ButtonModule,
                    ],
                    exports: [
                        ButtonModule,
                        BreadcrumbModule,
                        PanelModule,
                        TableModule,
                        DialogModule,
                        SharedDirectiveModule,
                        DynamicDialogModule,
                        FormsModule,
                        ReactiveFormsModule,
                        OverlayPanelModule,
                        InputSpecialDirective,
                        AutoFocusDirective,
                        InputTrimDirective,
                        HasPermissionDirective,
                        HasNotPermissionDirective,
                        ConfirmDialogModule,
                        ControlMessagesComponent,
                        HttpClientModule,
                        ToastModule,
                        SharedPluginComponent,
                        TextInputComponent,
                        L10nTranslateAsyncPipe,
                        DropdownModule,
                        DropDownComponent,
                        OrgSelectorComponent,
                        DatePickerComponent,
                        CalendarModule,
                        TreeModule,
                        ButtonModule,
                        RadioButtonModule,
                        ProgressSpinnerModule,
                        InputSwitchModule,
                        TabViewModule,
                        InputNumberModule,
                        CheckboxModule,
                        InputTextModule,
                        SplitButtonModule,
                        ScrollPanelModule,
                        MultiSelectModule,
                        OrgTreeComponent,
                        RadioButtonComponent,
                        CategorySelectorComponent,
                        InputSwitchComponent,
                        EmployeePickerComponent,
                        MultiSelectComponent
                    ],
                    providers: [
                        DialogService
                    ]
                }]
        }] });

class SCoreModule {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: SCoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "16.2.5", ngImport: i0, type: SCoreModule, imports: [CommonModule,
            SharedModule] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: SCoreModule, imports: [CommonModule,
            SharedModule] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: SCoreModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [],
                    imports: [
                        CommonModule,
                        SharedModule
                    ]
                }]
        }] });

/*
 * Public API Surface of angularx-score
 */

/**
 * Generated bundle index. Do not edit.
 */

export { AuthLayoutComponent, AutoFocusDirective, BaseComponent, BaseControl, BaseService, CategorySelectorComponent, ChangePasswordFormComponent, ChooseFileImportDialogComponent, CommonUtils, ControlMessagesComponent, CryptoService, DatePickerComponent, DragDirective, DropDownComponent, EmployeePickerComponent, EmployeePickerDialogComponent, Filter, FilterModel, HasNotPermissionDirective, HasPermissionDirective, HelperService, HrStorage, ImportErrorListComponent, ImportFormService, InputSpecialDirective, InputSwitchComponent, InputTrimDirective, LanguageBean, MultiSelectComponent, Order, OrgSelectorComponent, OrgSelectorDialogComponent, OrgTreeComponent, Page, RadioButtonComponent, SCoreModule, SharedDirectiveModule, SharedModule, SharedPluginComponent, SysPropertyDetailBean, TextInputComponent, UserMenu, UserPermission, UserToken, ValidationService };
//# sourceMappingURL=angularx-score.mjs.map
