import { Injector } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable } from 'rxjs';
import { HelperService } from './helper.service';
import { CommonUtils } from './common-utils.service';
import * as i0 from "@angular/core";
export declare class BaseService {
    injector: Injector;
    protected baseUrl: String;
    protected httpClient: HttpClient;
    helperService: HelperService;
    commonUtil: CommonUtils;
    baseObject: String;
    constructor(injector: Injector, baseUrl: String, baseObject: String);
    getBaseUrl(): String;
    search(data?: any, event?: any): Observable<any>;
    getConfigSearch(): Observable<any>;
    /**
     * findAll
     */
    findAll(): Observable<any>;
    /**
     * findAllByFillter
     */
    findAllByFillter(data?: any): Observable<any>;
    /**
     * findAllByFillterAndGroupCode
     */
    findAllByFillterAndGroupCode(data: any, groupCode: string): Observable<any>;
    /**
     * findOne
     * param id
     */
    findOne(id: number): Observable<any>;
    /**
     * saveOrUpdate
     */
    saveOrUpdate(item: any): Observable<any>;
    /**
     * saveOrUpdate
     */
    saveOrUpdateConfigSearch(item: any): Observable<any>;
    /**
     * saveOrUpdateFormFile
     */
    saveOrUpdateFormFile(item: any): Observable<any>;
    /**
     * deleteById
     * param id
     */
    deleteById(id: number): Observable<any>;
    /**
     * deleteByListId
     * param id
     */
    deleteItemsSelected(data: any): Observable<any>;
    /*******************************/
    /**
     * make get request
     */
    protected getRequest(url: string, options?: any): Observable<any>;
    /**
     * make post request
     */
    protected postRequest(url: string, data?: any): Observable<any>;
    protected postRequestNoToast(url: string, data?: any): Observable<any>;
    /**
     * make post request for file
     */
    protected postRequestFile(url: string, data?: any): Observable<any>;
    /**
     * make get request
     */
    protected deleteRequest(url: string): Observable<any>;
    /**
     * getRequestNoneProcessing
     */
    protected getRequestNoneProcessing(url: string, options?: any): Observable<any>;
    /**
     * postRequestNoneProcessing
     */
    protected postRequestNoneProcessing(url: string, data?: any): Observable<any>;
    /**
     * postRequestFileNoneProcessing
     */
    protected postRequestFileNoneProcessing(url: string, data?: any): Observable<any>;
    /**
     * deleteRequestNoneProcessing
     */
    protected deleteRequestNoneProcessing(url: string): Observable<any>;
    private handleError;
    static ɵfac: i0.ɵɵFactoryDeclaration<BaseService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<BaseService>;
}
