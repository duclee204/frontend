import { AbstractControl, ValidatorFn } from '@angular/forms';
import { SysPropertyDetailBean } from '../models/sys-property-details.model';
import * as i0 from "@angular/core";
export declare class ValidationService {
    /**
     * validate required with no space
     */
    static required(control: AbstractControl): any;
    /**
     * validate required with no space
     */
    static noWhiteSpace(control: AbstractControl): any;
    static maxLength(length: number): ValidatorFn | any;
    static passwordValidator(control: AbstractControl): any;
    /**
     * validate onlyLetterNumber
     */
    static onlyLetterNumber(control: AbstractControl): any;
    /**
     * validate onlyLetterNumberSp
     */
    static onlyLetterNumberSp(control: AbstractControl): any;
    /**
     * validate database tableColumnName
     */
    static dbTableColumnName(control: AbstractControl): any;
    /**
     * validate personalIdNumber
     */
    static personalIdNumber(control: AbstractControl): any;
    /**
     * validate phone
     */
    static phone(control: AbstractControl): any;
    /**
     * validate mobileNumber
     */
    static mobileNumber(control: AbstractControl): any;
    /**
     * validate integer
     */
    static integer(control: AbstractControl): any;
    /**
     * validate positiveInteger
     */
    static positiveInteger(control: AbstractControl): any;
    /**
     * validate number
     */
    static number(control: AbstractControl): any;
    /**
     * validate positiveNumber
     */
    static positiveNumber(control: AbstractControl): any;
    /**
   * validate beforeCurrentDate
   */
    static beforeCurrentDate(control: AbstractControl): any;
    static afterCurrentDate(control: AbstractControl): any;
    /**
     * Validate IP
     * @param control : any
     */
    static isIp(control: AbstractControl): any;
    /**
   * Validate URL
   * @param control : any
   */
    static isUrl(control: AbstractControl): any;
    /** Validate email format */
    static emailFormat(control: AbstractControl): any;
    /**
     * Validate date not affter date
     * @param targetKey: any
     * @param toMatchKey: any
     */
    static notAffter(targetKey: string, toMatchKey: string, labelMatchCode: string): ValidatorFn | any;
    /**
    * Validate date not before date
    * @param targetKey: any
    * @param toMatchKey: any
    */
    static notBefore(targetKey: string, toMatchKey: string, labelMatchCode: string): ValidatorFn | any;
    /**
     * Validate date not affter number
     * @param targetKey: any
     * @param toMatchKey: any
     */
    static notAffterNumber(targetKey: string, toMatchKey: string, labelMatchCode: string): ValidatorFn | any;
    /**
     * Validate date in range 6 Month
     * @param targetKey: any
     * @param toMatchKey: any
     */
    static isRangeOf6Month(targetKey: string, toMatchKey: string, labelMatchCode: string): ValidatorFn | any;
    /**
     * Validate date not before a specify date
     * @param targetKey: any
     * @param specifyDate: any
     */
    static beforeSpecifyDate(targetKey: string, specifyDate: string, labelMatchCode: string): ValidatorFn | any;
    /**
     * Validate date not after a specify date
     * @param targetKey: any
     * @param specifyDate: any
     */
    static afterSpecifyDate(targetKey: string, specifyDate: string, labelMatchCode: string): ValidatorFn | any;
    /**
     * Validate date not before number
     * @param targetKey: any
     * @param toMatchKey: any
     */
    static notBeforeNumber(targetKey: string, toMatchKey: string, labelMatchCode: string): ValidatorFn | any;
    static getValidatorArr(oldArr: Array<ValidatorFn>, prop?: SysPropertyDetailBean): Array<ValidatorFn>;
    /**
       * Validate 'Đơn vị, Chức danh công việc không được phép trùng'
       * @param targetKey: any
       * @param toMatchKey: any
       */
    static duplicateArray(controlKeys: Array<string>, target: string, messageKey?: string): ValidatorFn | any;
    static requiredIfHaveOne(control: AbstractControl): any;
    /**
     * Xu ly neu nhu co gia tri tai truong hien tai thi validate bat buoc nhap tai truong duoc set
     * @param controlKeys Ten truong bat buoc nhap
     */
    static ifHaveOneIsRequired(controlKeys: string): ValidatorFn | any;
    /**
     * Xu ly bat buoc nhap truong hien tai khi truong truyen vao co gia tri
     * @param controlKeys Ten truong nhap gia tri
     */
    static isRequiredIfHaveOne(controlKeys: string): ValidatorFn | any;
    /**
     * validate array form requird
     * Neu ko nhap truong nao thi ko validate, khi nhap 1 trong cac truong  thi bat buoc nhap tat ca cac truong cau hinh
     */
    static requiredControlInGroup(controlKeys: Array<string>, controlKeysIgnore?: Array<string>): ValidatorFn | any;
    /**
    * Xu ly validate bat buoc nhap 1 truong trong danh sach cau hinh
    */
    static justRequiredOneField(controlKeys: Array<string>): ValidatorFn | any;
    static positiveRealNumber(control: AbstractControl): any;
    static isRequiredIfHaveOneValue(controlKeys: string): ValidatorFn | any;
    static isRequiredReason(sabbaticalLeaveId: string, addDay: string, subDay: string): ValidatorFn | any;
    static isHaveSabbaticalLeaveId(controlKeys: string): ValidatorFn | any;
    /**
     * Validate number not greater than number (selector)
     * @param targetKey: any
     * @param toMatchKey: any
     */
    static notGreater(targetKey: string, toMatchKey: string, labelMatchCode: string): ValidatorFn | any;
    /**
    * validate beforeCurrentMonth
    */
    static beforeCurrentMonth(control: AbstractControl): any;
    static afterCurrentMonth(control: AbstractControl): any;
    /**
     * validate 9 or 12
     */
    static lenght9or12(control: AbstractControl): any;
    static ɵfac: i0.ɵɵFactoryDeclaration<ValidationService, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<ValidationService>;
}
