import { FormGroup, FormArray } from '@angular/forms';
import { HttpParams } from '@angular/common/http';
import { HelperService } from './helper.service';
import { Router } from '@angular/router';
import { SysPropertyDetailBean } from '../models/sys-property-details.model';
import { ACTION_FORM } from '../app-config';
import * as i0 from "@angular/core";
export declare class CommonUtils {
    private helperService;
    constructor(helperService: HelperService);
    static isNullOrEmpty(str: any): boolean;
    /**
   * Hàm lấy DateFormat hiện tại theo MarketCompany. Ko có trả về mặc định
   */
    static getDateFormat(): string;
    /**
   * createFormNew use Dynamic Input
   */
    static createFormNew(resource: string, actionForm: ACTION_FORM, formData: any, options: any, propConfigs?: Array<SysPropertyDetailBean>, validate?: any): FormGroup;
    /**
   * convert To FormData mutilpart request post
   */
    static convertFormFile(dataPost: any): FormData;
    /**
     * objectToFormData
     */
    static objectToFormData(obj: any, rootName: any, ignoreList: any): FormData;
    /**
   * convertData
   */
    static convertData(data: any): any;
    /**
     * convertDataObject
     * param data
     */
    static convertDataObject(data: Object): Object;
    static convertDataArray(data: Array<any>): Array<any>;
    static convertBoolean(value: Boolean): number;
    /**
   * copyProperties
   * param dest
   * param orgs
   */
    static buildParams(obj: any): HttpParams;
    static buildParamsArray(obj: any): HttpParams;
    /**
   * validateForm
   * @param form: FormGroup
   */
    static isValidForm(form: any): boolean;
    static offset(el: Element): any;
    static scrollToSmoothly(querySelectorAll: string, time?: number): void;
    static markAsTouched(form: any): void;
    static isValidFormArray(form: FormArray): void;
    static isValidFormGroup(form: FormGroup): void;
    /**
   * convertData
   */
    convertData(data: any): any;
    convertDataArray(data: Array<any>): Array<any>;
    convertBoolean(value: boolean): number;
    /**
     * copyProperties
     * param dest
     * param orgs
     */
    buildParams(obj: any): HttpParams;
    toastMessage(severity: 'success' | 'info' | 'warn' | 'error', code: string, data?: string): void;
    /**
   * convert To FormData mutilpart request post
   */
    convertFormFile(dataPost: any): FormData;
    /**
     * objectToFormData
     */
    objectToFormData(obj: any, rootName: any, ignoreList: any): FormData;
    static isSuccessRequest(res: any): any;
    static dateToString(date: Date): string;
    static logoutAction(router: Router): void;
    /**
   * getPermissionCode
   * @param code: string
   */
    static getPermissionCode(code: string): string;
    /**
   * has Permission
   */
    static havePermission(operationKey: string, adResourceKey: string): boolean;
    static setWidthDiaglog(defaultValue: string): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<CommonUtils, never>;
    static ɵprov: i0.ɵɵInjectableDeclaration<CommonUtils>;
}
