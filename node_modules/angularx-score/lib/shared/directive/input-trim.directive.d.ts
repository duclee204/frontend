import { ElementRef, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import * as i0 from "@angular/core";
export declare class InputTrimDirective implements ControlValueAccessor {
    trim: string;
    set type(value: string);
    /**
     * Keep the type of input element in a cache.
     *
     */
    private _type;
    /**
     * Keep the value of input element in a cache.
     *
     */
    private _value;
    private _sourceRenderer;
    private _sourceElementRef;
    /**
     * Updates the value on the blur event.
     */
    onBlur(event: string, value: string): void;
    /**
     * Updates the value on the input event.
     */
    onInput(event: string, value: string): void;
    onChange: (_: any) => void;
    onTouched: () => void;
    constructor(renderer: Renderer2, elementRef: ElementRef, compositionMode: boolean);
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    /**
     * Writes a new value to the element based on the type of input element.
     *
     */
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    /**
     * Trims an input value, and sets it to the model and element.
     *
     */
    private updateValue;
    static ɵfac: i0.ɵɵFactoryDeclaration<InputTrimDirective, [null, null, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<InputTrimDirective, "input[type=\"text\"], textarea[]", never, { "trim": { "alias": "trim"; "required": false; }; "type": { "alias": "type"; "required": false; }; }, {}, never, never, false, never>;
}
