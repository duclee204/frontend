import { Component, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "angular-l10n";
import * as i2 from "@angular/common";
// import { TranslationService } from 'angular-l10n';
export class ControlMessagesComponent {
    constructor(translation) {
        this.translation = translation;
        // tslint:disable-next-line: max-line-length
        this.replaceKeys = ['max', 'min', 'maxlength', 'minlength', 'dateNotAffter', 'dateNotBefore', 'duplicateArray', 'beforeCurrentDate', 'required', 'numberNotGreater'];
        // tslint:disable-next-line: max-line-length
        this.actualKeys = ['max', 'min', 'requiredLength', 'requiredLength', 'dateNotAffter', 'dateNotBefore', 'duplicateArray', 'beforeCurrentDate', 'required', 'numberNotGreater'];
        this.translateKeys = ['dateNotAffter', 'dateNotBefore', 'cannotContainSpace', 'duplicateArray', 'beforeCurrentDate', 'required', 'numberNotGreater'];
    }
    get errorMessage() {
        for (const propertyName in this.control.errors) {
            if (this.control.errors.hasOwnProperty(propertyName) && this.control.touched) {
                const messageText = this.translation.translate(`validate.${propertyName}`);
                // const messageText = `validate.${propertyName}`;
                const errors = this.control.errors[propertyName];
                return this.buildMessage(messageText, errors);
            }
        }
        return '';
    }
    markAsUntouched() {
        this.control.markAsUntouched();
    }
    /**
     * buildMessage
     * @param messageText: string
     * @param errors: ValidationErrors
     */
    buildMessage(messageText, errors) {
        for (const i in this.replaceKeys) {
            if (errors && errors.hasOwnProperty(this.actualKeys[i])) {
                let text = errors[this.actualKeys[i]];
                if (this.translateKeys.indexOf(this.actualKeys[i]) !== -1) {
                    text = this.translation.translate(text);
                    // text = text;
                }
                messageText = messageText.replace(new RegExp('\\$\\{' + this.replaceKeys[i] + '\\}', 'g'), text);
            }
        }
        return messageText;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ControlMessagesComponent, deps: [{ token: i1.L10nTranslationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: ControlMessagesComponent, selector: "app-control-messages", inputs: { control: "control", labelName: "labelName" }, ngImport: i0, template: "<div class=\"errorMessageDiv\" [ngClass]=\"{'show': errorMessage !== undefined}\">\r\n  <small *ngIf=\"errorMessage !== undefined\" (click)=\"markAsUntouched()\" class=\"text-danger errorMessage\">\r\n    {{ errorMessage }}\r\n  </small>\r\n</div>\r\n", styles: ["::ng-deep app-control-messages .errorMessage{color:#a94442!important;margin-top:1rem}\n"], dependencies: [{ kind: "directive", type: i2.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ControlMessagesComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-control-messages', template: "<div class=\"errorMessageDiv\" [ngClass]=\"{'show': errorMessage !== undefined}\">\r\n  <small *ngIf=\"errorMessage !== undefined\" (click)=\"markAsUntouched()\" class=\"text-danger errorMessage\">\r\n    {{ errorMessage }}\r\n  </small>\r\n</div>\r\n", styles: ["::ng-deep app-control-messages .errorMessage{color:#a94442!important;margin-top:1rem}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.L10nTranslationService }]; }, propDecorators: { control: [{
                type: Input
            }], labelName: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC1tZXNzYWdlcy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyeC1zY29yZS9zcmMvbGliL3NoYXJlZC9jb21wb25lbnRzL2NvbnRyb2wtbWVzc2FnZXMvY29udHJvbC1tZXNzYWdlcy5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyeC1zY29yZS9zcmMvbGliL3NoYXJlZC9jb21wb25lbnRzL2NvbnRyb2wtbWVzc2FnZXMvY29udHJvbC1tZXNzYWdlcy5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLGVBQWUsQ0FBQzs7OztBQUdqRCxxREFBcUQ7QUFNckQsTUFBTSxPQUFPLHdCQUF3QjtJQVduQyxZQUNTLFdBQW1DO1FBQW5DLGdCQUFXLEdBQVgsV0FBVyxDQUF3QjtRQVA1Qyw0Q0FBNEM7UUFDcEMsZ0JBQVcsR0FBRyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixFQUFFLFVBQVUsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO1FBQ3hLLDRDQUE0QztRQUNwQyxlQUFVLEdBQUcsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsZ0JBQWdCLEVBQUUsbUJBQW1CLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixDQUFDLENBQUM7UUFDekssa0JBQWEsR0FBRyxDQUFDLGVBQWUsRUFBRSxlQUFlLEVBQUUsb0JBQW9CLEVBQUUsZ0JBQWdCLEVBQUUsbUJBQW1CLEVBQUUsVUFBVSxFQUFFLGtCQUFrQixDQUFDLENBQUM7SUFJcEosQ0FBQztJQUVMLElBQUksWUFBWTtRQUNkLEtBQUssTUFBTSxZQUFZLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUU7WUFDOUMsSUFBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUU7Z0JBQzVFLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLFlBQVksWUFBWSxFQUFFLENBQUMsQ0FBQztnQkFDM0Usa0RBQWtEO2dCQUNsRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztnQkFDakQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxNQUFNLENBQUMsQ0FBQzthQUMvQztTQUNGO1FBQ0QsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDO0lBQ0QsZUFBZTtRQUNiLElBQUksQ0FBQyxPQUFPLENBQUMsZUFBZSxFQUFFLENBQUM7SUFDakMsQ0FBQztJQUNEOzs7O09BSUc7SUFDSCxZQUFZLENBQUMsV0FBbUIsRUFBRSxNQUF3QjtRQUN4RCxLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxXQUFXLEVBQUU7WUFDaEMsSUFBSSxNQUFNLElBQUksTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3ZELElBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3RDLElBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO29CQUN6RCxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7b0JBQ3hDLGVBQWU7aUJBQ2hCO2dCQUNELFdBQVcsR0FBRyxXQUFXLENBQUMsT0FBTyxDQUFDLElBQUksTUFBTSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxHQUFHLEtBQUssRUFBRSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FBQzthQUNsRztTQUNGO1FBQ0QsT0FBTyxXQUFXLENBQUM7SUFDckIsQ0FBQzs4R0E5Q1Usd0JBQXdCO2tHQUF4Qix3QkFBd0Isb0hDVHJDLDZQQUtBOzsyRkRJYSx3QkFBd0I7a0JBTHBDLFNBQVM7K0JBQ0Usc0JBQXNCOzZHQU16QixPQUFPO3NCQURiLEtBQUs7Z0JBR0MsU0FBUztzQkFEZixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBGb3JtQ29udHJvbCwgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcclxuaW1wb3J0IHsgTDEwblRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gJ2FuZ3VsYXItbDEwbic7XHJcbi8vIGltcG9ydCB7IFRyYW5zbGF0aW9uU2VydmljZSB9IGZyb20gJ2FuZ3VsYXItbDEwbic7XHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLWNvbnRyb2wtbWVzc2FnZXMnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9jb250cm9sLW1lc3NhZ2VzLmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi9jb250cm9sLW1lc3NhZ2VzLmNvbXBvbmVudC5zY3NzJ10sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBDb250cm9sTWVzc2FnZXNDb21wb25lbnQge1xyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIGNvbnRyb2whOiBGb3JtQ29udHJvbDtcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBsYWJlbE5hbWU/OiBzdHJpbmc7XHJcbiAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOiBtYXgtbGluZS1sZW5ndGhcclxuICBwcml2YXRlIHJlcGxhY2VLZXlzID0gWydtYXgnLCAnbWluJywgJ21heGxlbmd0aCcsICdtaW5sZW5ndGgnLCAnZGF0ZU5vdEFmZnRlcicsICdkYXRlTm90QmVmb3JlJywgJ2R1cGxpY2F0ZUFycmF5JywgJ2JlZm9yZUN1cnJlbnREYXRlJywgJ3JlcXVpcmVkJywgJ251bWJlck5vdEdyZWF0ZXInXTtcclxuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6IG1heC1saW5lLWxlbmd0aFxyXG4gIHByaXZhdGUgYWN0dWFsS2V5cyA9IFsnbWF4JywgJ21pbicsICdyZXF1aXJlZExlbmd0aCcsICdyZXF1aXJlZExlbmd0aCcsICdkYXRlTm90QWZmdGVyJywgJ2RhdGVOb3RCZWZvcmUnLCAnZHVwbGljYXRlQXJyYXknLCAnYmVmb3JlQ3VycmVudERhdGUnLCAncmVxdWlyZWQnLCAnbnVtYmVyTm90R3JlYXRlciddO1xyXG4gIHByaXZhdGUgdHJhbnNsYXRlS2V5cyA9IFsnZGF0ZU5vdEFmZnRlcicsICdkYXRlTm90QmVmb3JlJywgJ2Nhbm5vdENvbnRhaW5TcGFjZScsICdkdXBsaWNhdGVBcnJheScsICdiZWZvcmVDdXJyZW50RGF0ZScsICdyZXF1aXJlZCcsICdudW1iZXJOb3RHcmVhdGVyJ107XHJcblxyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHRyYW5zbGF0aW9uOiBMMTBuVHJhbnNsYXRpb25TZXJ2aWNlXHJcbiAgKSB7IH1cclxuXHJcbiAgZ2V0IGVycm9yTWVzc2FnZSgpOiBzdHJpbmcge1xyXG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eU5hbWUgaW4gdGhpcy5jb250cm9sLmVycm9ycykge1xyXG4gICAgICBpZiAodGhpcy5jb250cm9sLmVycm9ycy5oYXNPd25Qcm9wZXJ0eShwcm9wZXJ0eU5hbWUpICYmIHRoaXMuY29udHJvbC50b3VjaGVkKSB7XHJcbiAgICAgICAgY29uc3QgbWVzc2FnZVRleHQgPSB0aGlzLnRyYW5zbGF0aW9uLnRyYW5zbGF0ZShgdmFsaWRhdGUuJHtwcm9wZXJ0eU5hbWV9YCk7XHJcbiAgICAgICAgLy8gY29uc3QgbWVzc2FnZVRleHQgPSBgdmFsaWRhdGUuJHtwcm9wZXJ0eU5hbWV9YDtcclxuICAgICAgICBjb25zdCBlcnJvcnMgPSB0aGlzLmNvbnRyb2wuZXJyb3JzW3Byb3BlcnR5TmFtZV07XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRNZXNzYWdlKG1lc3NhZ2VUZXh0LCBlcnJvcnMpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gJyc7XHJcbiAgfVxyXG4gIG1hcmtBc1VudG91Y2hlZCgpIHtcclxuICAgIHRoaXMuY29udHJvbC5tYXJrQXNVbnRvdWNoZWQoKTtcclxuICB9XHJcbiAgLyoqXHJcbiAgICogYnVpbGRNZXNzYWdlXHJcbiAgICogQHBhcmFtIG1lc3NhZ2VUZXh0OiBzdHJpbmdcclxuICAgKiBAcGFyYW0gZXJyb3JzOiBWYWxpZGF0aW9uRXJyb3JzXHJcbiAgICovXHJcbiAgYnVpbGRNZXNzYWdlKG1lc3NhZ2VUZXh0OiBzdHJpbmcsIGVycm9yczogVmFsaWRhdGlvbkVycm9ycyk6IHN0cmluZyB7XHJcbiAgICBmb3IgKGNvbnN0IGkgaW4gdGhpcy5yZXBsYWNlS2V5cykge1xyXG4gICAgICBpZiAoZXJyb3JzICYmIGVycm9ycy5oYXNPd25Qcm9wZXJ0eSh0aGlzLmFjdHVhbEtleXNbaV0pKSB7XHJcbiAgICAgICAgbGV0IHRleHQgPSBlcnJvcnNbdGhpcy5hY3R1YWxLZXlzW2ldXTtcclxuICAgICAgICBpZiAodGhpcy50cmFuc2xhdGVLZXlzLmluZGV4T2YodGhpcy5hY3R1YWxLZXlzW2ldKSAhPT0gLTEpIHtcclxuICAgICAgICAgIHRleHQgPSB0aGlzLnRyYW5zbGF0aW9uLnRyYW5zbGF0ZSh0ZXh0KTtcclxuICAgICAgICAgIC8vIHRleHQgPSB0ZXh0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBtZXNzYWdlVGV4dCA9IG1lc3NhZ2VUZXh0LnJlcGxhY2UobmV3IFJlZ0V4cCgnXFxcXCRcXFxceycgKyB0aGlzLnJlcGxhY2VLZXlzW2ldICsgJ1xcXFx9JywgJ2cnKSwgdGV4dCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBtZXNzYWdlVGV4dDtcclxuICB9XHJcbn1cclxuIiwiPGRpdiBjbGFzcz1cImVycm9yTWVzc2FnZURpdlwiIFtuZ0NsYXNzXT1cInsnc2hvdyc6IGVycm9yTWVzc2FnZSAhPT0gdW5kZWZpbmVkfVwiPlxyXG4gIDxzbWFsbCAqbmdJZj1cImVycm9yTWVzc2FnZSAhPT0gdW5kZWZpbmVkXCIgKGNsaWNrKT1cIm1hcmtBc1VudG91Y2hlZCgpXCIgY2xhc3M9XCJ0ZXh0LWRhbmdlciBlcnJvck1lc3NhZ2VcIj5cclxuICAgIHt7IGVycm9yTWVzc2FnZSB9fVxyXG4gIDwvc21hbGw+XHJcbjwvZGl2PlxyXG4iXX0=