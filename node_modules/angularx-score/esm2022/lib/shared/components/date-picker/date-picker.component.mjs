import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseControl } from '../../public-api';
import { CommonUtils } from '../../services/common-utils.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "primeng/api";
import * as i3 from "@angular/common";
import * as i4 from "primeng/calendar";
import * as i5 from "../control-messages/control-messages.component";
export class DatePickerComponent {
    constructor(controlContainer, primengConfig) {
        this.controlContainer = controlContainer;
        this.primengConfig = primengConfig;
        // formControl of this input
        this.property = new BaseControl();
        this.dateFormat = 'dd/mm/yy';
        this.onChanged = new EventEmitter();
        this.dateValue = null;
        this.oldPos = 0;
        this.dateMask = '';
        // TODO
        this.primengConfig.setTranslation({
            dayNames: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
            dayNamesShort: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
            dayNamesMin: ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'],
            monthNames: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'],
            monthNamesShort: ['Tháng 1', 'Tháng 2', 'Tháng 3', 'Tháng 4', 'Tháng 5', 'Tháng 6', 'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10', 'Tháng 11', 'Tháng 12'],
            today: 'Hôm nay',
            clear: 'Làm mới'
        });
    }
    ngOnChanges() {
        if (this.property.value) {
            this.dateValue = new Date(this.property.value);
        }
        else {
            this.dateValue = null;
        }
    }
    onBlur(event) {
        if (!this.dateValue && event.currentTarget.value !== '') {
            // this.helperService.APP_TOAST_MESSAGE.next({ type: 'ERROR', code: 'dateInvalid', message: null });
        }
        // Xu ly neu nguoi dung xoa het gia tri ngay thang
        if (event.currentTarget.value === '' && this.dateValue !== null) {
            this.dateValue = null;
            this.onInput(null);
        }
        if (event.currentTarget.value === '' && this.dateValue == null) {
            this.onChanged.emit(event);
        }
    }
    onInput(event) {
        let parseFormat = this.initDateFormatPosition(CommonUtils.getDateFormat());
        if (this.dateFormat == 'mm/yy') {
            parseFormat = this.initDateFormatPosition('MM/yyyy');
        }
        if (event) {
            let cursorPosition = event.target.selectionEnd;
            // if (event.inputType === 'deleteContentBackward' && parseFormat.isBackward(cursorPosition)) {
            //   event.target.value = event.target.value.substring(0, cursorPosition - 1) + event.target.value.substring(cursorPosition);
            //   cursorPosition --;
            // }
            // if (event.inputType === 'insertText' && (event.target.value.length > parseFormat.maxLength)) {
            //     event.target.value = event.target.value.substring(0, event.target.value.length - 1);
            // }
            if (this.oldPos > cursorPosition && parseFormat.isBackward(cursorPosition)) {
                event.target.value = event.target.value.substring(0, cursorPosition - 1) + event.target.value.substring(cursorPosition);
                cursorPosition--;
            }
            if (this.oldPos < cursorPosition && (event.target.value.length > parseFormat.maxLength)) {
                event.target.value = event.target.value.substring(0, event.target.value.length - 1);
            }
            this.oldPos = event.target.selectionEnd;
            this.dateMask = event.target.value.toString();
            this.dateMask = this.dateMask?.replace(/\D/g, '');
            let mask = '';
            for (let i = 0; i < this.dateMask.length; i++) {
                mask += this.dateMask[i];
                if (parseFormat.isForward(i)) {
                    mask += '/';
                    if (parseFormat.isBackward(cursorPosition)) {
                        cursorPosition++;
                        this.oldPos++;
                    }
                }
            }
            event.target.value = mask.toString();
            event.target.selectionStart = cursorPosition;
            event.target.selectionEnd = cursorPosition;
        }
        if (this.dateValue) {
            this.property.setValue(this.dateValue.getTime());
        }
        else {
            this.property.setValue(null);
        }
        if (this.onChange) {
            this.onChange();
        }
    }
    initDateFormatPosition(dateFormat) {
        const maxLength = dateFormat.length;
        const iMask = [];
        for (let i = 0; i < dateFormat.length; i++) {
            const char = dateFormat[i];
            if ('/' === char) {
                iMask.push(i - iMask.length > 0 ? (i - iMask.length - 1) : (i - iMask.length));
            }
        }
        const parse = {
            maxLength: maxLength,
            isBackward: (cursorPosition) => {
                const char = dateFormat.substr(cursorPosition, 1);
                return char === '/';
            }, isForward: (i) => {
                return iMask.indexOf(i) >= 0;
            }
        };
        return parse;
    }
    onSelect(event) {
        if (this.dateValue) {
            this.property.setValue(this.dateValue.getTime());
        }
        else {
            this.property.setValue(null);
        }
        if (this.onChange) {
            this.onChange();
        }
        this.onChanged.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: DatePickerComponent, deps: [{ token: i1.ControlContainer }, { token: i2.PrimeNGConfig }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: DatePickerComponent, selector: "app-date-picker", inputs: { property: "property", labelValue: "labelValue", dateFormat: "dateFormat", onChange: "onChange" }, outputs: { onChanged: "onChanged" }, usesOnChanges: true, ngImport: i0, template: "<div class=\"field\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\n    <p-calendar [(ngModel)]=\"dateValue\" [showIcon]=\"true\"\n        [dateFormat]=\"dateFormat\"\n        class=\"w-full inline-block\"\n        appendTo=\"body\"\n        (onInput)=\"onInput($event)\"\n        (onSelect)=\"onSelect($event)\"\n        (onBlur)=\"onBlur($event)\"></p-calendar>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>\n", styles: ["::ng-deep app-date-picker span.p-calendar{width:100%}::ng-deep app-date-picker span.p-calendar input{height:40px}\n"], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i4.Calendar, selector: "p-calendar", inputs: ["style", "styleClass", "inputStyle", "inputId", "name", "inputStyleClass", "placeholder", "ariaLabelledBy", "iconAriaLabel", "disabled", "dateFormat", "multipleSeparator", "rangeSeparator", "inline", "showOtherMonths", "selectOtherMonths", "showIcon", "icon", "appendTo", "readonlyInput", "shortYearCutoff", "monthNavigator", "yearNavigator", "hourFormat", "timeOnly", "stepHour", "stepMinute", "stepSecond", "showSeconds", "required", "showOnFocus", "showWeek", "showClear", "dataType", "selectionMode", "maxDateCount", "showButtonBar", "todayButtonStyleClass", "clearButtonStyleClass", "autoZIndex", "baseZIndex", "panelStyleClass", "panelStyle", "keepInvalid", "hideOnDateTimeSelect", "touchUI", "timeSeparator", "focusTrap", "showTransitionOptions", "hideTransitionOptions", "tabindex", "minDate", "maxDate", "disabledDates", "disabledDays", "yearRange", "showTime", "responsiveOptions", "numberOfMonths", "firstDayOfWeek", "locale", "view", "defaultDate"], outputs: ["onFocus", "onBlur", "onClose", "onSelect", "onClear", "onInput", "onTodayClick", "onClearClick", "onMonthChange", "onYearChange", "onClickOutside", "onShow"] }, { kind: "component", type: i5.ControlMessagesComponent, selector: "app-control-messages", inputs: ["control", "labelName"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: DatePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-date-picker', template: "<div class=\"field\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\n    <p-calendar [(ngModel)]=\"dateValue\" [showIcon]=\"true\"\n        [dateFormat]=\"dateFormat\"\n        class=\"w-full inline-block\"\n        appendTo=\"body\"\n        (onInput)=\"onInput($event)\"\n        (onSelect)=\"onSelect($event)\"\n        (onBlur)=\"onBlur($event)\"></p-calendar>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>\n", styles: ["::ng-deep app-date-picker span.p-calendar{width:100%}::ng-deep app-date-picker span.p-calendar input{height:40px}\n"] }]
        }], ctorParameters: function () { return [{ type: i1.ControlContainer }, { type: i2.PrimeNGConfig }]; }, propDecorators: { property: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], dateFormat: [{
                type: Input
            }], onChange: [{
                type: Input
            }], onChanged: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,