import { Component, EventEmitter, Input, Output } from '@angular/core';
import { INPUT_TYPE } from '../../app-config';
import { BaseControl } from '../../models/base.control';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "../control-messages/control-messages.component";
import * as i4 from "../../directive/input-special.directive";
import * as i5 from "../../directive/auto-focus.directive";
import * as i6 from "../../directive/input-trim.directive";
export class TextInputComponent {
    constructor() {
        // formControl of this input
        this.property = new BaseControl();
        // type of input: TEXT, TEXT-AREA, ...
        this.type = INPUT_TYPE.TEXT;
        // placeHolder
        this.placeholder = '';
        this.disabled = false;
        this.required = false;
        this.onChange = new EventEmitter();
        this.onBlur = new EventEmitter();
        this.showPassword = false;
    }
    onBlurMethod(event) {
        const newValue = event.target.value?.trim();
        this.onBlur.emit(newValue);
    }
    onChangeMethod(event) {
        const newValue = event.target.value;
        this.property.setValue(newValue);
        this.property.markAsTouched();
        this.onChange.emit(newValue);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: TextInputComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: TextInputComponent, selector: "app-text-input", inputs: { property: "property", wrapClass: "wrapClass", type: "type", maxLength: "maxLength", rows: "rows", labelValue: "labelValue", placeholder: "placeholder", autofocus: "autofocus", disabled: "disabled", required: "required", readonly: "readonly" }, outputs: { onChange: "onChange", onBlur: "onBlur" }, ngImport: i0, template: "<div class=\"field\" [ngSwitch]=\"type\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire || required}\">{{ labelValue }}</label>\n    <ng-template [ngSwitchCase]=\"'text-area'\">\n        <textarea autoFocus=\"autoFocus\"\n            [formControl]=\"property\"\n            [maxlength]=\"maxLength\"\n            [autoFocus]=\"autofocus\"\n            [placeholder]=\"placeholder\"\n            [rows]=\"rows\"\n            [attr.disabled]=\"disabled ? true : null\"\n            [readonly]=\"readonly\"\n            class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\"\n            (blur)=\"property.markAsTouched(); onBlurMethod($event);\"\n            (input)=\"onChangeMethod($event)\"\n            >\n        </textarea>\n    </ng-template>\n    <!-- <ng-template [ngSwitchCase]=\"'number'\">\n        <p-inputNumber inputId=\"integeronly\" [(ngModel)]=\"value1\">\n        </p-inputNumber>\n    </ng-template> -->\n    <ng-template [ngSwitchCase]=\"'password'\">\n        <span class=\"p-input-icon-right w-100\">\n            <i [class]=\"showPassword ? 'pi pi-eye-slash' : 'pi pi-eye'\" (click)=\"showPassword = !showPassword\"></i>\n            <input *ngIf=\"!showPassword\" type=\"password\" [formControl]=\"property\" [placeholder]=\"placeholder\"\n                class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\" />\n            <input *ngIf=\"showPassword\" type=\"text\" [formControl]=\"property\" [placeholder]=\"placeholder\"\n                class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\" />\n        </span>\n    </ng-template>\n    <ng-template ngSwitchDefault>\n        <input type=\"text\" autoFocus=\"autoFocus\"\n            [formControl]=\"property\"\n            [maxlength]=\"maxLength\"\n            [autoFocus]=\"autofocus\"\n            [placeholder]=\"placeholder\"\n            [attr.disabled]=\"disabled ? true : null\"\n            [readonly]=\"readonly\"\n            class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\"\n            (blur)=\"property.markAsTouched(); onBlurMethod($event);\"\n            (input)=\"onChangeMethod($event)\"\n            >\n    </ng-template>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>", styles: [""], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i1.NgSwitch, selector: "[ngSwitch]", inputs: ["ngSwitch"] }, { kind: "directive", type: i1.NgSwitchCase, selector: "[ngSwitchCase]", inputs: ["ngSwitchCase"] }, { kind: "directive", type: i1.NgSwitchDefault, selector: "[ngSwitchDefault]" }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i3.ControlMessagesComponent, selector: "app-control-messages", inputs: ["control", "labelName"] }, { kind: "directive", type: i4.InputSpecialDirective, selector: "input[type=\"text\"],input[type=\"email\"],input[type=\"tel\"],input:not([othertype=\"url\"]),textarea", inputs: ["type", "othertype"] }, { kind: "directive", type: i5.AutoFocusDirective, selector: "[autoFocus]", inputs: ["autoFocus"] }, { kind: "directive", type: i6.InputTrimDirective, selector: "input[type=\"text\"], textarea[]", inputs: ["trim", "type"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: TextInputComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-text-input', template: "<div class=\"field\" [ngSwitch]=\"type\">\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire || required}\">{{ labelValue }}</label>\n    <ng-template [ngSwitchCase]=\"'text-area'\">\n        <textarea autoFocus=\"autoFocus\"\n            [formControl]=\"property\"\n            [maxlength]=\"maxLength\"\n            [autoFocus]=\"autofocus\"\n            [placeholder]=\"placeholder\"\n            [rows]=\"rows\"\n            [attr.disabled]=\"disabled ? true : null\"\n            [readonly]=\"readonly\"\n            class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\"\n            (blur)=\"property.markAsTouched(); onBlurMethod($event);\"\n            (input)=\"onChangeMethod($event)\"\n            >\n        </textarea>\n    </ng-template>\n    <!-- <ng-template [ngSwitchCase]=\"'number'\">\n        <p-inputNumber inputId=\"integeronly\" [(ngModel)]=\"value1\">\n        </p-inputNumber>\n    </ng-template> -->\n    <ng-template [ngSwitchCase]=\"'password'\">\n        <span class=\"p-input-icon-right w-100\">\n            <i [class]=\"showPassword ? 'pi pi-eye-slash' : 'pi pi-eye'\" (click)=\"showPassword = !showPassword\"></i>\n            <input *ngIf=\"!showPassword\" type=\"password\" [formControl]=\"property\" [placeholder]=\"placeholder\"\n                class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\" />\n            <input *ngIf=\"showPassword\" type=\"text\" [formControl]=\"property\" [placeholder]=\"placeholder\"\n                class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\" />\n        </span>\n    </ng-template>\n    <ng-template ngSwitchDefault>\n        <input type=\"text\" autoFocus=\"autoFocus\"\n            [formControl]=\"property\"\n            [maxlength]=\"maxLength\"\n            [autoFocus]=\"autofocus\"\n            [placeholder]=\"placeholder\"\n            [attr.disabled]=\"disabled ? true : null\"\n            [readonly]=\"readonly\"\n            class=\"text-base text-color surface-overlay p-2 border-1 border-solid surface-border border-round appearance-none outline-none focus:border-primary w-full\"\n            (blur)=\"property.markAsTouched(); onBlurMethod($event);\"\n            (input)=\"onChangeMethod($event)\"\n            >\n    </ng-template>\n    <app-control-messages [control]=\"property\"></app-control-messages>\n</div>" }]
        }], propDecorators: { property: [{
                type: Input
            }], wrapClass: [{
                type: Input
            }], type: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], rows: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], placeholder: [{
                type: Input
            }], autofocus: [{
                type: Input
            }], disabled: [{
                type: Input
            }], required: [{
                type: Input
            }], readonly: [{
                type: Input
            }], onChange: [{
                type: Output
            }], onBlur: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dC1pbnB1dC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyeC1zY29yZS9zcmMvbGliL3NoYXJlZC9jb21wb25lbnRzL3RleHQtaW5wdXQvdGV4dC1pbnB1dC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyeC1zY29yZS9zcmMvbGliL3NoYXJlZC9jb21wb25lbnRzL3RleHQtaW5wdXQvdGV4dC1pbnB1dC5jb21wb25lbnQuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3ZFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7Ozs7Ozs7O0FBT3hELE1BQU0sT0FBTyxrQkFBa0I7SUFML0I7UUFNRSw0QkFBNEI7UUFFckIsYUFBUSxHQUFnQixJQUFJLFdBQVcsRUFBRSxDQUFDO1FBSWpELHNDQUFzQztRQUUvQixTQUFJLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztRQVU5QixjQUFjO1FBRVAsZ0JBQVcsR0FBVyxFQUFFLENBQUM7UUFLekIsYUFBUSxHQUFZLEtBQUssQ0FBQztRQUcxQixhQUFRLEdBQVksS0FBSyxDQUFDO1FBTXZCLGFBQVEsR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBRW5DLFdBQU0sR0FBRyxJQUFJLFlBQVksRUFBTyxDQUFDO1FBQzNDLGlCQUFZLEdBQVksS0FBSyxDQUFDO0tBWS9CO0lBWEMsWUFBWSxDQUFDLEtBQVk7UUFDdkIsTUFBTSxRQUFRLEdBQUksS0FBSyxDQUFDLE1BQTJCLENBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ2xFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxjQUFjLENBQUMsS0FBWTtRQUN6QixNQUFNLFFBQVEsR0FBSSxLQUFLLENBQUMsTUFBMkIsQ0FBQyxLQUFLLENBQUM7UUFDMUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDakMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUM5QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUMvQixDQUFDOzhHQWpEVSxrQkFBa0I7a0dBQWxCLGtCQUFrQix5V0NUL0Isa21GQTRDTTs7MkZEbkNPLGtCQUFrQjtrQkFMOUIsU0FBUzsrQkFDRSxnQkFBZ0I7OEJBT25CLFFBQVE7c0JBRGQsS0FBSztnQkFJQyxTQUFTO3NCQURmLEtBQUs7Z0JBSUMsSUFBSTtzQkFEVixLQUFLO2dCQUlDLFNBQVM7c0JBRGYsS0FBSztnQkFJQyxJQUFJO3NCQURWLEtBQUs7Z0JBSUMsVUFBVTtzQkFEaEIsS0FBSztnQkFJQyxXQUFXO3NCQURqQixLQUFLO2dCQUlFLFNBQVM7c0JBRGYsS0FBSztnQkFHQSxRQUFRO3NCQURkLEtBQUs7Z0JBSUMsUUFBUTtzQkFEZCxLQUFLO2dCQUtDLFFBQVE7c0JBRGQsS0FBSztnQkFHSSxRQUFRO3NCQUFqQixNQUFNO2dCQUVHLE1BQU07c0JBQWYsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IElOUFVUX1RZUEUgfSBmcm9tICcuLi8uLi9hcHAtY29uZmlnJztcclxuaW1wb3J0IHsgQmFzZUNvbnRyb2wgfSBmcm9tICcuLi8uLi9tb2RlbHMvYmFzZS5jb250cm9sJztcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gIHNlbGVjdG9yOiAnYXBwLXRleHQtaW5wdXQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi90ZXh0LWlucHV0LmNvbXBvbmVudC5odG1sJyxcclxuICBzdHlsZVVybHM6IFsnLi90ZXh0LWlucHV0LmNvbXBvbmVudC5zY3NzJ11cclxufSlcclxuZXhwb3J0IGNsYXNzIFRleHRJbnB1dENvbXBvbmVudCB7XHJcbiAgLy8gZm9ybUNvbnRyb2wgb2YgdGhpcyBpbnB1dFxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHByb3BlcnR5OiBCYXNlQ29udHJvbCA9IG5ldyBCYXNlQ29udHJvbCgpO1xyXG4gIC8vIHN0eWxlIGZvciB3cmFwXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgd3JhcENsYXNzITogc3RyaW5nO1xyXG4gIC8vIHR5cGUgb2YgaW5wdXQ6IFRFWFQsIFRFWFQtQVJFQSwgLi4uXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgdHlwZSA9IElOUFVUX1RZUEUuVEVYVDtcclxuICAvLyBtYXggbGVuZ3RoIG9mIGlucHV0XHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgbWF4TGVuZ3RoITogbnVtYmVyO1xyXG4gIC8vIHJvd3MgbnVtYmVyIG9mIHRleHQtYXJlYVxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHJvd3MhOiBudW1iZXI7XHJcbiAgLy8gdGl0bGUgZm9yIGxhYmxlXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgbGFiZWxWYWx1ZSE6IHN0cmluZztcclxuICAvLyBwbGFjZUhvbGRlclxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHBsYWNlaG9sZGVyOiBzdHJpbmcgPSAnJztcclxuICAgLy8gaW5wdXQgYXV0byBmb2N1cyBvciBub3RcclxuICAgQElucHV0KClcclxuICAgcHVibGljIGF1dG9mb2N1cyE6IHN0cmluZztcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBkaXNhYmxlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyByZXF1aXJlZDogYm9vbGVhbiA9IGZhbHNlO1xyXG5cclxuICAvLyBpbnB1dCBqdXN0IGFsbG93IHZpZXdcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyByZWFkb25seSE6IHN0cmluZztcclxuICBcclxuICBAT3V0cHV0KCkgb25DaGFuZ2UgPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgQE91dHB1dCgpIG9uQmx1ciA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG4gIHNob3dQYXNzd29yZDogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIG9uQmx1ck1ldGhvZChldmVudDogRXZlbnQpIHtcclxuICAgIGNvbnN0IG5ld1ZhbHVlID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZT8udHJpbSgpO1xyXG4gICAgdGhpcy5vbkJsdXIuZW1pdChuZXdWYWx1ZSk7XHJcbiAgfVxyXG5cclxuICBvbkNoYW5nZU1ldGhvZChldmVudDogRXZlbnQpIHtcclxuICAgIGNvbnN0IG5ld1ZhbHVlID0gKGV2ZW50LnRhcmdldCBhcyBIVE1MSW5wdXRFbGVtZW50KS52YWx1ZTtcclxuICAgIHRoaXMucHJvcGVydHkuc2V0VmFsdWUobmV3VmFsdWUpO1xyXG4gICAgdGhpcy5wcm9wZXJ0eS5tYXJrQXNUb3VjaGVkKCk7XHJcbiAgICB0aGlzLm9uQ2hhbmdlLmVtaXQobmV3VmFsdWUpO1xyXG4gIH1cclxufVxyXG4iLCI8ZGl2IGNsYXNzPVwiZmllbGRcIiBbbmdTd2l0Y2hdPVwidHlwZVwiPlxuICAgIDxsYWJlbCBjbGFzcz1cImZvbnQtc2VtaWJvbGRcIiBbbmdDbGFzc109XCJ7J3JlcXVpcmVkJzogcHJvcGVydHkuaXNSZXF1aXJlIHx8IHJlcXVpcmVkfVwiPnt7IGxhYmVsVmFsdWUgfX08L2xhYmVsPlxuICAgIDxuZy10ZW1wbGF0ZSBbbmdTd2l0Y2hDYXNlXT1cIid0ZXh0LWFyZWEnXCI+XG4gICAgICAgIDx0ZXh0YXJlYSBhdXRvRm9jdXM9XCJhdXRvRm9jdXNcIlxuICAgICAgICAgICAgW2Zvcm1Db250cm9sXT1cInByb3BlcnR5XCJcbiAgICAgICAgICAgIFttYXhsZW5ndGhdPVwibWF4TGVuZ3RoXCJcbiAgICAgICAgICAgIFthdXRvRm9jdXNdPVwiYXV0b2ZvY3VzXCJcbiAgICAgICAgICAgIFtwbGFjZWhvbGRlcl09XCJwbGFjZWhvbGRlclwiXG4gICAgICAgICAgICBbcm93c109XCJyb3dzXCJcbiAgICAgICAgICAgIFthdHRyLmRpc2FibGVkXT1cImRpc2FibGVkID8gdHJ1ZSA6IG51bGxcIlxuICAgICAgICAgICAgW3JlYWRvbmx5XT1cInJlYWRvbmx5XCJcbiAgICAgICAgICAgIGNsYXNzPVwidGV4dC1iYXNlIHRleHQtY29sb3Igc3VyZmFjZS1vdmVybGF5IHAtMiBib3JkZXItMSBib3JkZXItc29saWQgc3VyZmFjZS1ib3JkZXIgYm9yZGVyLXJvdW5kIGFwcGVhcmFuY2Utbm9uZSBvdXRsaW5lLW5vbmUgZm9jdXM6Ym9yZGVyLXByaW1hcnkgdy1mdWxsXCJcbiAgICAgICAgICAgIChibHVyKT1cInByb3BlcnR5Lm1hcmtBc1RvdWNoZWQoKTsgb25CbHVyTWV0aG9kKCRldmVudCk7XCJcbiAgICAgICAgICAgIChpbnB1dCk9XCJvbkNoYW5nZU1ldGhvZCgkZXZlbnQpXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgPC90ZXh0YXJlYT5cbiAgICA8L25nLXRlbXBsYXRlPlxuICAgIDwhLS0gPG5nLXRlbXBsYXRlIFtuZ1N3aXRjaENhc2VdPVwiJ251bWJlcidcIj5cbiAgICAgICAgPHAtaW5wdXROdW1iZXIgaW5wdXRJZD1cImludGVnZXJvbmx5XCIgWyhuZ01vZGVsKV09XCJ2YWx1ZTFcIj5cbiAgICAgICAgPC9wLWlucHV0TnVtYmVyPlxuICAgIDwvbmctdGVtcGxhdGU+IC0tPlxuICAgIDxuZy10ZW1wbGF0ZSBbbmdTd2l0Y2hDYXNlXT1cIidwYXNzd29yZCdcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJwLWlucHV0LWljb24tcmlnaHQgdy0xMDBcIj5cbiAgICAgICAgICAgIDxpIFtjbGFzc109XCJzaG93UGFzc3dvcmQgPyAncGkgcGktZXllLXNsYXNoJyA6ICdwaSBwaS1leWUnXCIgKGNsaWNrKT1cInNob3dQYXNzd29yZCA9ICFzaG93UGFzc3dvcmRcIj48L2k+XG4gICAgICAgICAgICA8aW5wdXQgKm5nSWY9XCIhc2hvd1Bhc3N3b3JkXCIgdHlwZT1cInBhc3N3b3JkXCIgW2Zvcm1Db250cm9sXT1cInByb3BlcnR5XCIgW3BsYWNlaG9sZGVyXT1cInBsYWNlaG9sZGVyXCJcbiAgICAgICAgICAgICAgICBjbGFzcz1cInRleHQtYmFzZSB0ZXh0LWNvbG9yIHN1cmZhY2Utb3ZlcmxheSBwLTIgYm9yZGVyLTEgYm9yZGVyLXNvbGlkIHN1cmZhY2UtYm9yZGVyIGJvcmRlci1yb3VuZCBhcHBlYXJhbmNlLW5vbmUgb3V0bGluZS1ub25lIGZvY3VzOmJvcmRlci1wcmltYXJ5IHctZnVsbFwiIC8+XG4gICAgICAgICAgICA8aW5wdXQgKm5nSWY9XCJzaG93UGFzc3dvcmRcIiB0eXBlPVwidGV4dFwiIFtmb3JtQ29udHJvbF09XCJwcm9wZXJ0eVwiIFtwbGFjZWhvbGRlcl09XCJwbGFjZWhvbGRlclwiXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJ0ZXh0LWJhc2UgdGV4dC1jb2xvciBzdXJmYWNlLW92ZXJsYXkgcC0yIGJvcmRlci0xIGJvcmRlci1zb2xpZCBzdXJmYWNlLWJvcmRlciBib3JkZXItcm91bmQgYXBwZWFyYW5jZS1ub25lIG91dGxpbmUtbm9uZSBmb2N1czpib3JkZXItcHJpbWFyeSB3LWZ1bGxcIiAvPlxuICAgICAgICA8L3NwYW4+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8bmctdGVtcGxhdGUgbmdTd2l0Y2hEZWZhdWx0PlxuICAgICAgICA8aW5wdXQgdHlwZT1cInRleHRcIiBhdXRvRm9jdXM9XCJhdXRvRm9jdXNcIlxuICAgICAgICAgICAgW2Zvcm1Db250cm9sXT1cInByb3BlcnR5XCJcbiAgICAgICAgICAgIFttYXhsZW5ndGhdPVwibWF4TGVuZ3RoXCJcbiAgICAgICAgICAgIFthdXRvRm9jdXNdPVwiYXV0b2ZvY3VzXCJcbiAgICAgICAgICAgIFtwbGFjZWhvbGRlcl09XCJwbGFjZWhvbGRlclwiXG4gICAgICAgICAgICBbYXR0ci5kaXNhYmxlZF09XCJkaXNhYmxlZCA/IHRydWUgOiBudWxsXCJcbiAgICAgICAgICAgIFtyZWFkb25seV09XCJyZWFkb25seVwiXG4gICAgICAgICAgICBjbGFzcz1cInRleHQtYmFzZSB0ZXh0LWNvbG9yIHN1cmZhY2Utb3ZlcmxheSBwLTIgYm9yZGVyLTEgYm9yZGVyLXNvbGlkIHN1cmZhY2UtYm9yZGVyIGJvcmRlci1yb3VuZCBhcHBlYXJhbmNlLW5vbmUgb3V0bGluZS1ub25lIGZvY3VzOmJvcmRlci1wcmltYXJ5IHctZnVsbFwiXG4gICAgICAgICAgICAoYmx1cik9XCJwcm9wZXJ0eS5tYXJrQXNUb3VjaGVkKCk7IG9uQmx1ck1ldGhvZCgkZXZlbnQpO1wiXG4gICAgICAgICAgICAoaW5wdXQpPVwib25DaGFuZ2VNZXRob2QoJGV2ZW50KVwiXG4gICAgICAgICAgICA+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgICA8YXBwLWNvbnRyb2wtbWVzc2FnZXMgW2NvbnRyb2xdPVwicHJvcGVydHlcIj48L2FwcC1jb250cm9sLW1lc3NhZ2VzPlxuPC9kaXY+Il19