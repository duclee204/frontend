import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseComponent } from '../base-component/base-component.component';
import { BaseControl } from '../../public-api';
import { EmployeePickerDialogComponent } from '../employee-picker-dialog/employee-picker-dialog.component';
import { CommonUtils } from '../../services/common-utils.service';
import * as i0 from "@angular/core";
import * as i1 from "primeng/dynamicdialog";
import * as i2 from "angular-l10n";
import * as i3 from "@angular/common";
import * as i4 from "primeng/button";
import * as i5 from "primeng/tooltip";
import * as i6 from "@angular/forms";
import * as i7 from "primeng/inputtext";
import * as i8 from "../control-messages/control-messages.component";
import * as i9 from "../../directive/input-special.directive";
import * as i10 from "../../directive/input-trim.directive";
export class EmployeePickerComponent extends BaseComponent {
    constructor(_injector, dialogService, translate) {
        super(_injector);
        this._injector = _injector;
        this.dialogService = dialogService;
        this.translate = translate;
        // formControl of this input
        this.property = new BaseControl();
        this.onChange = new EventEmitter();
        this.dataTable = {};
        this.empName = '';
    }
    /**
     * ngOnInit
     */
    ngOnInit() {
    }
    /**
     * ngAfterViewInit
     */
    ngAfterViewInit() {
    }
    onSelect() {
        this.ref = this.dialogService.open(EmployeePickerDialogComponent, {
            header: 'Chọn cán bộ/học viên',
            width: CommonUtils.setWidthDiaglog('40%'),
            contentStyle: { overflow: 'auto' },
            baseZIndex: 99999,
            maximizable: true,
            data: {
                employeeService: this.employeeService
            }
        });
        this.ref.onClose.subscribe((node) => {
            if (node) {
                this.empName = `${node.code} - ${node.fullname}`;
                this.property.setValue(node.id);
                // callback on chose item
                this.onChange.emit(node);
            }
        });
    }
    /**
     * ngOnChanges
     */
    ngOnChanges() {
        this.onChangeOrgId();
    }
    onChangeOrgId() {
        if (!this.property) {
            return;
        }
        if (!this.property.value || this.property.value == 0) {
            return;
        }
        // thuc hien lay ten de hien thi
        this.employeeService.findOne(this.property.value)
            .subscribe((res) => {
            const data = res.data;
            if (data) {
                this.empName = `${data.code} - ${data.fullname}`;
            }
        });
    }
    onClear() {
        this.empName = '';
        this.property.setValue(null);
        this.onChange.emit(null);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: EmployeePickerComponent, deps: [{ token: i0.Injector }, { token: i1.DialogService }, { token: i2.L10nTranslationService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: EmployeePickerComponent, selector: "app-employee-picker", inputs: { property: "property", labelValue: "labelValue", employeeService: "employeeService" }, outputs: { onChange: "onChange" }, usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div class=\"field\">\r\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\r\n    <div class=\"p-inputgroup w-full\">\r\n        <input class=\"flex-1\" type=\"text\" pInputText [(ngModel)]=\"empName\" [pTooltip]=\"empName\" (click)=\"onSelect()\"/>\r\n        <button\r\n            type=\"button\"\r\n            pButton\r\n            icon=\"pi pi-times\"\r\n            class=\"p-button-danger\"\r\n            [pTooltip]=\"'common.orgSelector.clear' | translateAsync\"\r\n            (click)=\"onClear()\"></button>\r\n        <button\r\n            type=\"button\"\r\n            pButton\r\n            icon=\"pi pi-check\"\r\n            class=\"p-button-info\"\r\n            [pTooltip]=\"'common.orgSelector.select' | translateAsync\"\r\n            (click)=\"onSelect()\"></button>\r\n    </div>\r\n    <app-control-messages [control]=\"property\"></app-control-messages>\r\n</div>\r\n", styles: [""], dependencies: [{ kind: "directive", type: i3.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i4.ButtonDirective, selector: "[pButton]", inputs: ["iconPos", "loadingIcon", "label", "icon", "loading"] }, { kind: "directive", type: i5.Tooltip, selector: "[pTooltip]", inputs: ["tooltipPosition", "tooltipEvent", "appendTo", "positionStyle", "tooltipStyleClass", "tooltipZIndex", "escape", "showDelay", "hideDelay", "life", "positionTop", "positionLeft", "autoHide", "fitContent", "hideOnEscape", "pTooltip", "tooltipDisabled", "tooltipOptions"] }, { kind: "directive", type: i6.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i6.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i6.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "directive", type: i7.InputText, selector: "[pInputText]" }, { kind: "component", type: i8.ControlMessagesComponent, selector: "app-control-messages", inputs: ["control", "labelName"] }, { kind: "directive", type: i9.InputSpecialDirective, selector: "input[type=\"text\"],input[type=\"email\"],input[type=\"tel\"],input:not([othertype=\"url\"]),textarea", inputs: ["type", "othertype"] }, { kind: "directive", type: i10.InputTrimDirective, selector: "input[type=\"text\"], textarea[]", inputs: ["trim", "type"] }, { kind: "pipe", type: i2.L10nTranslateAsyncPipe, name: "translateAsync" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: EmployeePickerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-employee-picker', template: "<div class=\"field\">\r\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\r\n    <div class=\"p-inputgroup w-full\">\r\n        <input class=\"flex-1\" type=\"text\" pInputText [(ngModel)]=\"empName\" [pTooltip]=\"empName\" (click)=\"onSelect()\"/>\r\n        <button\r\n            type=\"button\"\r\n            pButton\r\n            icon=\"pi pi-times\"\r\n            class=\"p-button-danger\"\r\n            [pTooltip]=\"'common.orgSelector.clear' | translateAsync\"\r\n            (click)=\"onClear()\"></button>\r\n        <button\r\n            type=\"button\"\r\n            pButton\r\n            icon=\"pi pi-check\"\r\n            class=\"p-button-info\"\r\n            [pTooltip]=\"'common.orgSelector.select' | translateAsync\"\r\n            (click)=\"onSelect()\"></button>\r\n    </div>\r\n    <app-control-messages [control]=\"property\"></app-control-messages>\r\n</div>\r\n" }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.DialogService }, { type: i2.L10nTranslationService }]; }, propDecorators: { property: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], employeeService: [{
                type: Input
            }], onChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,