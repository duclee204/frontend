import { Component, Injectable, Inject, inject } from '@angular/core';
import { CommonUtils } from '../../services/common-utils.service';
import { ConfirmationService } from 'primeng/api';
import { L10N_LOCALE } from 'angular-l10n';
import { ACTION_FORM, INPUT_TYPE } from '../../app-config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../../app-config";
export class BaseComponent {
    constructor(injector, actr, _resource, actionForm) {
        this.injector = injector;
        this.actr = actr;
        this._resource = _resource;
        this.actionForm = ACTION_FORM.VIEW;
        this.resource = '';
        this.propertyConfigs = new Array();
        this.locale = inject(L10N_LOCALE);
        this.INPUT_TYPE = INPUT_TYPE;
        this.confirmationService = injector.get(ConfirmationService);
        this.commonUtil = injector.get(CommonUtils);
        if (actionForm) {
            this.actionForm = actionForm;
        }
        if (_resource) {
            this.resource = _resource;
        }
        // this.findPropertyDetails();
        // this.getPermissions();
    }
    /**
     * Build FormGroup
     * @param formData value of controls (Ex: data)
     * @param formConfig object formConfig (Ex: formConfig)
     * @param actionForm action of this Form (Ex: ACTION_FORM.INSERT)
     * @param validateForm validate of FormGroup
     */
    buildForm(formData, formConfig, actionForm, validateForm) {
        if (actionForm) {
            this.actionForm = actionForm;
            // console.log('ActionForm is being built ->', this.actionForm);
        }
        return CommonUtils.createFormNew(this.resource, this.actionForm, formData, formConfig, this.propertyConfigs, validateForm);
    }
    /**
     * confirmMessage
     */
    confirmMessage(messageCode, accept, reject) {
        const message = messageCode || 'Confirm Message';
        const header = 'Xác nhận';
        const btnSave = 'Đồng ý';
        const btnCancel = 'Hủy';
        this.confirmationService.confirm({
            message: message,
            header: header,
            icon: 'pi pi-exclamation-triangle',
            accept: accept,
            reject: reject,
            acceptLabel: btnSave,
            rejectLabel: btnCancel
        });
    }
    requestIsSuccess(res) {
        return res && res.type == 'SUCCESS';
    }
    havePermission(action, resource) {
        return CommonUtils.havePermission(action, resource);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: BaseComponent, deps: [{ token: i0.Injector }, { token: i1.ActivatedRoute }, { token: 'isFactory' }, { token: i2.ACTION_FORM }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: BaseComponent, selector: "app-base-component", ngImport: i0, template: "<p>base-component works!</p>\n" }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: BaseComponent }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: BaseComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-base-component', template: "<p>base-component works!</p>\n" }]
        }, {
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.ActivatedRoute }, { type: undefined, decorators: [{
                    type: Inject,
                    args: ['isFactory']
                }] }, { type: i2.ACTION_FORM }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS1jb21wb25lbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhcngtc2NvcmUvc3JjL2xpYi9zaGFyZWQvY29tcG9uZW50cy9iYXNlLWNvbXBvbmVudC9iYXNlLWNvbXBvbmVudC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyeC1zY29yZS9zcmMvbGliL3NoYXJlZC9jb21wb25lbnRzL2Jhc2UtY29tcG9uZW50L2Jhc2UtY29tcG9uZW50LmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFdEUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLHFDQUFxQyxDQUFDO0FBRWxFLE9BQU8sRUFBRSxtQkFBbUIsRUFBb0MsTUFBTSxhQUFhLENBQUM7QUFFcEYsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMzQyxPQUFPLEVBQUUsV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLGtCQUFrQixDQUFDOzs7O0FBVTNELE1BQU0sT0FBTyxhQUFhO0lBU3hCLFlBQW1CLFFBQWtCLEVBQzFCLElBQXFCLEVBQ0MsU0FBa0IsRUFDL0MsVUFBd0I7UUFIVCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQzFCLFNBQUksR0FBSixJQUFJLENBQWlCO1FBQ0MsY0FBUyxHQUFULFNBQVMsQ0FBUztRQVY1QyxlQUFVLEdBQWdCLFdBQVcsQ0FBQyxJQUFJLENBQUM7UUFDM0MsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNkLG9CQUFlLEdBQUcsSUFBSSxLQUFLLEVBQXlCLENBQUM7UUFJNUQsV0FBTSxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUM3QixlQUFVLEdBQUcsVUFBVSxDQUFDO1FBS3RCLElBQUksQ0FBQyxtQkFBbUIsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7UUFDN0QsSUFBSSxDQUFDLFVBQVUsR0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzVDLElBQUksVUFBVSxFQUFFO1lBQ2QsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7U0FDOUI7UUFDRCxJQUFJLFNBQVMsRUFBRTtZQUNiLElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1NBQzNCO1FBQ0QsOEJBQThCO1FBQzlCLHlCQUF5QjtJQUMzQixDQUFDO0lBR0Q7Ozs7OztPQU1HO0lBQ0ksU0FBUyxDQUFDLFFBQWEsRUFBRSxVQUFlLEVBQUUsVUFBd0IsRUFBRSxZQUFrQjtRQUMzRixJQUFJLFVBQVUsRUFBRTtZQUNkLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1lBQzdCLGdFQUFnRTtTQUNqRTtRQUNELE9BQU8sV0FBVyxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFBUSxFQUFFLFVBQVUsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQzdILENBQUM7SUFFRDs7T0FFRztJQUNILGNBQWMsQ0FBQyxXQUFtQixFQUFFLE1BQWdCLEVBQUUsTUFBZ0I7UUFDcEUsTUFBTSxPQUFPLEdBQUcsV0FBVyxJQUFJLGlCQUFpQixDQUFDO1FBQ2pELE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQztRQUMxQixNQUFNLE9BQU8sR0FBRyxRQUFRLENBQUM7UUFDekIsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUM7WUFDL0IsT0FBTyxFQUFFLE9BQU87WUFDaEIsTUFBTSxFQUFFLE1BQU07WUFDZCxJQUFJLEVBQUUsNEJBQTRCO1lBQ2xDLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFLE1BQU07WUFDZCxXQUFXLEVBQUUsT0FBTztZQUNwQixXQUFXLEVBQUUsU0FBUztTQUN2QixDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsZ0JBQWdCLENBQUMsR0FBUTtRQUN2QixPQUFPLEdBQUcsSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLFNBQVMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsY0FBYyxDQUFDLE1BQWMsRUFBRSxRQUFnQjtRQUM3QyxPQUFPLFdBQVcsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3RELENBQUM7OEdBbEVVLGFBQWEsd0VBV1osV0FBVztrR0FYWixhQUFhLDBEQ2pCMUIsZ0NBQ0E7a0hEZ0JhLGFBQWE7OzJGQUFiLGFBQWE7a0JBTnpCLFNBQVM7K0JBQ0Usb0JBQW9COztrQkFJL0IsVUFBVTs7MEJBWUosTUFBTTsyQkFBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbmplY3RhYmxlLCBJbmplY3QsIGluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XHJcbmltcG9ydCB7IENvbW1vblV0aWxzIH0gZnJvbSAnLi4vLi4vc2VydmljZXMvY29tbW9uLXV0aWxzLnNlcnZpY2UnO1xyXG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IENvbmZpcm1hdGlvblNlcnZpY2UsIE1lc3NhZ2VTZXJ2aWNlLCBDb25maXJtRXZlbnRUeXBlIH0gZnJvbSAncHJpbWVuZy9hcGknO1xyXG5pbXBvcnQgeyBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBMMTBOX0xPQ0FMRSB9IGZyb20gJ2FuZ3VsYXItbDEwbic7XHJcbmltcG9ydCB7IEFDVElPTl9GT1JNLCBJTlBVVF9UWVBFIH0gZnJvbSAnLi4vLi4vYXBwLWNvbmZpZyc7XHJcbmltcG9ydCB7IFN5c1Byb3BlcnR5RGV0YWlsQmVhbiB9IGZyb20gJy4uLy4uL21vZGVscy9zeXMtcHJvcGVydHktZGV0YWlscy5tb2RlbCc7XHJcblxyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtYmFzZS1jb21wb25lbnQnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9iYXNlLWNvbXBvbmVudC5jb21wb25lbnQuaHRtbCcsXHJcbn0pXHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCYXNlQ29tcG9uZW50IHtcclxuICBwdWJsaWMgYWN0aW9uRm9ybTogQUNUSU9OX0ZPUk0gPSBBQ1RJT05fRk9STS5WSUVXO1xyXG4gIHB1YmxpYyByZXNvdXJjZSA9ICcnO1xyXG4gIHB1YmxpYyBwcm9wZXJ0eUNvbmZpZ3MgPSBuZXcgQXJyYXk8U3lzUHJvcGVydHlEZXRhaWxCZWFuPigpO1xyXG4gIHB1YmxpYyBjb25maXJtYXRpb25TZXJ2aWNlOiBDb25maXJtYXRpb25TZXJ2aWNlO1xyXG4gIHB1YmxpYyBjb21tb25VdGlsOiBDb21tb25VdGlscztcclxuICAgXHJcbiAgbG9jYWxlID0gaW5qZWN0KEwxME5fTE9DQUxFKTtcclxuICBJTlBVVF9UWVBFID0gSU5QVVRfVFlQRTtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgaW5qZWN0b3I6IEluamVjdG9yXHJcbiAgICAsIHB1YmxpYyBhY3RyPzogQWN0aXZhdGVkUm91dGVcclxuICAgICwgQEluamVjdCgnaXNGYWN0b3J5JykgcHJpdmF0ZSBfcmVzb3VyY2U/OiBzdHJpbmdcclxuICAgICwgYWN0aW9uRm9ybT86IEFDVElPTl9GT1JNKSB7XHJcbiAgICB0aGlzLmNvbmZpcm1hdGlvblNlcnZpY2UgPSBpbmplY3Rvci5nZXQoQ29uZmlybWF0aW9uU2VydmljZSk7XHJcbiAgICB0aGlzLmNvbW1vblV0aWwgPSBpbmplY3Rvci5nZXQoQ29tbW9uVXRpbHMpO1xyXG4gICAgaWYgKGFjdGlvbkZvcm0pIHtcclxuICAgICAgdGhpcy5hY3Rpb25Gb3JtID0gYWN0aW9uRm9ybTtcclxuICAgIH1cclxuICAgIGlmIChfcmVzb3VyY2UpIHtcclxuICAgICAgdGhpcy5yZXNvdXJjZSA9IF9yZXNvdXJjZTtcclxuICAgIH1cclxuICAgIC8vIHRoaXMuZmluZFByb3BlcnR5RGV0YWlscygpO1xyXG4gICAgLy8gdGhpcy5nZXRQZXJtaXNzaW9ucygpO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIEJ1aWxkIEZvcm1Hcm91cFxyXG4gICAqIEBwYXJhbSBmb3JtRGF0YSB2YWx1ZSBvZiBjb250cm9scyAoRXg6IGRhdGEpXHJcbiAgICogQHBhcmFtIGZvcm1Db25maWcgb2JqZWN0IGZvcm1Db25maWcgKEV4OiBmb3JtQ29uZmlnKVxyXG4gICAqIEBwYXJhbSBhY3Rpb25Gb3JtIGFjdGlvbiBvZiB0aGlzIEZvcm0gKEV4OiBBQ1RJT05fRk9STS5JTlNFUlQpXHJcbiAgICogQHBhcmFtIHZhbGlkYXRlRm9ybSB2YWxpZGF0ZSBvZiBGb3JtR3JvdXBcclxuICAgKi9cclxuICBwdWJsaWMgYnVpbGRGb3JtKGZvcm1EYXRhOiBhbnksIGZvcm1Db25maWc6IGFueSwgYWN0aW9uRm9ybT86IEFDVElPTl9GT1JNLCB2YWxpZGF0ZUZvcm0/OiBhbnksKTogRm9ybUdyb3VwIHtcclxuICAgIGlmIChhY3Rpb25Gb3JtKSB7XHJcbiAgICAgIHRoaXMuYWN0aW9uRm9ybSA9IGFjdGlvbkZvcm07XHJcbiAgICAgIC8vIGNvbnNvbGUubG9nKCdBY3Rpb25Gb3JtIGlzIGJlaW5nIGJ1aWx0IC0+JywgdGhpcy5hY3Rpb25Gb3JtKTtcclxuICAgIH1cclxuICAgIHJldHVybiBDb21tb25VdGlscy5jcmVhdGVGb3JtTmV3KHRoaXMucmVzb3VyY2UsIHRoaXMuYWN0aW9uRm9ybSwgZm9ybURhdGEsIGZvcm1Db25maWcsIHRoaXMucHJvcGVydHlDb25maWdzLCB2YWxpZGF0ZUZvcm0pO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogY29uZmlybU1lc3NhZ2VcclxuICAgKi9cclxuICBjb25maXJtTWVzc2FnZShtZXNzYWdlQ29kZTogc3RyaW5nLCBhY2NlcHQ6IEZ1bmN0aW9uLCByZWplY3Q6IEZ1bmN0aW9uKSB7XHJcbiAgICBjb25zdCBtZXNzYWdlID0gbWVzc2FnZUNvZGUgfHwgJ0NvbmZpcm0gTWVzc2FnZSc7XHJcbiAgICBjb25zdCBoZWFkZXIgPSAnWMOhYyBuaOG6rW4nO1xyXG4gICAgY29uc3QgYnRuU2F2ZSA9ICfEkOG7k25nIMO9JztcclxuICAgIGNvbnN0IGJ0bkNhbmNlbCA9ICdI4buneSc7XHJcbiAgICB0aGlzLmNvbmZpcm1hdGlvblNlcnZpY2UuY29uZmlybSh7XHJcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXHJcbiAgICAgIGhlYWRlcjogaGVhZGVyLFxyXG4gICAgICBpY29uOiAncGkgcGktZXhjbGFtYXRpb24tdHJpYW5nbGUnLFxyXG4gICAgICBhY2NlcHQ6IGFjY2VwdCxcclxuICAgICAgcmVqZWN0OiByZWplY3QsXHJcbiAgICAgIGFjY2VwdExhYmVsOiBidG5TYXZlLFxyXG4gICAgICByZWplY3RMYWJlbDogYnRuQ2FuY2VsXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlcXVlc3RJc1N1Y2Nlc3MocmVzOiBhbnkpIHtcclxuICAgIHJldHVybiByZXMgJiYgcmVzLnR5cGUgPT0gJ1NVQ0NFU1MnO1xyXG4gIH1cclxuXHJcbiAgaGF2ZVBlcm1pc3Npb24oYWN0aW9uOiBzdHJpbmcsIHJlc291cmNlOiBzdHJpbmcpIHtcclxuICAgIHJldHVybiBDb21tb25VdGlscy5oYXZlUGVybWlzc2lvbihhY3Rpb24sIHJlc291cmNlKTtcclxuICB9XHJcbn1cclxuIiwiPHA+YmFzZS1jb21wb25lbnQgd29ya3MhPC9wPlxuIl19