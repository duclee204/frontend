import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseControl } from '../../public-api';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "primeng/multiselect";
import * as i4 from "../control-messages/control-messages.component";
export class MultiSelectComponent {
    constructor() {
        // formControl of this input
        this.property = new BaseControl();
        this.options = [];
        this.optionLabel = '';
        this.optionValue = '';
        this.labelValue = '';
        this.showClear = true;
        this.onChange = new EventEmitter();
    }
    _onChange(event) {
        this.onChange.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: MultiSelectComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: MultiSelectComponent, selector: "app-multi-select", inputs: { property: "property", options: "options", optionLabel: "optionLabel", optionValue: "optionValue", labelValue: "labelValue", showClear: "showClear" }, outputs: { onChange: "onChange" }, ngImport: i0, template: "<div class=\"field\">\r\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\r\n    <p-multiSelect\r\n        [formControl]=\"property\"\r\n        [options]=\"options\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [filter]=\"true\"\r\n        [filterBy]=\"optionLabel\"\r\n        [showClear]=\"showClear\"\r\n        display=\"chip\"\r\n        appendTo=\"body\"\r\n        class=\"inline-block w-full\"\r\n        emptyFilterMessage=\"Kh\u00F4ng t\u00ECm th\u1EA5y d\u1EEF li\u1EC7u\"\r\n        emptyMessage=\"Kh\u00F4ng t\u00ECm th\u1EA5y d\u1EEF li\u1EC7u\"\r\n        [displaySelectedLabel]=\"true\"\r\n        (onChange)=\"_onChange($event)\"></p-multiSelect>\r\n    <app-control-messages [control]=\"property\"></app-control-messages>\r\n</div>", styles: ["::ng-deep app-multi-select .p-multiselect{width:100%}::ng-deep app-multi-select .p-multiselect-token{margin-right:4px}\n"], dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.FormControlDirective, selector: "[formControl]", inputs: ["formControl", "disabled", "ngModel"], outputs: ["ngModelChange"], exportAs: ["ngForm"] }, { kind: "component", type: i3.MultiSelect, selector: "p-multiSelect", inputs: ["style", "styleClass", "panelStyle", "panelStyleClass", "inputId", "disabled", "readonly", "group", "filter", "filterPlaceHolder", "filterLocale", "overlayVisible", "tabindex", "appendTo", "dataKey", "name", "label", "ariaLabelledBy", "displaySelectedLabel", "maxSelectedLabels", "selectedItemsLabel", "showToggleAll", "emptyFilterMessage", "emptyMessage", "resetFilterOnHide", "dropdownIcon", "optionLabel", "optionValue", "optionDisabled", "optionGroupLabel", "optionGroupChildren", "showHeader", "filterBy", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "overlayOptions", "ariaFilterLabel", "filterMatchMode", "tooltip", "tooltipPosition", "tooltipPositionStyle", "tooltipStyleClass", "autofocusFilter", "display", "autocomplete", "showClear", "autoZIndex", "baseZIndex", "showTransitionOptions", "hideTransitionOptions", "defaultLabel", "placeholder", "options", "filterValue", "itemSize", "selectionLimit"], outputs: ["onChange", "onFilter", "onFocus", "onBlur", "onClick", "onClear", "onPanelShow", "onPanelHide", "onLazyLoad", "onRemove"] }, { kind: "component", type: i4.ControlMessagesComponent, selector: "app-control-messages", inputs: ["control", "labelName"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: MultiSelectComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-multi-select', template: "<div class=\"field\">\r\n    <label class=\"font-semibold\" [ngClass]=\"{'required': property.isRequire}\">{{ labelValue }}</label>\r\n    <p-multiSelect\r\n        [formControl]=\"property\"\r\n        [options]=\"options\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [filter]=\"true\"\r\n        [filterBy]=\"optionLabel\"\r\n        [showClear]=\"showClear\"\r\n        display=\"chip\"\r\n        appendTo=\"body\"\r\n        class=\"inline-block w-full\"\r\n        emptyFilterMessage=\"Kh\u00F4ng t\u00ECm th\u1EA5y d\u1EEF li\u1EC7u\"\r\n        emptyMessage=\"Kh\u00F4ng t\u00ECm th\u1EA5y d\u1EEF li\u1EC7u\"\r\n        [displaySelectedLabel]=\"true\"\r\n        (onChange)=\"_onChange($event)\"></p-multiSelect>\r\n    <app-control-messages [control]=\"property\"></app-control-messages>\r\n</div>", styles: ["::ng-deep app-multi-select .p-multiselect{width:100%}::ng-deep app-multi-select .p-multiselect-token{margin-right:4px}\n"] }]
        }], propDecorators: { property: [{
                type: Input
            }], options: [{
                type: Input
            }], optionLabel: [{
                type: Input
            }], optionValue: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], showClear: [{
                type: Input
            }], onChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXJ4LXNjb3JlL3NyYy9saWIvc2hhcmVkL2NvbXBvbmVudHMvbXVsdGktc2VsZWN0L211bHRpLXNlbGVjdC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyeC1zY29yZS9zcmMvbGliL3NoYXJlZC9jb21wb25lbnRzL211bHRpLXNlbGVjdC9tdWx0aS1zZWxlY3QuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN2RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sa0JBQWtCLENBQUM7Ozs7OztBQU8vQyxNQUFNLE9BQU8sb0JBQW9CO0lBTGpDO1FBTUUsNEJBQTRCO1FBRXJCLGFBQVEsR0FBZ0IsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQUcxQyxZQUFPLEdBQWUsRUFBRSxDQUFDO1FBR3pCLGdCQUFXLEdBQVcsRUFBRSxDQUFDO1FBR3pCLGdCQUFXLEdBQVcsRUFBRSxDQUFDO1FBR3pCLGVBQVUsR0FBVyxFQUFFLENBQUM7UUFHeEIsY0FBUyxHQUFZLElBQUksQ0FBQztRQUcxQixhQUFRLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7S0FLOUQ7SUFIQyxTQUFTLENBQUMsS0FBd0I7UUFDaEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDNUIsQ0FBQzs4R0F6QlUsb0JBQW9CO2tHQUFwQixvQkFBb0IsMlBDUmpDLDAxQkFrQk07OzJGRFZPLG9CQUFvQjtrQkFMaEMsU0FBUzsrQkFDRSxrQkFBa0I7OEJBT3JCLFFBQVE7c0JBRGQsS0FBSztnQkFJQyxPQUFPO3NCQURiLEtBQUs7Z0JBSUMsV0FBVztzQkFEakIsS0FBSztnQkFJQyxXQUFXO3NCQURqQixLQUFLO2dCQUlDLFVBQVU7c0JBRGhCLEtBQUs7Z0JBSUMsU0FBUztzQkFEZixLQUFLO2dCQUlDLFFBQVE7c0JBRGQsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJhc2VDb250cm9sIH0gZnJvbSAnLi4vLi4vcHVibGljLWFwaSc7XHJcblxyXG5AQ29tcG9uZW50KHtcclxuICBzZWxlY3RvcjogJ2FwcC1tdWx0aS1zZWxlY3QnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9tdWx0aS1zZWxlY3QuY29tcG9uZW50Lmh0bWwnLFxyXG4gIHN0eWxlVXJsczogWycuL211bHRpLXNlbGVjdC5jb21wb25lbnQuc2NzcyddXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBNdWx0aVNlbGVjdENvbXBvbmVudCB7XHJcbiAgLy8gZm9ybUNvbnRyb2wgb2YgdGhpcyBpbnB1dFxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIHByb3BlcnR5OiBCYXNlQ29udHJvbCA9IG5ldyBCYXNlQ29udHJvbCgpO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBvcHRpb25zOiBBcnJheTxhbnk+ID0gW107XHJcblxyXG4gIEBJbnB1dCgpXHJcbiAgcHVibGljIG9wdGlvbkxhYmVsOiBzdHJpbmcgPSAnJztcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgb3B0aW9uVmFsdWU6IHN0cmluZyA9ICcnO1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBsYWJlbFZhbHVlOiBzdHJpbmcgPSAnJztcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgc2hvd0NsZWFyOiBib29sZWFuID0gdHJ1ZTtcclxuXHJcbiAgQE91dHB1dCgpXHJcbiAgcHVibGljIG9uQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xyXG5cclxuICBfb25DaGFuZ2UoZXZlbnQ6IEV2ZW50RW1pdHRlcjxhbnk+KSB7XHJcbiAgICB0aGlzLm9uQ2hhbmdlLmVtaXQoZXZlbnQpO1xyXG4gIH1cclxufVxyXG4iLCI8ZGl2IGNsYXNzPVwiZmllbGRcIj5cclxuICAgIDxsYWJlbCBjbGFzcz1cImZvbnQtc2VtaWJvbGRcIiBbbmdDbGFzc109XCJ7J3JlcXVpcmVkJzogcHJvcGVydHkuaXNSZXF1aXJlfVwiPnt7IGxhYmVsVmFsdWUgfX08L2xhYmVsPlxyXG4gICAgPHAtbXVsdGlTZWxlY3RcclxuICAgICAgICBbZm9ybUNvbnRyb2xdPVwicHJvcGVydHlcIlxyXG4gICAgICAgIFtvcHRpb25zXT1cIm9wdGlvbnNcIlxyXG4gICAgICAgIFtvcHRpb25MYWJlbF09XCJvcHRpb25MYWJlbFwiXHJcbiAgICAgICAgW29wdGlvblZhbHVlXT1cIm9wdGlvblZhbHVlXCJcclxuICAgICAgICBbZmlsdGVyXT1cInRydWVcIlxyXG4gICAgICAgIFtmaWx0ZXJCeV09XCJvcHRpb25MYWJlbFwiXHJcbiAgICAgICAgW3Nob3dDbGVhcl09XCJzaG93Q2xlYXJcIlxyXG4gICAgICAgIGRpc3BsYXk9XCJjaGlwXCJcclxuICAgICAgICBhcHBlbmRUbz1cImJvZHlcIlxyXG4gICAgICAgIGNsYXNzPVwiaW5saW5lLWJsb2NrIHctZnVsbFwiXHJcbiAgICAgICAgZW1wdHlGaWx0ZXJNZXNzYWdlPVwiS2jDtG5nIHTDrG0gdGjhuqV5IGThu68gbGnhu4d1XCJcclxuICAgICAgICBlbXB0eU1lc3NhZ2U9XCJLaMO0bmcgdMOsbSB0aOG6pXkgZOG7ryBsaeG7h3VcIlxyXG4gICAgICAgIFtkaXNwbGF5U2VsZWN0ZWRMYWJlbF09XCJ0cnVlXCJcclxuICAgICAgICAob25DaGFuZ2UpPVwiX29uQ2hhbmdlKCRldmVudClcIj48L3AtbXVsdGlTZWxlY3Q+XHJcbiAgICA8YXBwLWNvbnRyb2wtbWVzc2FnZXMgW2NvbnRyb2xdPVwicHJvcGVydHlcIj48L2FwcC1jb250cm9sLW1lc3NhZ2VzPlxyXG48L2Rpdj4iXX0=