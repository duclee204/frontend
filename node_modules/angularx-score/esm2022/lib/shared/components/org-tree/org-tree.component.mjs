import { Component, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "primeng/dynamicdialog";
import * as i2 from "primeng/tree";
export class OrgTreeComponent {
    constructor(_injector, dialogService) {
        this._injector = _injector;
        this.dialogService = dialogService;
        this.onSelectNode = new EventEmitter();
        this.loading = false;
    }
    ngAfterViewInit() {
        this.loading = true;
        this.orgService.initOrgTree().subscribe((res) => {
            this.orgTree = res?.data;
            this.loading = false;
        });
    }
    nodeExpand(event) {
        if (!!event.node.children) {
            return;
        }
        if (event.node) {
            this.loading = true;
            setTimeout(() => {
                this.orgService.getChildOrg(event.node.key).subscribe((res) => {
                    event.node.children = res.data;
                });
                this.loading = false;
                // this.cd.markForCheck();
            }, 200);
        }
    }
    nodeSelect(event) {
        this.onSelectNode.emit(event.node);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: OrgTreeComponent, deps: [{ token: i0.Injector }, { token: i1.DialogService }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: OrgTreeComponent, selector: "app-org-tree", inputs: { orgService: "orgService" }, outputs: { onSelectNode: "onSelectNode" }, ngImport: i0, template: "<p-tree class=\"w-full md:w-30rem\" [value]=\"orgTree\" selectionMode=\"single\" [loading]=\"loading\"\n    (onNodeExpand)=\"nodeExpand($event)\" (onNodeSelect)=\"nodeSelect($event)\"></p-tree>", styles: ["::ng-deep app-org-tree .p-tree{border:none;padding:0}\n"], dependencies: [{ kind: "component", type: i2.Tree, selector: "p-tree", inputs: ["value", "selectionMode", "selection", "style", "styleClass", "contextMenu", "layout", "draggableScope", "droppableScope", "draggableNodes", "droppableNodes", "metaKeySelection", "propagateSelectionUp", "propagateSelectionDown", "loading", "loadingIcon", "emptyMessage", "ariaLabel", "togglerAriaLabel", "ariaLabelledBy", "validateDrop", "filter", "filterBy", "filterMode", "filterPlaceholder", "filteredNodes", "filterLocale", "scrollHeight", "lazy", "virtualScroll", "virtualScrollItemSize", "virtualScrollOptions", "indentation", "_templateMap", "trackBy", "virtualNodeHeight"], outputs: ["selectionChange", "onNodeSelect", "onNodeUnselect", "onNodeExpand", "onNodeCollapse", "onNodeContextMenuSelect", "onNodeDrop", "onLazyLoad", "onScroll", "onScrollIndexChange", "onFilter"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: OrgTreeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-org-tree', template: "<p-tree class=\"w-full md:w-30rem\" [value]=\"orgTree\" selectionMode=\"single\" [loading]=\"loading\"\n    (onNodeExpand)=\"nodeExpand($event)\" (onNodeSelect)=\"nodeSelect($event)\"></p-tree>", styles: ["::ng-deep app-org-tree .p-tree{border:none;padding:0}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i1.DialogService }]; }, propDecorators: { orgService: [{
                type: Input
            }], onSelectNode: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JnLXRyZWUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhcngtc2NvcmUvc3JjL2xpYi9zaGFyZWQvY29tcG9uZW50cy9vcmctdHJlZS9vcmctdHJlZS5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyeC1zY29yZS9zcmMvbGliL3NoYXJlZC9jb21wb25lbnRzL29yZy10cmVlL29yZy10cmVlLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBaUIsU0FBUyxFQUFFLFlBQVksRUFBWSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7O0FBU2hHLE1BQU0sT0FBTyxnQkFBZ0I7SUFTM0IsWUFDVSxTQUFtQixFQUNwQixhQUE0QjtRQUQzQixjQUFTLEdBQVQsU0FBUyxDQUFVO1FBQ3BCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBTjlCLGlCQUFZLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFHakUsWUFBTyxHQUFZLEtBQUssQ0FBQztJQU96QixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1FBQ3BCLElBQUksQ0FBQyxVQUFVLENBQUMsV0FBVyxFQUFFLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBUSxFQUFFLEVBQUU7WUFDbkQsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLEVBQUUsSUFBSSxDQUFDO1lBQ3pCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFBO0lBQ0osQ0FBQztJQUVELFVBQVUsQ0FBQyxLQUFVO1FBQ25CLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ3pCLE9BQU87U0FDUjtRQUNELElBQUksS0FBSyxDQUFDLElBQUksRUFBRTtZQUNkLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO1lBQ3BCLFVBQVUsQ0FBQyxHQUFHLEVBQUU7Z0JBQ2QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtvQkFDakUsS0FBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztnQkFDakMsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7Z0JBQ3JCLDBCQUEwQjtZQUM1QixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7U0FDVDtJQUNILENBQUM7SUFFRCxVQUFVLENBQUMsS0FBVTtRQUNuQixJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDckMsQ0FBQzs4R0EzQ1UsZ0JBQWdCO2tHQUFoQixnQkFBZ0IscUlDVDdCLG1NQUNxRjs7MkZEUXhFLGdCQUFnQjtrQkFMNUIsU0FBUzsrQkFDRSxjQUFjOzJIQU1qQixVQUFVO3NCQURoQixLQUFLO2dCQUlDLFlBQVk7c0JBRGxCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5qZWN0b3IsIElucHV0LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVHJlZU5vZGUgfSBmcm9tICdwcmltZW5nL2FwaSc7XHJcbmltcG9ydCB7IERpYWxvZ1NlcnZpY2UgfSBmcm9tICdwcmltZW5nL2R5bmFtaWNkaWFsb2cnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtb3JnLXRyZWUnLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9vcmctdHJlZS5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vb3JnLXRyZWUuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgT3JnVHJlZUNvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyVmlld0luaXR7XHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgb3JnU2VydmljZSE6IGFueTtcclxuXHJcbiAgQE91dHB1dCgpXHJcbiAgcHVibGljIG9uU2VsZWN0Tm9kZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgb3JnVHJlZSE6IFRyZWVOb2RlW107XHJcbiAgbG9hZGluZzogYm9vbGVhbiA9IGZhbHNlO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgcHVibGljIGRpYWxvZ1NlcnZpY2U6IERpYWxvZ1NlcnZpY2UsXHJcbiAgICAvLyBwdWJsaWMgb3JnU2VydmljZTogT3JnYW5pemF0aW9uU2VydmljZVxyXG4gICkge1xyXG4gICAgXHJcbiAgfVxyXG5cclxuICBuZ0FmdGVyVmlld0luaXQoKSB7XHJcbiAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgdGhpcy5vcmdTZXJ2aWNlLmluaXRPcmdUcmVlKCkuc3Vic2NyaWJlKChyZXM6IGFueSkgPT4ge1xyXG4gICAgICB0aGlzLm9yZ1RyZWUgPSByZXM/LmRhdGE7XHJcbiAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlO1xyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIG5vZGVFeHBhbmQoZXZlbnQ6IGFueSkge1xyXG4gICAgaWYgKCEhZXZlbnQubm9kZS5jaGlsZHJlbikge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAoZXZlbnQubm9kZSkge1xyXG4gICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICB0aGlzLm9yZ1NlcnZpY2UuZ2V0Q2hpbGRPcmcoZXZlbnQubm9kZS5rZXkpLnN1YnNjcmliZSgocmVzOiBhbnkpID0+IHtcclxuICAgICAgICAgIGV2ZW50Lm5vZGUuY2hpbGRyZW4gPSByZXMuZGF0YTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAvLyB0aGlzLmNkLm1hcmtGb3JDaGVjaygpO1xyXG4gICAgICB9LCAyMDApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbm9kZVNlbGVjdChldmVudDogYW55KSB7XHJcbiAgICB0aGlzLm9uU2VsZWN0Tm9kZS5lbWl0KGV2ZW50Lm5vZGUpO1xyXG4gIH1cclxuXHJcbn1cclxuIiwiPHAtdHJlZSBjbGFzcz1cInctZnVsbCBtZDp3LTMwcmVtXCIgW3ZhbHVlXT1cIm9yZ1RyZWVcIiBzZWxlY3Rpb25Nb2RlPVwic2luZ2xlXCIgW2xvYWRpbmddPVwibG9hZGluZ1wiXG4gICAgKG9uTm9kZUV4cGFuZCk9XCJub2RlRXhwYW5kKCRldmVudClcIiAob25Ob2RlU2VsZWN0KT1cIm5vZGVTZWxlY3QoJGV2ZW50KVwiPjwvcC10cmVlPiJdfQ==