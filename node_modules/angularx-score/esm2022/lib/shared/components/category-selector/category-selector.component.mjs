import { Component, EventEmitter, Input, Output } from '@angular/core';
import { BaseComponent } from '../base-component/base-component.component';
import { BaseControl } from '../../models/base.control';
import * as i0 from "@angular/core";
import * as i1 from "../drop-down/drop-down.component";
export class CategorySelectorComponent extends BaseComponent {
    constructor(_injector, 
    // public categoryService: CategoryService,
    cdr) {
        super(_injector);
        this._injector = _injector;
        this.cdr = cdr;
        // formControl of this input
        this.property = new BaseControl();
        this.typeCode = '';
        this.onChange = new EventEmitter();
        this.catogoryOptions = [];
        this.optionValue = 'id';
    }
    ngAfterViewInit() {
        this.loadCategoryOption();
        if (!!this.fieldValue) {
            this.optionValue = this.fieldValue;
        }
    }
    loadCategoryOption() {
        this.categoryService.findByTypeCode(this.typeCode)
            .subscribe((res) => {
            this.catogoryOptions = res.data;
            this.cdr.detectChanges();
        });
    }
    _onChange(event) {
        this.onChange.emit(event);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CategorySelectorComponent, deps: [{ token: i0.Injector }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "16.2.5", type: CategorySelectorComponent, selector: "app-category-selector", inputs: { property: "property", labelValue: "labelValue", fieldValue: "fieldValue", categoryService: "categoryService", typeCode: "typeCode" }, outputs: { onChange: "onChange" }, usesInheritance: true, ngImport: i0, template: "<app-drop-down [property]=\"property\" [labelValue]=\"labelValue\" [showClear]=\"true\"\n    [options]=\"catogoryOptions\" optionLabel=\"name\" [optionValue]=\"optionValue\" (onChange)=\"_onChange($event)\"></app-drop-down>", styles: [""], dependencies: [{ kind: "component", type: i1.DropDownComponent, selector: "app-drop-down", inputs: ["property", "options", "optionLabel", "optionValue", "labelValue", "showClear"], outputs: ["onChange"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CategorySelectorComponent, decorators: [{
            type: Component,
            args: [{ selector: 'app-category-selector', template: "<app-drop-down [property]=\"property\" [labelValue]=\"labelValue\" [showClear]=\"true\"\n    [options]=\"catogoryOptions\" optionLabel=\"name\" [optionValue]=\"optionValue\" (onChange)=\"_onChange($event)\"></app-drop-down>" }]
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { property: [{
                type: Input
            }], labelValue: [{
                type: Input
            }], fieldValue: [{
                type: Input
            }], categoryService: [{
                type: Input
            }], typeCode: [{
                type: Input
            }], onChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2F0ZWdvcnktc2VsZWN0b3IuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhcngtc2NvcmUvc3JjL2xpYi9zaGFyZWQvY29tcG9uZW50cy9jYXRlZ29yeS1zZWxlY3Rvci9jYXRlZ29yeS1zZWxlY3Rvci5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyeC1zY29yZS9zcmMvbGliL3NoYXJlZC9jb21wb25lbnRzL2NhdGVnb3J5LXNlbGVjdG9yL2NhdGVnb3J5LXNlbGVjdG9yLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBb0MsU0FBUyxFQUFFLFlBQVksRUFBWSxLQUFLLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ILE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7OztBQU94RCxNQUFNLE9BQU8seUJBQTBCLFNBQVEsYUFBYTtJQXVCMUQsWUFDVSxTQUFtQjtJQUMzQiwyQ0FBMkM7SUFDbkMsR0FBc0I7UUFFOUIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBSlQsY0FBUyxHQUFULFNBQVMsQ0FBVTtRQUVuQixRQUFHLEdBQUgsR0FBRyxDQUFtQjtRQXpCaEMsNEJBQTRCO1FBRXJCLGFBQVEsR0FBZ0IsSUFBSSxXQUFXLEVBQUUsQ0FBQztRQWExQyxhQUFRLEdBQVcsRUFBRSxDQUFDO1FBR3RCLGFBQVEsR0FBc0IsSUFBSSxZQUFZLEVBQU8sQ0FBQztRQUU3RCxvQkFBZSxHQUFHLEVBQUUsQ0FBQztRQUNyQixnQkFBVyxHQUFHLElBQUksQ0FBQztJQVNuQixDQUFDO0lBRUQsZUFBZTtRQUNiLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDckIsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1NBQ3BDO0lBQ0gsQ0FBQztJQUVELGtCQUFrQjtRQUNoQixJQUFJLENBQUMsZUFBZSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO2FBQy9DLFNBQVMsQ0FBQyxDQUFDLEdBQVEsRUFBRSxFQUFFO1lBQ3RCLElBQUksQ0FBQyxlQUFlLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQztZQUNoQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSxDQUFDO1FBQzNCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFNBQVMsQ0FBQyxLQUF3QjtRQUNoQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDOzhHQWxEVSx5QkFBeUI7a0dBQXpCLHlCQUF5Qix1UUNUdEMsaU9BQzhIOzsyRkRRakgseUJBQXlCO2tCQUxyQyxTQUFTOytCQUNFLHVCQUF1QjsrSEFPMUIsUUFBUTtzQkFEZCxLQUFLO2dCQUtDLFVBQVU7c0JBRGhCLEtBQUs7Z0JBSUMsVUFBVTtzQkFEaEIsS0FBSztnQkFJQyxlQUFlO3NCQURyQixLQUFLO2dCQUlDLFFBQVE7c0JBRGQsS0FBSztnQkFJQyxRQUFRO3NCQURkLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBZnRlclZpZXdJbml0LCBDaGFuZ2VEZXRlY3RvclJlZiwgQ29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIEluamVjdG9yLCBJbnB1dCwgT3V0cHV0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IEJhc2VDb21wb25lbnQgfSBmcm9tICcuLi9iYXNlLWNvbXBvbmVudC9iYXNlLWNvbXBvbmVudC5jb21wb25lbnQnO1xyXG5pbXBvcnQgeyBCYXNlQ29udHJvbCB9IGZyb20gJy4uLy4uL21vZGVscy9iYXNlLmNvbnRyb2wnO1xyXG5cclxuQENvbXBvbmVudCh7XHJcbiAgc2VsZWN0b3I6ICdhcHAtY2F0ZWdvcnktc2VsZWN0b3InLFxyXG4gIHRlbXBsYXRlVXJsOiAnLi9jYXRlZ29yeS1zZWxlY3Rvci5jb21wb25lbnQuaHRtbCcsXHJcbiAgc3R5bGVVcmxzOiBbJy4vY2F0ZWdvcnktc2VsZWN0b3IuY29tcG9uZW50LnNjc3MnXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgQ2F0ZWdvcnlTZWxlY3RvckNvbXBvbmVudCBleHRlbmRzIEJhc2VDb21wb25lbnQgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0e1xyXG4gIC8vIGZvcm1Db250cm9sIG9mIHRoaXMgaW5wdXRcclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyBwcm9wZXJ0eTogQmFzZUNvbnRyb2wgPSBuZXcgQmFzZUNvbnRyb2woKTtcclxuXHJcbiAgLy8gdGl0bGUgZm9yIGxhYmxlXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgbGFiZWxWYWx1ZSE6IHN0cmluZztcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgZmllbGRWYWx1ZSE6IHN0cmluZztcclxuXHJcbiAgQElucHV0KClcclxuICBwdWJsaWMgY2F0ZWdvcnlTZXJ2aWNlITogYW55O1xyXG5cclxuICBASW5wdXQoKVxyXG4gIHB1YmxpYyB0eXBlQ29kZTogc3RyaW5nID0gJyc7XHJcblxyXG4gIEBPdXRwdXQoKVxyXG4gIHB1YmxpYyBvbkNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcclxuXHJcbiAgY2F0b2dvcnlPcHRpb25zID0gW107XHJcbiAgb3B0aW9uVmFsdWUgPSAnaWQnO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHJpdmF0ZSBfaW5qZWN0b3I6IEluamVjdG9yLFxyXG4gICAgLy8gcHVibGljIGNhdGVnb3J5U2VydmljZTogQ2F0ZWdvcnlTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBjZHI6IENoYW5nZURldGVjdG9yUmVmXHJcbiAgKSB7XHJcbiAgICBzdXBlcihfaW5qZWN0b3IpO1xyXG4gICAgXHJcbiAgICBcclxuICB9XHJcbiAgXHJcbiAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5sb2FkQ2F0ZWdvcnlPcHRpb24oKTtcclxuICAgIGlmICghIXRoaXMuZmllbGRWYWx1ZSkge1xyXG4gICAgICB0aGlzLm9wdGlvblZhbHVlID0gdGhpcy5maWVsZFZhbHVlO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgbG9hZENhdGVnb3J5T3B0aW9uKCkge1xyXG4gICAgdGhpcy5jYXRlZ29yeVNlcnZpY2UuZmluZEJ5VHlwZUNvZGUodGhpcy50eXBlQ29kZSlcclxuICAgICAgLnN1YnNjcmliZSgocmVzOiBhbnkpID0+IHtcclxuICAgICAgICB0aGlzLmNhdG9nb3J5T3B0aW9ucyA9IHJlcy5kYXRhO1xyXG4gICAgICAgIHRoaXMuY2RyLmRldGVjdENoYW5nZXMoKTtcclxuICAgICAgfSk7XHJcbiAgfVxyXG5cclxuICBfb25DaGFuZ2UoZXZlbnQ6IEV2ZW50RW1pdHRlcjxhbnk+KSB7XHJcbiAgICB0aGlzLm9uQ2hhbmdlLmVtaXQoZXZlbnQpO1xyXG4gIH1cclxufVxyXG4iLCI8YXBwLWRyb3AtZG93biBbcHJvcGVydHldPVwicHJvcGVydHlcIiBbbGFiZWxWYWx1ZV09XCJsYWJlbFZhbHVlXCIgW3Nob3dDbGVhcl09XCJ0cnVlXCJcbiAgICBbb3B0aW9uc109XCJjYXRvZ29yeU9wdGlvbnNcIiBvcHRpb25MYWJlbD1cIm5hbWVcIiBbb3B0aW9uVmFsdWVdPVwib3B0aW9uVmFsdWVcIiAob25DaGFuZ2UpPVwiX29uQ2hhbmdlKCRldmVudClcIj48L2FwcC1kcm9wLWRvd24+Il19