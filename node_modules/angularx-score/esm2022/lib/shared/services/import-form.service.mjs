import { Injectable } from "@angular/core";
import { BaseService } from "./basic.service";
import * as i0 from "@angular/core";
export class ImportFormService extends BaseService {
    constructor(_injector) {
        super(_injector, '', '');
        this._injector = _injector;
    }
    downloadTemplate(service, urlEndpoint, extraValue) {
        const url = `${service.getBaseUrl()}/${urlEndpoint}`;
        // return this.getRequest(url);
        const buildParams = this.commonUtil.buildParams(extraValue || {});
        return this.getRequest(url, { params: buildParams, responseType: 'blob' });
    }
    //   public doDownloadFileByName(fileName: string) {
    //     const url = UrlConstant.API_VERSION + '/download/temp-file?fileName=' + fileName;
    //     return this.getRequestFile(url);
    //   }
    doImport(service, endpoint, data) {
        const url = `${service.getBaseUrl()}/${endpoint}`;
        return this.postRequest(url, data);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ImportFormService, deps: [{ token: i0.Injector }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ImportFormService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: ImportFormService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector }]; } });
``;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1wb3J0LWZvcm0uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2FuZ3VsYXJ4LXNjb3JlL3NyYy9saWIvc2hhcmVkL3NlcnZpY2VzL2ltcG9ydC1mb3JtLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBWSxNQUFNLGVBQWUsQ0FBQztBQUVyRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0saUJBQWlCLENBQUM7O0FBSzlDLE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxXQUFXO0lBQzlDLFlBQW1CLFNBQW1CO1FBQ2xDLEtBQUssQ0FBQyxTQUFTLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRFYsY0FBUyxHQUFULFNBQVMsQ0FBVTtJQUV0QyxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsT0FBb0IsRUFBRSxXQUFtQixFQUFFLFVBQWdCO1FBQy9FLE1BQU0sR0FBRyxHQUFHLEdBQUcsT0FBTyxDQUFDLFVBQVUsRUFBRSxJQUFJLFdBQVcsRUFBRSxDQUFDO1FBQ3JELCtCQUErQjtRQUMvQixNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUM7UUFDbEUsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUM7SUFDL0UsQ0FBQztJQUVELG9EQUFvRDtJQUNwRCx3RkFBd0Y7SUFDeEYsdUNBQXVDO0lBQ3ZDLE1BQU07SUFFQyxRQUFRLENBQUMsT0FBb0IsRUFBRSxRQUFnQixFQUFFLElBQWM7UUFDbEUsTUFBTSxHQUFHLEdBQUcsR0FBRyxPQUFPLENBQUMsVUFBVSxFQUFFLElBQUksUUFBUSxFQUFFLENBQUM7UUFDbEQsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2QyxDQUFDOzhHQXBCUSxpQkFBaUI7a0hBQWpCLGlCQUFpQixjQUZkLE1BQU07OzJGQUVULGlCQUFpQjtrQkFIN0IsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7O0FBdUJELEVBQUUsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdG9yIH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gXCJyeGpzXCI7XHJcbmltcG9ydCB7IEJhc2VTZXJ2aWNlIH0gZnJvbSBcIi4vYmFzaWMuc2VydmljZVwiO1xyXG5cclxuQEluamVjdGFibGUoe1xyXG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBJbXBvcnRGb3JtU2VydmljZSBleHRlbmRzIEJhc2VTZXJ2aWNlIHtcclxuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBfaW5qZWN0b3I6IEluamVjdG9yKSB7XHJcbiAgICAgICAgc3VwZXIoX2luamVjdG9yLCAnJywgJycpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkb3dubG9hZFRlbXBsYXRlKHNlcnZpY2U6IEJhc2VTZXJ2aWNlLCB1cmxFbmRwb2ludDogc3RyaW5nLCBleHRyYVZhbHVlPzogYW55KSB7XHJcbiAgICAgICAgY29uc3QgdXJsID0gYCR7c2VydmljZS5nZXRCYXNlVXJsKCl9LyR7dXJsRW5kcG9pbnR9YDtcclxuICAgICAgICAvLyByZXR1cm4gdGhpcy5nZXRSZXF1ZXN0KHVybCk7XHJcbiAgICAgICAgY29uc3QgYnVpbGRQYXJhbXMgPSB0aGlzLmNvbW1vblV0aWwuYnVpbGRQYXJhbXMoZXh0cmFWYWx1ZSB8fCB7fSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0UmVxdWVzdCh1cmwsIHsgcGFyYW1zOiBidWlsZFBhcmFtcywgcmVzcG9uc2VUeXBlOiAnYmxvYicgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gICBwdWJsaWMgZG9Eb3dubG9hZEZpbGVCeU5hbWUoZmlsZU5hbWU6IHN0cmluZykge1xyXG4gICAgLy8gICAgIGNvbnN0IHVybCA9IFVybENvbnN0YW50LkFQSV9WRVJTSU9OICsgJy9kb3dubG9hZC90ZW1wLWZpbGU/ZmlsZU5hbWU9JyArIGZpbGVOYW1lO1xyXG4gICAgLy8gICAgIHJldHVybiB0aGlzLmdldFJlcXVlc3RGaWxlKHVybCk7XHJcbiAgICAvLyAgIH1cclxuXHJcbiAgICBwdWJsaWMgZG9JbXBvcnQoc2VydmljZTogQmFzZVNlcnZpY2UsIGVuZHBvaW50OiBzdHJpbmcsIGRhdGE6IEZvcm1EYXRhKTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuICAgICAgICBjb25zdCB1cmwgPSBgJHtzZXJ2aWNlLmdldEJhc2VVcmwoKX0vJHtlbmRwb2ludH1gO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBvc3RSZXF1ZXN0KHVybCwgZGF0YSk7XHJcbiAgICB9XHJcbn1cclxuYGAiXX0=