import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { throwError } from 'rxjs';
import { catchError, tap } from 'rxjs/operators';
import { HelperService } from './helper.service';
import { CommonUtils } from './common-utils.service';
import * as i0 from "@angular/core";
export class BaseService {
    constructor(injector, baseUrl, baseObject) {
        this.injector = injector;
        this.baseUrl = baseUrl;
        this.baseObject = baseObject;
        this.httpClient = this.injector.get(HttpClient);
        this.helperService = this.injector.get(HelperService);
        this.commonUtil = this.injector.get(CommonUtils);
    }
    // tslint:disable-next-line: ban-types
    getBaseUrl() {
        return this.baseUrl;
    }
    search(data, event) {
        const searchData = this.commonUtil.convertData(data);
        if (event) {
            searchData._search = event;
        }
        const buildParams = this.commonUtil.buildParams(searchData);
        const url = `${this.baseUrl}/search?`;
        return this.getRequest(url, { params: buildParams });
    }
    getConfigSearch() {
        const url = `http://localhost:8685/v1/config-search/${this.baseObject}`;
        return this.getRequest(url);
    }
    /**
     * findAll
     */
    findAll() {
        const url = `${this.baseUrl}`;
        return this.getRequest(url);
    }
    /**
     * findAllByFillter
     */
    findAllByFillter(data) {
        const url = `${this.baseUrl}/filter`;
        return this.postRequestNoToast(url, this.commonUtil.convertData(data || {}));
    }
    /**
     * findAllByFillterAndGroupCode
     */
    findAllByFillterAndGroupCode(data, groupCode) {
        const url = `${this.baseUrl}/filter/${groupCode}`;
        return this.postRequestNoToast(url, this.commonUtil.convertData(data || {}));
    }
    /**
     * findOne
     * param id
     */
    findOne(id) {
        const url = `${this.baseUrl}/${id}`;
        return this.getRequest(url);
    }
    /**
     * saveOrUpdate
     */
    saveOrUpdate(item) {
        const url = `${this.baseUrl}`;
        return this.postRequest(url, this.commonUtil.convertData(item));
    }
    /**
     * saveOrUpdate
     */
    saveOrUpdateConfigSearch(item) {
        const url = `http://localhost:8685/v1/config-search/save-config`;
        return this.postRequestNoneProcessing(url, this.commonUtil.convertData(item));
    }
    /**
     * saveOrUpdateFormFile
     */
    saveOrUpdateFormFile(item) {
        const formdata = this.commonUtil.convertFormFile(item);
        const url = `${this.baseUrl}/form-data`;
        return this.postRequest(url, formdata);
    }
    /**
     * deleteById
     * param id
     */
    deleteById(id) {
        const url = `${this.baseUrl}/${id}`;
        return this.deleteRequest(url);
    }
    /**
     * deleteByListId
     * param id
     */
    deleteItemsSelected(data) {
        const url = `${this.baseUrl}/delete-all`;
        return this.postRequest(url, this.commonUtil.convertData(data));
    }
    /*******************************/
    /**
     * make get request
     */
    getRequest(url, options) {
        this.helperService.PROCESS_LOADER.next(true);
        return this.httpClient.get(url, options)
            .pipe(tap(// Log the result or error
        // Log the result or error
        res => {
            // this.helperService.MESSAGE_TOASTER.next(res);
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            // if (error.status !== 401 && error.status !== 403) {
            this.commonUtil.toastMessage('error', 'common.toast.haveError');
            // }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    /**
     * make post request
     */
    postRequest(url, data) {
        this.helperService.PROCESS_LOADER.next(true);
        return this.httpClient.post(url, data)
            .pipe(tap(// Log the result or error
        (res) => {
            if (res.type === 'WARNING') {
                this.commonUtil.toastMessage('warn', res.code, res.data);
            }
            else {
                this.commonUtil.toastMessage('success', res.code);
            }
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    postRequestNoToast(url, data) {
        this.helperService.PROCESS_LOADER.next(true);
        return this.httpClient.post(url, data)
            .pipe(tap(// Log the result or error
        (res) => {
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    /**
     * make post request for file
     */
    postRequestFile(url, data) {
        this.helperService.PROCESS_LOADER.next(true);
        return this.httpClient.post(url, data, { responseType: 'blob' })
            .pipe(tap(// Log the result or error
        // Log the result or error
        res => {
            // this.helperService.MESSAGE_TOASTER.next(res);
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    /**
     * make get request
     */
    deleteRequest(url) {
        this.helperService.PROCESS_LOADER.next(true);
        return this.httpClient.delete(url)
            .pipe(tap(// Log the result or error
        (res) => {
            if (res.type === 'WARN') {
                this.commonUtil.toastMessage('warn', res.code, res.data);
            }
            else if (res.type === 'SUCSSES') {
                this.commonUtil.toastMessage('success', res.code);
            }
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    /**
     * getRequestNoneProcessing
     */
    getRequestNoneProcessing(url, options) {
        return this.httpClient.get(url, options)
            .pipe(tap(// Log the result or error
        // Log the result or error
        res => {
            // this.helperService.MESSAGE_TOASTER.next(res);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
        }), catchError(this.handleError));
    }
    /**
     * postRequestNoneProcessing
     */
    postRequestNoneProcessing(url, data) {
        return this.httpClient.post(url, data)
            .pipe(tap(// Log the result or error
        // Log the result or error
        res => {
            // this.helperService.MESSAGE_TOASTER.next(res);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
        }), catchError(this.handleError));
    }
    /**
     * postRequestFileNoneProcessing
     */
    postRequestFileNoneProcessing(url, data) {
        this.helperService.PROCESS_LOADER.next(true);
        return this.httpClient.post(url, data, { responseType: 'blob' })
            .pipe(tap(// Log the result or error
        // Log the result or error
        res => {
            // this.helperService.MESSAGE_TOASTER.next(res);
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    /**
     * deleteRequestNoneProcessing
     */
    deleteRequestNoneProcessing(url) {
        return this.httpClient.delete(url)
            .pipe(tap(// Log the result or error
        // Log the result or error
        res => {
            // this.helperService.MESSAGE_TOASTER.next(res);
            this.helperService.PROCESS_LOADER.next(false);
        }, error => {
            if (error.status !== 401 && error.status !== 403) {
                this.commonUtil.toastMessage('error', 'common.toast.haveError');
            }
            this.helperService.PROCESS_LOADER.next(false);
        }), catchError(this.handleError));
    }
    // tslint:disable-next-line: typedef
    handleError(error) {
        const errorMsg = (error.message) ? error.message :
            error.status ? `${error.status} - ${error.statusText}` : 'Server error';
        return throwError(errorMsg);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: BaseService, deps: [{ token: i0.Injector }, { token: String }, { token: String }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: BaseService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: BaseService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.Injector }, { type: String }, { type: String }]; } });
//# sourceMappingURL=data:application/json;base64,