import { Injectable } from '@angular/core';
import { CommonUtils } from './common-utils.service';
import { CryptoService } from './crypto.service';
import * as i0 from "@angular/core";
class StorageData {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: StorageData, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: StorageData, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: StorageData, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
export class HrStorage {
    static { this.expriteIn = '_expriteIn'; }
    static { this.instanceName = '_HrStorage'; }
    static { this.storage = localStorage; }
    /**
     * init
     */
    static init() {
    }
    /**
     * isExprited
     */
    static isExprited() {
        return false;
    }
    /**
     * clear
     */
    static clear() {
        this.storage.removeItem(this.instanceName);
    }
    /**
     * storedData
     */
    static storedData() {
        const storedData = this.storage.getItem(this.instanceName);
        if (CommonUtils.isNullOrEmpty(storedData)) {
            return {};
        }
        return CryptoService.decr(storedData);
    }
    /**
     * get
     */
    static get(key) {
        if (this.isExprited()) {
            return null;
        }
        const storedData = this.storedData();
        if (storedData == null) {
            return null;
        }
        return storedData[key];
    }
    /**
     * get
     */
    static set(key, val) {
        let storedData = this.storedData();
        if (storedData == null) {
            storedData = new StorageData();
        }
        storedData[key] = val;
        this.storage.setItem(this.instanceName, CryptoService.encr(storedData));
    }
    /**
     * getUserToken
     */
    static getUserToken() {
        return this.get('userToken');
    }
    /**
     * setUserToken
     */
    static setUserToken(userToken) {
        return this.set('userToken', userToken);
    }
    /**
     * getNavState
     */
    static getNavState() {
        const navState = this.get('navState');
        return navState === null ? false : navState;
    }
    /**
     * setNavState
     */
    static setNavState(navState) {
        this.set('navState', navState);
    }
    /**
     * getNavFlipState
     */
    static getNavFlipState() {
        const navFlipState = this.get('navFlipState');
        return navFlipState === null ? false : navFlipState;
    }
    /**
     * setNavFlipState
     */
    static setNavFlipState(navFlipState) {
        this.set('navFlipState', navFlipState);
    }
    /**
     * getSearchState
     */
    static getSearchState() {
        return this.get('searchState');
    }
    /**
     * setNavFlipState
     */
    static setSearchState(searchState) {
        this.set('searchState', searchState);
    }
    /**
     * getSelectedLang
     */
    static getSelectedLang() {
        const listLang = this.getListLang();
        if (listLang == null) {
            return null;
        }
        for (const item of listLang) {
            if (item.isDefault === 1) {
                return item;
            }
        }
        return listLang[0];
    }
    /**
    * setSelectedLang
    */
    static setSelectedLang(object) {
        const listLang = this.getListLang();
        if (listLang == null) {
            return;
        }
        for (const item of listLang) {
            if (object.code === item.code) {
                item.isDefault = 1;
            }
            else {
                item.isDefault = null;
            }
        }
        this.setListLang(listLang);
    }
    /**
     * getListLang
     */
    static getListLang() {
        return this.get('listLang');
    }
    /**
     * setListLang
     */
    static setListLang(listLang) {
        this.set('listLang', listLang);
    }
    /**
     * getCurrentMarket
     */
    static getSelectedMarket() {
        const listMarket = this.getListMarket();
        if (listMarket == null) {
            return null;
        }
        for (const item of listMarket) {
            if (item.isDefault && item.isDefault === 1) {
                return item;
            }
        }
        return listMarket[0];
    }
    /**
     * setSelectedMarket
     */
    static setSelectedMarket(object) {
        const listMarket = this.getListMarket();
        if (listMarket == null) {
            return;
        }
        for (const item of listMarket) {
            if (object.marketCompanyId === item.marketCompanyId) {
                item.isDefault = 1;
            }
            else {
                item.isDefault = null;
            }
        }
        this.setListMarket(listMarket);
    }
    /**
     * getListMarket
     */
    static getListMarket() {
        return this.get('listMarket');
    }
    /**
     * setListMarket
     */
    static setListMarket(listMarket) {
        this.set('listMarket', listMarket);
    }
    /**
     * getCurrentUrl
     */
    static getCurrentUrl() {
        return this.get('currentUrl');
    }
    /**
     * setCurrentUrl
     */
    static setCurrentUrl(currentUrl) {
        this.set('currentUrl', currentUrl);
    }
    /**
     * getIntro
     */
    static getIntro() {
        return this.get('intro');
    }
    /**
     * setIntro
     */
    static setIntro(intro) {
        this.set('intro', intro);
    }
    /**
     * introIsDone
     * @ param screenCode
     */
    static introIsDone(screenCode) {
        const intro = this.getIntro();
        if (intro == null || intro.length === 0) {
            return false;
        }
        return intro.indexOf(screenCode) > -1;
    }
    /**
     * introIsDone
     * @ param screenCode
     */
    static introSetDone(screenCode) {
        let intro = this.getIntro();
        if (intro == null || intro.length === 0) {
            intro = [];
        }
        if (intro.indexOf(screenCode) > -1) {
            return;
        }
        intro.push(screenCode);
        this.setIntro(intro);
    }
    /**
     * getTheme
     */
    static getTheme() {
        return this.get('theme');
    }
    /**
     * setTheme
     */
    static setTheme(theme) {
        this.set('theme', theme);
    }
    /**
     * setSessionId
     */
    static setSessionId(id) {
        this.set('sessionId', id);
    }
    /**
    * getSessionId
    */
    static getSessionId() {
        return this.get('sessionId');
    }
}
//# sourceMappingURL=data:application/json;base64,