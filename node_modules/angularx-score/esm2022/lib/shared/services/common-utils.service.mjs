import { Injectable } from '@angular/core';
import { FormGroup, FormArray, FormControl, } from '@angular/forms';
import { HrStorage } from './HrStorage';
import { HttpParams } from '@angular/common/http';
import * as moment from 'moment';
import { CONFIG_DEFAULT, PERMISSION_CODE } from '../app-config';
import { BaseControl } from '../models/base.control';
import * as i0 from "@angular/core";
import * as i1 from "./helper.service";
export class CommonUtils {
    constructor(helperService) {
        this.helperService = helperService;
    }
    static isNullOrEmpty(str) {
        return !str || (str + '').trim() === '';
    }
    /**
   * Hàm lấy DateFormat hiện tại theo MarketCompany. Ko có trả về mặc định
   */
    static getDateFormat() {
        const nationProperty = HrStorage.getSelectedMarket();
        if (nationProperty === null || nationProperty === undefined || !nationProperty.dateFormat) {
            return CONFIG_DEFAULT.dateFormat;
        }
        return nationProperty.dateFormat;
    }
    /**
   * createFormNew use Dynamic Input
   */
    static createFormNew(resource, actionForm, formData, options, propConfigs, validate) {
        const formGroup = new FormGroup({});
        for (const property in options) {
            const config = propConfigs && propConfigs.length > 0
                ? propConfigs.filter(item => item.propertyCode === property && item.actionForm === actionForm)[0] : null;
            const control = new BaseControl();
            control.propertyName = property;
            control.actionForm = actionForm;
            control.resource = resource;
            control.configBaseControl(config, options[property][1]);
            control.setValue(options[property][0]);
            if (formData.hasOwnProperty(property)) {
                control.setValue(formData[property]);
            }
            control.setValidators(control.getListValidation());
            formGroup.addControl(property, control);
            formGroup.get(property)?.updateValueAndValidity();
        }
        if (validate) {
            formGroup.setValidators(validate);
        }
        return formGroup;
    }
    /**
   * convert To FormData mutilpart request post
   */
    static convertFormFile(dataPost) {
        const filteredData = CommonUtils.convertData(dataPost);
        const formData = CommonUtils.objectToFormData(filteredData, '', []);
        return formData;
    }
    /**
     * objectToFormData
     */
    static objectToFormData(obj, rootName, ignoreList) {
        const formData = new FormData();
        function appendFormData(data, root) {
            if (!ignore(root)) {
                root = root || '';
                if (data instanceof File) {
                    if (data.type !== 'x_stored_file') {
                        formData.append(root, data);
                    }
                }
                else if (Array.isArray(data)) {
                    let index = 0;
                    for (let i = 0; i < data.length; i++) {
                        if (data[i] instanceof File) {
                            if (data[i].type !== 'x_stored_file') {
                                appendFormData(data[i], root + '[' + index + ']');
                                index++;
                            }
                        }
                        else {
                            appendFormData(data[i], root + '[' + i + ']');
                        }
                    }
                }
                else if (data && typeof data === 'object') {
                    for (const key in data) {
                        if (data.hasOwnProperty(key)) {
                            if (root === '') {
                                appendFormData(data[key], key);
                            }
                            else {
                                appendFormData(data[key], root + '.' + key);
                            }
                        }
                    }
                }
                else {
                    if (data !== null && typeof data !== 'undefined') {
                        formData.append(root, data);
                    }
                }
            }
        }
        function ignore(root) {
            return Array.isArray(ignoreList) && ignoreList.some(function (x) { return x === root; });
        }
        appendFormData(obj, rootName);
        return formData;
    }
    /**
   * convertData
   */
    static convertData(data) {
        if (typeof data === typeof {}) {
            return CommonUtils.convertDataObject(data);
        }
        else if (typeof data === typeof []) {
            return CommonUtils.convertDataArray(data);
        }
        else if (typeof data === typeof true) {
            return CommonUtils.convertBoolean(data);
        }
        return data;
    }
    /**
     * convertDataObject
     * param data
     */
    static convertDataObject(data) {
        if (data) {
            for (const key in data) {
                if (data[key] instanceof File) {
                }
                else {
                    data[key] = CommonUtils.convertData(data[key]);
                }
            }
        }
        return data;
    }
    static convertDataArray(data) {
        if (data && data.length > 0) {
            for (const i in data) {
                data[i] = CommonUtils.convertData(data[i]);
            }
        }
        return data;
    }
    static convertBoolean(value) {
        return value ? 1 : 0;
    }
    /**
   * copyProperties
   * param dest
   * param orgs
   */
    static buildParams(obj) {
        return Object.entries(obj || {})
            .reduce((params, [key, value]) => {
            if (value === null) {
                return params.set(key, String(''));
            }
            else if (typeof value === typeof {}) {
                return params.set(key, JSON.stringify(value));
            }
            else {
                return params.set(key, String(value));
            }
        }, new HttpParams({ encoder: new CustomEncoder() }));
    }
    static buildParamsArray(obj) {
        return Object.entries(obj || {})
            .reduce((params, [key, value]) => {
            if (value === null) {
                return params.set(key, String(''));
            }
            else if (typeof value === typeof {}) {
                if (Array.isArray(value)) {
                    const temp = value;
                    if (temp && temp.length > 0) {
                        return temp.reduce((res, element, index) => {
                            return res.set(`${key}[${index}]`, JSON.stringify(element));
                        }, params);
                    }
                    return params;
                }
                else {
                    return params.set(key, JSON.stringify(value));
                }
            }
            else {
                return params.set(key, String(value));
            }
        }, new HttpParams({ encoder: new CustomEncoder() }));
    }
    /**
   * validateForm
   * @param form: FormGroup
   */
    static isValidForm(form) {
        setTimeout(() => {
            this.markAsTouched(form);
        }, 200);
        if (form.invalid) {
            setTimeout(() => {
                CommonUtils.scrollToSmoothly('.errorMessageDiv.show');
            }, 200);
        }
        return !form.invalid;
    }
    static offset(el) {
        const rect = el.getBoundingClientRect(), scrollLeft = window.pageXOffset || document.documentElement.scrollLeft, scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        return { top: rect.top + scrollTop, left: rect.left + scrollLeft };
    }
    static scrollToSmoothly(querySelectorAll, time) {
        const elements = document.querySelectorAll(querySelectorAll);
        if (!elements) {
            return;
        }
        const first = elements[0];
        if (!first) {
            return;
        }
        const position = CommonUtils.offset(first);
        if (isNaN(position.top)) {
            console.warn('Position must be a number');
            return;
        }
        if (position.top < 0) {
            console.warn('Position can not be negative');
            return;
        }
        let top = position.top - 100;
        const currentPos = window.scrollY || window.screenTop;
        if (currentPos > position.top) {
            top = position.top + 100;
        }
        try {
            window.scrollTo({ left: 0, top: top, behavior: 'smooth' });
        }
        catch (e) {
            window.scrollTo(0, top);
        }
    }
    static markAsTouched(form) {
        if (form instanceof FormGroup) {
            CommonUtils.isValidFormGroup(form);
        }
        else if (form instanceof FormArray) {
            CommonUtils.isValidFormArray(form);
        }
        else if (form instanceof FormControl) {
            form.markAsTouched({ onlySelf: true });
            if (form.invalid) {
                console.warn('Validate error field:', form);
            }
        }
    }
    static isValidFormArray(form) {
        if (form['isHidden'] === true) { // neu form đang bị ẩn thì không cần validate
            return;
        }
        for (const i in form.controls) {
            CommonUtils.markAsTouched(form.controls[i]); // neu form đang bị ẩn thì không cần validate
        }
    }
    static isValidFormGroup(form) {
        if (form['isHidden'] === true) {
            return;
        }
        Object.keys(form.controls).forEach(key => {
            CommonUtils.markAsTouched(form.get(key));
        });
    }
    /**
   * convertData
   */
    convertData(data) {
        if (typeof data === typeof {}) {
            return data;
        }
        else if (typeof data === typeof []) {
            return this.convertDataArray(data);
        }
        else if (typeof data === typeof true) {
            return this.convertBoolean(data);
        }
        return data;
    }
    convertDataArray(data) {
        if (data && data.length > 0) {
            // tslint:disable-next-line: forin
            for (const i in data) {
                data[i] = this.convertData(data[i]);
            }
        }
        return data;
    }
    convertBoolean(value) {
        return value ? 1 : 0;
    }
    /**
     * copyProperties
     * param dest
     * param orgs
     */
    buildParams(obj) {
        return Object.entries(obj || {})
            .reduce((params, [key, value]) => {
            if (value === null) {
                return params.set(key, String(''));
            }
            else if (typeof value === typeof {}) {
                if (Array.isArray(value)) {
                    return params.set(key, value.join());
                }
                else {
                    return params.set(key, JSON.stringify(value));
                }
            }
            else {
                return params.set(key, String(value));
            }
        }, new HttpParams());
    }
    toastMessage(severity, code, data) {
        this.helperService.MESSAGE_TOASTER.next({
            severity,
            code,
            value: data
        });
    }
    /**
   * convert To FormData mutilpart request post
   */
    convertFormFile(dataPost) {
        const filteredData = this.convertData(dataPost);
        const formData = this.objectToFormData(filteredData, '', []);
        return formData;
    }
    /**
     * objectToFormData
     */
    objectToFormData(obj, rootName, ignoreList) {
        const formData = new FormData();
        function appendFormData(data, root) {
            if (!ignore(root)) {
                root = root || '';
                if (data instanceof File) {
                    if (data.type !== 'stored_file') {
                        formData.append(root, data);
                    }
                }
                else if (Array.isArray(data)) {
                    let index = 0;
                    for (let i = 0; i < data.length; i++) {
                        if (data[i] instanceof File) {
                            if (data[i].type !== 'stored_file') {
                                appendFormData(data[i], root + '[' + index + ']');
                                index++;
                            }
                        }
                        else {
                            appendFormData(data[i], root + '[' + i + ']');
                        }
                    }
                }
                else if (data && typeof data === 'object') {
                    for (const key in data) {
                        if (data.hasOwnProperty(key)) {
                            if (root === '') {
                                appendFormData(data[key], key);
                            }
                            else {
                                appendFormData(data[key], root + '.' + key);
                            }
                        }
                    }
                }
                else {
                    if (data !== null && typeof data !== 'undefined') {
                        formData.append(root, data);
                    }
                }
            }
        }
        function ignore(root) {
            return Array.isArray(ignoreList) && ignoreList.some(x => x === root);
        }
        appendFormData(obj, rootName);
        return formData;
    }
    static isSuccessRequest(res) {
        return res && res.type === 'SUCCESS';
    }
    static dateToString(date) {
        return moment(date).format('DD/MM/YYYY');
    }
    static logoutAction(router) {
        HrStorage.clear();
        router.navigate(['/auth/login']);
    }
    /**
   * getPermissionCode
   * @param code: string
   */
    static getPermissionCode(code) {
        return PERMISSION_CODE[code] || '';
    }
    /**
   * has Permission
   */
    static havePermission(operationKey, adResourceKey) {
        const permissionCode = this.getPermissionCode(adResourceKey) + '__' + this.getPermissionCode(operationKey);
        const userInfo = HrStorage.getUserToken();
        if (userInfo == null) {
            return false;
        }
        // if (!userInfo.userId) {
        //   return false;
        // }
        const userPermissionList = userInfo.userPermissionList;
        if (userPermissionList == null || userPermissionList.length <= 0) {
            return false;
        }
        for (const userPermission of userPermissionList) {
            if (userPermission.permission === permissionCode) {
                return true;
            }
        }
        return false;
    }
    static setWidthDiaglog(defaultValue) {
        var isMobile = navigator.userAgent.match(/(iPad)|(iPhone)|(iPod)|(android)|(webOS)/i);
        return isMobile ? '90%' : defaultValue;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CommonUtils, deps: [{ token: i1.HelperService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CommonUtils, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: CommonUtils, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return [{ type: i1.HelperService }]; } });
class CustomEncoder {
    encodeKey(key) {
        return encodeURIComponent(key);
    }
    encodeValue(value) {
        return encodeURIComponent(value);
    }
    decodeKey(key) {
        return decodeURIComponent(key);
    }
    decodeValue(value) {
        return decodeURIComponent(value);
    }
}
//# sourceMappingURL=data:application/json;base64,