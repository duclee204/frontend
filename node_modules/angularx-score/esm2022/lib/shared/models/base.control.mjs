import { FormControl } from '@angular/forms';
import { INPUT_TYPE } from '../app-config';
import { CommonUtils } from '../services/common-utils.service';
import { ValidationService } from '../services/validation.service';
export class BaseControl extends FormControl {
    constructor() {
        super(...arguments);
        this.propertyName = '';
        this.actionForm = '';
        this.resource = '';
        this.css = '';
        this.isHide = false;
        this.isRequire = false;
        this.dateFormat = CommonUtils.getDateFormat();
        this.isMultiLanguage = false;
    }
    configBaseControl(propertyConfig, oldValidator, type) {
        if (type) {
            this.type = type;
        }
        // Xu ly set mac dinh required neu khong co cau hinh trong database
        if (oldValidator) {
            if (typeof oldValidator === 'function') {
                const val = oldValidator;
                if (val === ValidationService.required) {
                    this.isRequire = true;
                }
            }
            else {
                for (const index in oldValidator) {
                    const val = oldValidator[index];
                    if (val === ValidationService.required) {
                        this.isRequire = true;
                    }
                }
            }
        }
        if (propertyConfig) {
            this.propertyConfig = propertyConfig;
            this.isHide = this.propertyConfig.isHide;
            this.isRequire = this.propertyConfig.isRequire;
            this.isMultiLanguage = this.propertyConfig.isTranslation;
            this.css = this.propertyConfig.css;
            this.dateFormat = this.propertyConfig.dateFormat ? this.propertyConfig.dateFormat : this.dateFormat;
            this.setType();
        }
        this.listValidation = ValidationService.getValidatorArr(oldValidator, this.propertyConfig);
    }
    getPropertyConfig() {
        return this.propertyConfig;
    }
    getListValidation() {
        return this.listValidation;
    }
    setType() {
        if (this.propertyConfig.moneyFormat) {
            this.type = INPUT_TYPE.CURRENCY;
            return;
        }
        if (this.propertyConfig.numberFormat) {
            this.type = INPUT_TYPE.NUMBER;
            return;
        }
        if (this.propertyConfig.dateFormat) {
            this.type = INPUT_TYPE.DATE;
            return;
        }
        // if (this.propertyConfig.maxLength >= 200) {
        //   this.type = INPUT_TYPE.TEXT_AREA;
        //   return;
        // }
        this.type = INPUT_TYPE.TEXT;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZS5jb250cm9sLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvYW5ndWxhcngtc2NvcmUvc3JjL2xpYi9zaGFyZWQvbW9kZWxzL2Jhc2UuY29udHJvbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsV0FBVyxFQUEyQixNQUFNLGdCQUFnQixDQUFDO0FBRXRFLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQy9ELE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRW5FLE1BQU0sT0FBTyxXQUFZLFNBQVEsV0FBVztJQUE1Qzs7UUFDUyxpQkFBWSxHQUFHLEVBQUUsQ0FBQztRQUNsQixlQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2hCLGFBQVEsR0FBRyxFQUFFLENBQUM7UUFDZCxRQUFHLEdBQUksRUFBRSxDQUFDO1FBR1YsV0FBTSxHQUFJLEtBQUssQ0FBQztRQUNoQixjQUFTLEdBQUksS0FBSyxDQUFDO1FBQ25CLGVBQVUsR0FBRyxXQUFXLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDekMsb0JBQWUsR0FBSSxLQUFLLENBQUM7SUEyRGxDLENBQUM7SUF6RFEsaUJBQWlCLENBQUMsY0FBb0IsRUFBRSxZQUFrQixFQUFFLElBQWlCO1FBQ2xGLElBQUksSUFBSSxFQUFFO1lBQ1IsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUM7U0FDbEI7UUFDRCxtRUFBbUU7UUFDbkUsSUFBSSxZQUFZLEVBQUU7WUFDaEIsSUFBSSxPQUFPLFlBQVksS0FBSyxVQUFVLEVBQUU7Z0JBQ3RDLE1BQU0sR0FBRyxHQUFHLFlBQTJCLENBQUM7Z0JBQ3hDLElBQUssR0FBRyxLQUFLLGlCQUFpQixDQUFDLFFBQVEsRUFBRTtvQkFDdkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7aUJBQ3ZCO2FBQ0Y7aUJBQU07Z0JBQ0wsS0FBSyxNQUFNLEtBQUssSUFBSSxZQUFZLEVBQUU7b0JBQ2hDLE1BQU0sR0FBRyxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQWdCLENBQUM7b0JBQy9DLElBQUssR0FBRyxLQUFLLGlCQUFpQixDQUFDLFFBQVEsRUFBRTt3QkFDdkMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7cUJBQ3ZCO2lCQUNGO2FBQ0Y7U0FDRjtRQUNELElBQUksY0FBYyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxjQUFjLEdBQUcsY0FBYyxDQUFDO1lBQ3JDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUM7WUFDekMsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsQ0FBQztZQUMvQyxJQUFJLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDO1lBQ3pELElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7WUFDbkMsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7WUFDcEcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1NBQ2hCO1FBQ0QsSUFBSSxDQUFDLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUM3RixDQUFDO0lBRU0saUJBQWlCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDO0lBQ00saUJBQWlCO1FBQ3RCLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUM3QixDQUFDO0lBQ08sT0FBTztRQUNiLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLEVBQUU7WUFDbkMsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsUUFBUSxDQUFDO1lBQ2hDLE9BQU87U0FDUjtRQUNELElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLEVBQUU7WUFDcEMsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDO1lBQzlCLE9BQU87U0FDUjtRQUNELElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEVBQUU7WUFDbEMsSUFBSSxDQUFDLElBQUksR0FBRyxVQUFVLENBQUMsSUFBSSxDQUFDO1lBQzVCLE9BQU87U0FDUjtRQUNELDhDQUE4QztRQUM5QyxzQ0FBc0M7UUFDdEMsWUFBWTtRQUNaLElBQUk7UUFDSixJQUFJLENBQUMsSUFBSSxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7SUFDOUIsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9ybUNvbnRyb2wsIFZhbGlkYXRvckZuLCBWYWxpZGF0b3JzIH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xyXG5pbXBvcnQgeyBTeXNQcm9wZXJ0eURldGFpbEJlYW4gfSBmcm9tICcuL3N5cy1wcm9wZXJ0eS1kZXRhaWxzLm1vZGVsJztcclxuaW1wb3J0IHsgSU5QVVRfVFlQRSB9IGZyb20gJy4uL2FwcC1jb25maWcnO1xyXG5pbXBvcnQgeyBDb21tb25VdGlscyB9IGZyb20gJy4uL3NlcnZpY2VzL2NvbW1vbi11dGlscy5zZXJ2aWNlJztcclxuaW1wb3J0IHsgVmFsaWRhdGlvblNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy92YWxpZGF0aW9uLnNlcnZpY2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJhc2VDb250cm9sIGV4dGVuZHMgRm9ybUNvbnRyb2wge1xyXG4gIHB1YmxpYyBwcm9wZXJ0eU5hbWUgPSAnJztcclxuICBwdWJsaWMgYWN0aW9uRm9ybSA9ICcnO1xyXG4gIHB1YmxpYyByZXNvdXJjZSA9ICcnO1xyXG4gIHB1YmxpYyBjc3M/ID0gJyc7XHJcbiAgcHVibGljIHByb3BlcnR5Q29uZmlnITogU3lzUHJvcGVydHlEZXRhaWxCZWFuO1xyXG4gIHB1YmxpYyBsaXN0VmFsaWRhdGlvbiE6IEFycmF5PFZhbGlkYXRvckZuPjtcclxuICBwdWJsaWMgaXNIaWRlPyA9IGZhbHNlO1xyXG4gIHB1YmxpYyBpc1JlcXVpcmU/ID0gZmFsc2U7XHJcbiAgcHVibGljIGRhdGVGb3JtYXQgPSBDb21tb25VdGlscy5nZXREYXRlRm9ybWF0KCk7XHJcbiAgcHVibGljIGlzTXVsdGlMYW5ndWFnZT8gPSBmYWxzZTtcclxuICBwdWJsaWMgdHlwZSE6IElOUFVUX1RZUEU7IC8vIHRleHQsIG51bWJlciwgdGV4dC1hcmVhXHJcbiAgcHVibGljIGNvbmZpZ0Jhc2VDb250cm9sKHByb3BlcnR5Q29uZmlnPzogYW55LCBvbGRWYWxpZGF0b3I/OiBhbnksIHR5cGU/OiBJTlBVVF9UWVBFLCApIHtcclxuICAgIGlmICh0eXBlKSB7XHJcbiAgICAgIHRoaXMudHlwZSA9IHR5cGU7XHJcbiAgICB9XHJcbiAgICAvLyBYdSBseSBzZXQgbWFjIGRpbmggcmVxdWlyZWQgbmV1IGtob25nIGNvIGNhdSBoaW5oIHRyb25nIGRhdGFiYXNlXHJcbiAgICBpZiAob2xkVmFsaWRhdG9yKSB7XHJcbiAgICAgIGlmICh0eXBlb2Ygb2xkVmFsaWRhdG9yID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgY29uc3QgdmFsID0gb2xkVmFsaWRhdG9yIGFzIFZhbGlkYXRvckZuO1xyXG4gICAgICAgIGlmICggdmFsID09PSBWYWxpZGF0aW9uU2VydmljZS5yZXF1aXJlZCkge1xyXG4gICAgICAgICAgdGhpcy5pc1JlcXVpcmUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBmb3IgKGNvbnN0IGluZGV4IGluIG9sZFZhbGlkYXRvcikge1xyXG4gICAgICAgICAgY29uc3QgdmFsID0gb2xkVmFsaWRhdG9yW2luZGV4XSBhcyBWYWxpZGF0b3JGbjtcclxuICAgICAgICAgIGlmICggdmFsID09PSBWYWxpZGF0aW9uU2VydmljZS5yZXF1aXJlZCkge1xyXG4gICAgICAgICAgICB0aGlzLmlzUmVxdWlyZSA9IHRydWU7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAocHJvcGVydHlDb25maWcpIHtcclxuICAgICAgdGhpcy5wcm9wZXJ0eUNvbmZpZyA9IHByb3BlcnR5Q29uZmlnO1xyXG4gICAgICB0aGlzLmlzSGlkZSA9IHRoaXMucHJvcGVydHlDb25maWcuaXNIaWRlO1xyXG4gICAgICB0aGlzLmlzUmVxdWlyZSA9IHRoaXMucHJvcGVydHlDb25maWcuaXNSZXF1aXJlO1xyXG4gICAgICB0aGlzLmlzTXVsdGlMYW5ndWFnZSA9IHRoaXMucHJvcGVydHlDb25maWcuaXNUcmFuc2xhdGlvbjtcclxuICAgICAgdGhpcy5jc3MgPSB0aGlzLnByb3BlcnR5Q29uZmlnLmNzcztcclxuICAgICAgdGhpcy5kYXRlRm9ybWF0ID0gdGhpcy5wcm9wZXJ0eUNvbmZpZy5kYXRlRm9ybWF0ID8gdGhpcy5wcm9wZXJ0eUNvbmZpZy5kYXRlRm9ybWF0IDogdGhpcy5kYXRlRm9ybWF0O1xyXG4gICAgICB0aGlzLnNldFR5cGUoKTtcclxuICAgIH1cclxuICAgIHRoaXMubGlzdFZhbGlkYXRpb24gPSBWYWxpZGF0aW9uU2VydmljZS5nZXRWYWxpZGF0b3JBcnIob2xkVmFsaWRhdG9yLCB0aGlzLnByb3BlcnR5Q29uZmlnKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRQcm9wZXJ0eUNvbmZpZygpOiBTeXNQcm9wZXJ0eURldGFpbEJlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMucHJvcGVydHlDb25maWc7XHJcbiAgfVxyXG4gIHB1YmxpYyBnZXRMaXN0VmFsaWRhdGlvbigpOiBBcnJheTxWYWxpZGF0b3JGbj4ge1xyXG4gICAgcmV0dXJuIHRoaXMubGlzdFZhbGlkYXRpb247XHJcbiAgfVxyXG4gIHByaXZhdGUgc2V0VHlwZSgpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLnByb3BlcnR5Q29uZmlnLm1vbmV5Rm9ybWF0KSB7XHJcbiAgICAgIHRoaXMudHlwZSA9IElOUFVUX1RZUEUuQ1VSUkVOQ1k7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLnByb3BlcnR5Q29uZmlnLm51bWJlckZvcm1hdCkge1xyXG4gICAgICB0aGlzLnR5cGUgPSBJTlBVVF9UWVBFLk5VTUJFUjtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMucHJvcGVydHlDb25maWcuZGF0ZUZvcm1hdCkge1xyXG4gICAgICB0aGlzLnR5cGUgPSBJTlBVVF9UWVBFLkRBVEU7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIC8vIGlmICh0aGlzLnByb3BlcnR5Q29uZmlnLm1heExlbmd0aCA+PSAyMDApIHtcclxuICAgIC8vICAgdGhpcy50eXBlID0gSU5QVVRfVFlQRS5URVhUX0FSRUE7XHJcbiAgICAvLyAgIHJldHVybjtcclxuICAgIC8vIH1cclxuICAgIHRoaXMudHlwZSA9IElOUFVUX1RZUEUuVEVYVDtcclxuICB9XHJcbn1cclxuIl19