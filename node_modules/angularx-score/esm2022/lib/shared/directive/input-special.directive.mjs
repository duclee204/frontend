import { NG_VALIDATORS } from '@angular/forms';
import { Directive, Input } from '@angular/core';
import * as i0 from "@angular/core";
export class InputSpecialDirective {
    set type(value) {
        this._type = value;
    }
    set othertype(value) {
        this._othertype = value;
    }
    constructor() {
        this._type = '';
        this._othertype = '';
        this.validator = this.validateSpecialCharecter();
    }
    validate(c) {
        return this.validator(c);
    }
    validateSpecialCharecter() {
        return (c) => {
            const text = c.value;
            if (text && (this._type === 'text' || this._type === 'email' || this._type === 'tel') && !this._othertype) {
                const iChars = '!#$^*[]\\{}\"?<>\'';
                for (let j = 0; j < text.length; j++) {
                    if (iChars.indexOf(text.charAt(j)) >= 0) {
                        return { isValidInput: true };
                    }
                }
            }
            return null;
        };
    }
    registerOnValidatorChange(fn) {
        this._onChange = fn;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: InputSpecialDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.5", type: InputSpecialDirective, selector: "input[type=\"text\"],input[type=\"email\"],input[type=\"tel\"],input:not([othertype=\"url\"]),textarea", inputs: { type: "type", othertype: "othertype" }, providers: [
            {
                provide: NG_VALIDATORS,
                useExisting: InputSpecialDirective,
                multi: true
            }
        ], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: InputSpecialDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[type="text"],input[type="email"],input[type="tel"],input:not([othertype="url"]),textarea',
                    providers: [
                        {
                            provide: NG_VALIDATORS,
                            useExisting: InputSpecialDirective,
                            multi: true
                        }
                    ]
                }]
        }], ctorParameters: function () { return []; }, propDecorators: { type: [{
                type: Input
            }], othertype: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtc3BlY2lhbC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9hbmd1bGFyeC1zY29yZS9zcmMvbGliL3NoYXJlZC9kaXJlY3RpdmUvaW5wdXQtc3BlY2lhbC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUF1QixhQUFhLEVBQThELE1BQU0sZ0JBQWdCLENBQUM7QUFDaEksT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBWWpELE1BQU0sT0FBTyxxQkFBcUI7SUFLaEMsSUFDSSxJQUFJLENBQUMsS0FBYTtRQUNwQixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztJQUNyQixDQUFDO0lBQ0QsSUFDSSxTQUFTLENBQUMsS0FBYTtRQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQztJQUMxQixDQUFDO0lBR0Q7UUFkUSxVQUFLLEdBQUcsRUFBRSxDQUFDO1FBQ1gsZUFBVSxHQUFHLEVBQUUsQ0FBQztRQWN0QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyx3QkFBd0IsRUFBRSxDQUFDO0lBQ25ELENBQUM7SUFFRCxRQUFRLENBQUMsQ0FBYztRQUN0QixPQUFPLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztJQUVELHdCQUF3QjtRQUN0QixPQUFPLENBQUMsQ0FBYyxFQUFFLEVBQUU7WUFDeEIsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNyQixJQUFJLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssTUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUN6RyxNQUFNLE1BQU0sR0FBRyxvQkFBb0IsQ0FBQztnQkFDcEMsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7b0JBQ3BDLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFO3dCQUNyQyxPQUFPLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxDQUFDO3FCQUNqQztpQkFDRjthQUNGO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDLENBQUM7SUFDSixDQUFDO0lBRUQseUJBQXlCLENBQUMsRUFBYztRQUN0QyxJQUFJLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztJQUN0QixDQUFDOzhHQXhDVSxxQkFBcUI7a0dBQXJCLHFCQUFxQixtTEFSckI7WUFDVDtnQkFDQyxPQUFPLEVBQUUsYUFBYTtnQkFDdEIsV0FBVyxFQUFFLHFCQUFxQjtnQkFDbEMsS0FBSyxFQUFFLElBQUk7YUFDWDtTQUNEOzsyRkFFUyxxQkFBcUI7a0JBVmpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLGdHQUFnRztvQkFDMUcsU0FBUyxFQUFFO3dCQUNUOzRCQUNDLE9BQU8sRUFBRSxhQUFhOzRCQUN0QixXQUFXLHVCQUF1Qjs0QkFDbEMsS0FBSyxFQUFFLElBQUk7eUJBQ1g7cUJBQ0Q7aUJBQ0g7MEVBT0ssSUFBSTtzQkFEUCxLQUFLO2dCQUtGLFNBQVM7c0JBRFosS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFJlYWN0aXZlRm9ybXNNb2R1bGUsIE5HX1ZBTElEQVRPUlMsIEZvcm1zTW9kdWxlLCBGb3JtR3JvdXAsIEZvcm1Db250cm9sLCBWYWxpZGF0b3JGbiwgVmFsaWRhdG9yfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XHJcbmltcG9ydCB7IERpcmVjdGl2ZSwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnaW5wdXRbdHlwZT1cInRleHRcIl0saW5wdXRbdHlwZT1cImVtYWlsXCJdLGlucHV0W3R5cGU9XCJ0ZWxcIl0saW5wdXQ6bm90KFtvdGhlcnR5cGU9XCJ1cmxcIl0pLHRleHRhcmVhJyxcclxuICBwcm92aWRlcnM6IFtcclxuICAgIHtcclxuICAgICBwcm92aWRlOiBOR19WQUxJREFUT1JTLFxyXG4gICAgIHVzZUV4aXN0aW5nOiBJbnB1dFNwZWNpYWxEaXJlY3RpdmUsXHJcbiAgICAgbXVsdGk6IHRydWVcclxuICAgIH1cclxuICAgXVxyXG59KVxyXG5leHBvcnQgY2xhc3MgSW5wdXRTcGVjaWFsRGlyZWN0aXZlIGltcGxlbWVudHMgVmFsaWRhdG9yIHtcclxuICBwcml2YXRlIF90eXBlID0gJyc7XHJcbiAgcHJpdmF0ZSBfb3RoZXJ0eXBlID0gJyc7XHJcbiAgcHJpdmF0ZSBfb25DaGFuZ2UhOiBGdW5jdGlvbjtcclxuXHJcbiAgQElucHV0KClcclxuICBzZXQgdHlwZSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl90eXBlID0gdmFsdWU7XHJcbiAgfVxyXG4gIEBJbnB1dCgpXHJcbiAgc2V0IG90aGVydHlwZSh2YWx1ZTogc3RyaW5nKSB7XHJcbiAgICB0aGlzLl9vdGhlcnR5cGUgPSB2YWx1ZTtcclxuICB9XHJcbiAgdmFsaWRhdG9yOiBWYWxpZGF0b3JGbiB8IGFueTtcclxuXHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnZhbGlkYXRvciA9IHRoaXMudmFsaWRhdGVTcGVjaWFsQ2hhcmVjdGVyKCk7XHJcbiAgfVxyXG5cclxuICB2YWxpZGF0ZShjOiBGb3JtQ29udHJvbCkge1xyXG4gICByZXR1cm4gdGhpcy52YWxpZGF0b3IoYyk7XHJcbiAgfVxyXG5cclxuICB2YWxpZGF0ZVNwZWNpYWxDaGFyZWN0ZXIoKSB7XHJcbiAgICByZXR1cm4gKGM6IEZvcm1Db250cm9sKSA9PiB7XHJcbiAgICAgIGNvbnN0IHRleHQgPSBjLnZhbHVlO1xyXG4gICAgICBpZiAodGV4dCAmJiAodGhpcy5fdHlwZSA9PT0gJ3RleHQnIHx8IHRoaXMuX3R5cGUgPT09ICdlbWFpbCcgfHwgdGhpcy5fdHlwZSA9PT0gJ3RlbCcpICYmICF0aGlzLl9vdGhlcnR5cGUpIHtcclxuICAgICAgICBjb25zdCBpQ2hhcnMgPSAnISMkXipbXVxcXFx7fVxcXCI/PD5cXCcnO1xyXG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGV4dC5sZW5ndGg7IGorKykge1xyXG4gICAgICAgICAgaWYgKGlDaGFycy5pbmRleE9mKHRleHQuY2hhckF0KGopKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIHsgaXNWYWxpZElucHV0OiB0cnVlIH07XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJlZ2lzdGVyT25WYWxpZGF0b3JDaGFuZ2UoZm46ICgpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuX29uQ2hhbmdlID0gZm47XHJcbiAgfVxyXG59XHJcbiJdfQ==