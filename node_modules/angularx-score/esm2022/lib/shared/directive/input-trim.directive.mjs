import { Directive, ElementRef, HostListener, Inject, Input, Optional, Renderer2 } from '@angular/core';
import { COMPOSITION_BUFFER_MODE, NG_VALUE_ACCESSOR } from '@angular/forms';
import * as i0 from "@angular/core";
export class InputTrimDirective {
    set type(value) {
        this._type = value || 'text';
    }
    /**
     * Updates the value on the blur event.
     */
    onBlur(event, value) {
        this.updateValue(event, value.trim());
        this.onTouched();
    }
    /**
     * Updates the value on the input event.
     */
    onInput(event, value) {
        this.updateValue(event, value);
    }
    constructor(renderer, elementRef, compositionMode) {
        // Get a value of the trim attribute if it was set.
        this.trim = '';
        /**
         * Keep the type of input element in a cache.
         *
         */
        this._type = 'text';
        /**
         * Keep the value of input element in a cache.
         *
         */
        this._value = '';
        this.onChange = (_) => { };
        this.onTouched = () => { };
        this._sourceRenderer = renderer;
        this._sourceElementRef = elementRef;
    }
    registerOnChange(fn) { this.onChange = fn; }
    registerOnTouched(fn) { this.onTouched = fn; }
    /**
     * Writes a new value to the element based on the type of input element.
     *
     */
    writeValue(value) {
        //
        // The Template Driven Form doesn't automatically convert undefined values to null. We will do,
        // keeping an empty string as string because the condition `'' || null` returns null what
        // could change the initial state of a model.
        // The Reactive Form does it automatically during initialization.
        //
        // SEE: https://github.com/anein/angular2-trim-directive/issues/18
        //
        this._value = value;
        this._sourceRenderer.setProperty(this._sourceElementRef.nativeElement, 'value', this._value);
        // a dirty trick (or magic) goes here:
        // it updates the element value if `setProperty` doesn't set a new value for some reason.
        //
        // SEE: https://github.com/anein/angular2-trim-directive/issues/9
        //
        if (this._type !== 'text') {
            this._sourceRenderer.setAttribute(this._sourceElementRef.nativeElement, 'value', this._value);
        }
    }
    setDisabledState(isDisabled) {
        this._sourceRenderer.setProperty(this._sourceElementRef.nativeElement, 'disabled', isDisabled);
    }
    /**
     * Trims an input value, and sets it to the model and element.
     *
     */
    updateValue(event, value) {
        // check if the user has set an optional attribute, and Trimmmm!!! Uhahahaha!
        value = event === 'input' ? value : value.trim();
        const previous = this._value;
        // write value to the element.
        this.writeValue(value);
        // Update the model only on getting new value, and prevent firing
        // the `dirty` state when click on empty fields.
        //
        // SEE:
        //    https://github.com/anein/angular2-trim-directive/issues/17
        //    https://github.com/anein/angular2-trim-directive/issues/35
        //    https://github.com/anein/angular2-trim-directive/issues/39
        //
        if ((this._value || previous) && this._value.trim() !== previous) {
            this.onChange(this._value);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: InputTrimDirective, deps: [{ token: Renderer2 }, { token: ElementRef }, { token: COMPOSITION_BUFFER_MODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "16.2.5", type: InputTrimDirective, selector: "input[type=\"text\"], textarea[]", inputs: { trim: "trim", type: "type" }, host: { listeners: { "blur": "onBlur($event.type,$event.target.value)", "input": "onInput($event.type,$event.target.value)" } }, providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: InputTrimDirective, multi: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "16.2.5", ngImport: i0, type: InputTrimDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[type="text"], textarea[]',
                    providers: [{ provide: NG_VALUE_ACCESSOR, useExisting: InputTrimDirective, multi: true }]
                }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [COMPOSITION_BUFFER_MODE]
                }] }]; }, propDecorators: { trim: [{
                type: Input
            }], type: [{
                type: Input
            }], onBlur: [{
                type: HostListener,
                args: ['blur', ['$event.type', '$event.target.value']]
            }], onInput: [{
                type: HostListener,
                args: ['input', ['$event.type', '$event.target.value']]
            }] } });
//# sourceMappingURL=data:application/json;base64,